{"version":3,"file":"static/js/397.d042b3a6.chunk.js","mappings":"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","sources":["../node_modules/pixi.js/src/scene/text/canvas/BatchableText.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextPipe.ts","../node_modules/pixi.js/src/utils/canvas/getCanvasBoundingBox.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextGenerator.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextSystem.ts","../node_modules/pixi.js/src/scene/text/init.ts","../node_modules/pixi.js/src/rendering/high-shader/shader-bits/localUniformBit.ts","../node_modules/pixi.js/src/scene/sprite-tiling/shader/tilingBit.ts","../node_modules/pixi.js/src/scene/sprite-tiling/shader/TilingSpriteShader.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/QuadGeometry.ts","../node_modules/pixi.js/src/scene/sprite-tiling/TilingSpritePipe.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/setUvs.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/applyMatrix.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/setPositions.ts","../node_modules/pixi.js/src/scene/sprite-tiling/init.ts","../node_modules/pixi.js/src/scene/mesh/shared/BatchableMesh.ts","../node_modules/pixi.js/src/rendering/renderers/shared/state/State.ts","../node_modules/pixi.js/src/app/ResizePlugin.ts","../node_modules/pixi.js/src/app/TickerPlugin.ts","../node_modules/pixi.js/src/app/init.ts","../node_modules/pixi.js/src/scene/sprite/BatchableSprite.ts","../node_modules/pixi.js/src/scene/graphics/shared/Graphics.ts","../node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/localUniformMSDFBit.ts","../node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/mSDFBit.ts","../node_modules/pixi.js/src/scene/text/sdfShader/SdfShader.ts","../node_modules/pixi.js/src/scene/text-bitmap/BitmapTextPipe.ts","../node_modules/pixi.js/src/scene/text-bitmap/init.ts","../node_modules/pixi.js/src/scene/graphics/shared/GraphicsPipe.ts","../node_modules/pixi.js/src/scene/graphics/init.ts","../node_modules/pixi.js/src/scene/text-html/BatchableHTMLText.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextPipe.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextRenderData.ts","../node_modules/pixi.js/src/scene/text-html/utils/textStyleToCSS.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextStyle.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadFontCSS.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadFontAsBase64.ts","../node_modules/pixi.js/src/scene/text-html/utils/getFontCss.ts","../node_modules/pixi.js/src/scene/text-html/utils/measureHtmlText.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextSystem.ts","../node_modules/pixi.js/src/scene/text-html/utils/extractFontFamilies.ts","../node_modules/pixi.js/src/scene/text-html/utils/getSVGUrl.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadSVGImage.ts","../node_modules/pixi.js/src/utils/browser/isSafari.ts","../node_modules/pixi.js/src/scene/text-html/utils/getTemporaryCanvasFromImage.ts","../node_modules/pixi.js/src/scene/text-html/init.ts","../node_modules/pixi.js/src/scene/mesh/shared/MeshPipe.ts","../node_modules/pixi.js/src/scene/mesh/init.ts","../node_modules/pixi.js/src/scene/text/utils/getPo2TextureFromSource.ts","../node_modules/pixi.js/src/scene/mesh-plane/PlaneGeometry.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceGeometry.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceSpritePipe.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/init.ts","../node_modules/pixi.js/src/filters/FilterPipe.ts","../node_modules/pixi.js/src/filters/FilterSystem.ts","../node_modules/pixi.js/src/scene/container/bounds/getRenderableBounds.ts","../node_modules/pixi.js/src/filters/init.ts","../node_modules/pixi.js/src/scene/particle-container/gl/GlParticleContainerAdaptor.ts","../node_modules/pixi.js/src/scene/particle-container/shared/utils/createIndicesForQuads.ts","../node_modules/pixi.js/src/scene/particle-container/shared/utils/generateParticleUpdateFunction.ts","../node_modules/pixi.js/src/scene/particle-container/shared/ParticleBuffer.ts","../node_modules/pixi.js/src/scene/particle-container/shared/shader/ParticleShader.ts","../node_modules/pixi.js/src/scene/particle-container/shared/ParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/shared/GlParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/gpu/GpuParticleContainerAdaptor.ts","../node_modules/pixi.js/src/scene/particle-container/shared/GpuParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/init.ts","../node_modules/pixi.js/src/scene/text/utils/updateTextBounds.ts","../node_modules/pixi.js/src/scene/graphics/gpu/colorToUniform.ts","../node_modules/pixi.js/src/scene/mesh/shared/MeshGeometry.ts"],"sourcesContent":["import { BatchableSprite } from '../../sprite/BatchableSprite';\n\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Text } from '../Text';\n\n/** @internal */\nexport class BatchableText extends BatchableSprite\n{\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        super();\n\n        // Next step is to make canvasTextSystem a GLOBAL object.\n        // so this is ok for now..\n        this._renderer = renderer;\n\n        renderer.runners.resolutionChange.add(this);\n    }\n\n    public resolutionChange()\n    {\n        const text = this.renderable as Text;\n\n        if (text._autoResolution)\n        {\n            text.onViewUpdate();\n        }\n    }\n\n    public destroy()\n    {\n        this._renderer.canvasText.returnTexture(this.texture);\n\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { updateTextBounds } from '../utils/updateTextBounds';\nimport { BatchableText } from './BatchableText';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Text } from '../Text';\n\n/** @internal */\nexport class CanvasTextPipe implements RenderPipe<Text>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'text',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(text: Text): boolean\n    {\n        return text._didTextUpdate;\n    }\n\n    public addRenderable(text: Text, instructionSet: InstructionSet)\n    {\n        const batchableText = this._getGpuText(text);\n\n        if (text._didTextUpdate)\n        {\n            this._updateGpuText(text);\n            text._didTextUpdate = false;\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableText, instructionSet);\n    }\n\n    public updateRenderable(text: Text)\n    {\n        const batchableText = this._getGpuText(text);\n\n        batchableText._batcher.updateElement(batchableText);\n    }\n\n    private _updateGpuText(text: Text)\n    {\n        const batchableText = this._getGpuText(text);\n\n        if (batchableText.texture)\n        {\n            this._renderer.canvasText.returnTexture(batchableText.texture);\n        }\n\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n\n        batchableText.texture = batchableText.texture = this._renderer.canvasText.getTexture(text);\n\n        updateTextBounds(batchableText, text);\n    }\n\n    private _getGpuText(text: Text)\n    {\n        return text._gpuData[this._renderer.uid] || this.initGpuText(text);\n    }\n\n    public initGpuText(text: Text)\n    {\n        const batchableText = new BatchableText(this._renderer);\n\n        batchableText.renderable = text;\n        batchableText.transform = text.groupTransform;\n        batchableText.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        batchableText.roundPixels = (this._renderer._roundPixels | text._roundPixels) as 0 | 1;\n\n        text._gpuData[this._renderer.uid] = batchableText;\n\n        return batchableText;\n    }\n\n    public destroy()\n    {\n        this._renderer = null;\n    }\n}\n","import { DOMAdapter } from '../../environment/adapter';\nimport { nextPow2 } from '../../maths/misc/pow2';\nimport { Rectangle } from '../../maths/shapes/Rectangle';\n\nimport type { ICanvas } from '../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../environment/canvas/ICanvasRenderingContext2D';\n\n// Internal canvas for measuring bounds\nlet _internalCanvas: ICanvas | null = null;\nlet _internalContext: ICanvasRenderingContext2D | null = null;\n\nfunction ensureInternalCanvas(width: number, height: number): void\n{\n    if (!_internalCanvas)\n    {\n        _internalCanvas = DOMAdapter.get().createCanvas(256, 128);\n        _internalContext = _internalCanvas.getContext('2d', { willReadFrequently: true });\n        _internalContext.globalCompositeOperation = 'copy';\n        _internalContext.globalAlpha = 1;\n    }\n\n    if (_internalCanvas.width < width || _internalCanvas.height < height)\n    {\n        // Use power-of-two dimensions for better performance\n        _internalCanvas.width = nextPow2(width);\n        _internalCanvas.height = nextPow2(height);\n    }\n}\n\nfunction checkRow(data: Uint8ClampedArray, width: number, y: number)\n{\n    for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\nfunction checkColumn(data: Uint8ClampedArray, width: number, x: number, top: number, bottom: number)\n{\n    const stride = 4 * width;\n\n    for (let y = top, index = (top * stride) + (4 * x); y <= bottom; ++y, index += stride)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\n/** @internal */\nexport interface GetCanvasBoundingBoxOptions\n{\n    /** The canvas to measure */\n    canvas: ICanvas;\n    /** Optional. The width to analyze (defaults to canvas.width) */\n    width?: number;\n    /** Optional. The height to analyze (defaults to canvas.height) */\n    height?: number;\n    /**\n     * Optional. The resolution at which to analyze the canvas, between 0-1.\n     * Lower values improve performance for large canvases but may be less precise.\n     * Default is 1 (full resolution).\n     */\n    resolution?: number;\n    /** Optional. The rectangle to store the result in. */\n    output?: Rectangle;\n}\n\n/**\n * Measures the bounding box of a canvas's visible (non-transparent) pixels.\n *\n * This function analyzes the alpha channel of the canvas pixels to find the smallest\n * rectangle containing all non-transparent pixels. It's useful for optimizing sprite\n * rendering by trimming transparent borders.\n *\n * Uses an internal canvas with `willReadFrequently: true` for efficient pixel data access.\n * This internal canvas is reused between calls for better performance.\n * @example\n * ```typescript\n * // Basic usage - get trim bounds at full resolution\n * const bounds = getCanvasBoundingBox({ canvas: myCanvas });\n * console.log(bounds); // Rectangle{x: 10, y: 5, width: 100, height: 200}\n * // Optimized for performance with lower resolution scanning\n * const fastBounds = getCanvasBoundingBox({\n *     canvas: largeCanvas,\n *     width: largeCanvas.width,\n *     height: largeCanvas.height,\n *     resolution: 0.5\n * });\n * // Resolution of 0.5 means scanning at half size, much faster for large canvases\n *\n * // Using custom dimensions - only analyze part of the canvas\n * const partialBounds = getCanvasBoundingBox({ canvas: myCanvas, width: 100, height: 100 });\n * // Only analyzes a 100x100 region starting from top-left\n * ```\n * @param options - The options for measuring the bounding box, including the canvas to measure.\n * @returns The bounding box as a Rectangle containing the visible content.\n *          Returns Rectangle.EMPTY if the canvas is completely transparent.\n * @internal\n */\nexport function getCanvasBoundingBox(\n    options: GetCanvasBoundingBoxOptions,\n): Rectangle;\n/**\n * @param canvas\n * @param resolution\n * @internal\n * @deprecated since 8.10.0\n */\nexport function getCanvasBoundingBox(canvas: ICanvas, resolution?: number): Rectangle;\n/**\n * @param {...any} args\n * @internal\n */\nexport function getCanvasBoundingBox(...args: [GetCanvasBoundingBoxOptions] | [ICanvas, number?]): Rectangle\n{\n    let options = args[0] as GetCanvasBoundingBoxOptions;\n\n    if (!options.canvas)\n    {\n        options = { canvas: args[0] as ICanvas, resolution: args[1] };\n    }\n\n    const { canvas } = options; // canvas is correctly extracted from options\n\n    // Cap resolution at 1\n    const resolution = Math.min(options.resolution ?? 1, 1);\n    const width = options.width ?? canvas.width;\n    const height = options.height ?? canvas.height;\n    let output = options.output;\n\n    // Ensure internal canvas is large enough\n    ensureInternalCanvas(width, height);\n\n    if (!_internalContext)\n    {\n        throw new TypeError('Failed to get canvas 2D context');\n    }\n\n    // Set up for pixel replacement (no blending)\n    _internalContext.drawImage(\n        canvas as unknown as CanvasImageSource,\n        0, 0,\n        width, height,\n        0, 0,\n        width * resolution, height * resolution\n    );\n\n    // Get the image data at full resolution\n    const imageData = _internalContext.getImageData(0, 0, width, height);\n    const data = imageData.data;\n\n    let left = 0;\n    let top = 0;\n    let right = width - 1;\n    let bottom = height - 1;\n\n    while (top < height && checkRow(data, width, top)) ++top;\n    if (top === height) return Rectangle.EMPTY;\n    while (checkRow(data, width, bottom)) --bottom;\n    while (checkColumn(data, width, left, top, bottom)) ++left;\n    while (checkColumn(data, width, right, top, bottom)) --right;\n\n    ++right;\n    ++bottom;\n\n    _internalContext.globalCompositeOperation = 'source-over';\n    // draw the rect on the canvas\n    _internalContext.strokeRect(left, top, right - left, bottom - top);\n    _internalContext.globalCompositeOperation = 'copy';\n\n    output ??= new Rectangle();\n\n    output.set(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n\n    return output;\n}\n\n","import { Color } from '../../../color/Color';\nimport { Rectangle } from '../../../maths/shapes/Rectangle';\nimport { type CanvasAndContext, CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox';\nimport { type TextStyle } from '../TextStyle';\nimport { CanvasTextMetrics } from './CanvasTextMetrics';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle';\n\n/**\n * Temporary rectangle for getting the bounding box of the text.\n * @internal\n */\nconst tempRect = new Rectangle();\n\n/**\n * Utility for generating and managing canvas-based text rendering.\n *\n * This class is responsible for rendering text to canvas elements based on provided styles,\n * measuring the resulting text dimensions, and managing the lifecycle of canvas resources.\n *\n * CanvasTextGenerator supports:\n * - Text rendering with various styles (fill, stroke, gradient, etc.)\n * - Drop shadows and letter spacing\n * - Automatic trimming of transparent pixels\n * - Canvas resource pooling\n *\n * As a singleton, it's accessed via the exported `CanvasTextGenerator` constant.\n * @example\n * ```typescript\n * // Basic usage - render text to a canvas\n * import { CanvasTextGenerator } from 'pixi.js';\n * import { TextStyle } from 'pixi.js';\n *\n * // Create a text style\n * const style = new TextStyle({\n *   fontFamily: 'Arial',\n *   fontSize: 24,\n *   fill: 0xff1010,\n *   align: 'center',\n * });\n *\n * // Get a canvas with the text rendered to it\n * const { canvasAndContext, frame } = CanvasTextGenerator.getCanvasAndContext({\n *   text: 'Hello Pixi!',\n *   style,\n *   resolution: 1\n * });\n *\n * @internal\n */\nclass CanvasTextGeneratorClass\n{\n    /**\n     * Creates a canvas with the specified text rendered to it.\n     *\n     * Generates a canvas of appropriate size, renders the text with the provided style,\n     * and returns both the canvas/context and a Rectangle representing the text bounds.\n     *\n     * When trim is enabled in the style, the frame will represent the bounds of the\n     * non-transparent pixels, which can be smaller than the full canvas.\n     * @param options - The options for generating the text canvas\n     * @param options.text - The text to render\n     * @param options.style - The style to apply to the text\n     * @param options.resolution - The resolution of the canvas (defaults to 1)\n     * @param options.padding\n     * @returns An object containing the canvas/context and the frame (bounds) of the text\n     */\n    public getCanvasAndContext(options: {text: string, style: TextStyle, resolution?: number, padding?: number})\n    {\n        const { text, style, resolution = 1 } = options;\n\n        const padding = (style as TextStyle)._getFinalPadding();\n\n        // create a canvas with the word hello on it\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (padding * 2))) * resolution);\n\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n\n        this._renderTextToCanvas(text, style, padding, resolution, canvasAndContext);\n\n        const frame = style.trim\n            ? getCanvasBoundingBox({ canvas: canvasAndContext.canvas, width, height, resolution: 1, output: tempRect })\n            : tempRect.set(0, 0, width, height);\n\n        return {\n            canvasAndContext,\n            frame\n        };\n    }\n\n    /**\n     * Returns a canvas and context to the pool.\n     *\n     * This should be called when you're done with the canvas to allow reuse\n     * and prevent memory leaks.\n     * @param canvasAndContext - The canvas and context to return to the pool\n     */\n    public returnCanvasAndContext(canvasAndContext: CanvasAndContext): void\n    {\n        CanvasPool.returnCanvasAndContext(canvasAndContext);\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     * @param text - The text to render\n     * @param style - The style of the text\n     * @param padding - The padding of the text\n     * @param resolution - The resolution of the text\n     * @param canvasAndContext - The canvas and context to render the text to\n     */\n    private _renderTextToCanvas(\n        text: string,\n        style: TextStyle,\n        padding: number,\n        resolution: number,\n        canvasAndContext: CanvasAndContext\n    ): void\n    {\n        const { canvas, context } = canvasAndContext;\n\n        const font = fontStringFromTextStyle(style);\n\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);// , canvas);\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        const height = canvas.height;\n\n        context.resetTransform();\n        context.scale(resolution, resolution);\n        context.textBaseline = style.textBaseline;\n\n        // set stroke styles..\n\n        if (style._stroke?.width)\n        {\n            const strokeStyle = style._stroke;\n\n            context.lineWidth = strokeStyle.width;\n\n            context.miterLimit = strokeStyle.miterLimit;\n            context.lineJoin = strokeStyle.join;\n            context.lineCap = strokeStyle.cap;\n        }\n\n        // return;\n        context.font = font;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const shadowOptions = style.dropShadow;\n\n                const dropShadowColor = shadowOptions.color;\n                const dropShadowAlpha = shadowOptions.alpha;\n\n                context.shadowColor = Color.shared\n                    .setValue(dropShadowColor)\n                    .setAlpha(dropShadowAlpha)\n                    .toRgbaString();\n\n                const dropShadowBlur = shadowOptions.blur * resolution;\n                const dropShadowDistance = shadowOptions.distance * resolution;\n\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(shadowOptions.angle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context, measured) : null;\n\n                if (style._stroke?.width)\n                {\n                    const padding = style._stroke.width * style._stroke.alignment;\n\n                    context.strokeStyle = getCanvasFillStyle(style._stroke, context, measured, padding);\n                }\n\n                context.shadowColor = 'black';\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            const strokeWidth = style._stroke?.width ?? 0;\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = strokeWidth / 2;\n                linePositionY = ((strokeWidth / 2) + (i * lineHeight)) + fontProperties.ascent + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style._stroke?.width)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + padding,\n                        linePositionY + padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style._fill !== undefined)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + padding,\n                        linePositionY + padding - dsOffsetText\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     *\n     * This method handles rendering text with the correct letter spacing, using either:\n     * 1. Native letter spacing if supported by the browser\n     * 2. Manual letter spacing calculation if not natively supported\n     *\n     * For manual letter spacing, it calculates the position of each character\n     * based on its width and the desired spacing.\n     * @param text - The text to draw\n     * @param style - The text style to apply\n     * @param canvasAndContext - The canvas and context to draw to\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Whether to render the stroke (true) or fill (false)\n     * @private\n     */\n    private _drawLetterSpacing(\n        text: string,\n        style: TextStyle,\n        canvasAndContext: CanvasAndContext,\n        x: number, y: number,\n        isStroke = false\n    ): void\n    {\n        const { context } = canvasAndContext;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        if (letterSpacing === 0 || useExperimentalLetterSpacing)\n        {\n            if (isStroke)\n            {\n                context.strokeText(text, x, y);\n            }\n            else\n            {\n                context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n        let previousWidth = context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n}\n\n/** @internal */\nexport const CanvasTextGenerator = new CanvasTextGeneratorClass();\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { type Filter } from '../../../filters/Filter';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { TextureStyle } from '../../../rendering/renderers/shared/texture/TextureStyle';\nimport { deprecation } from '../../../utils/logging/deprecation';\nimport { type CanvasTextOptions } from '../Text';\nimport { TextStyle } from '../TextStyle';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource';\nimport { CanvasTextGenerator } from './CanvasTextGenerator';\n\nimport type { System } from '../../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\n\n/**\n * System plugin to the renderer to manage canvas text.\n * @category rendering\n * @advanced\n */\nexport class CanvasTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'canvasText',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(_renderer: Renderer)\n    {\n        this._renderer = _renderer;\n    }\n\n    /** @deprecated since 8.0.0 */\n    public getTexture(text: string, resolution: number, style: TextStyle, textKey: string): Texture;\n    /**\n     * This is a function that will create a texture from a text string, style and resolution.\n     * Useful if you want to make a texture of your text and use if for various other pixi things!\n     * @param options - The options of the text that will be used to generate the texture.\n     * @param options.text - the text to render\n     * @param options.style - the style of the text\n     * @param options.resolution - the resolution of the texture\n     * @returns the newly created texture\n     */\n    public getTexture(options: CanvasTextOptions): Texture;\n    public getTexture(\n        options: CanvasTextOptions | string,\n        _resolution?: number,\n        _style?: TextStyle,\n        _textKey?: string\n    ): Texture\n    {\n        if (typeof options === 'string')\n        {\n            // #if _DEBUG\n            deprecation('8.0.0', 'CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments');\n            // #endif\n\n            options = {\n                text: options,\n                style: _style,\n                resolution: _resolution,\n            };\n        }\n\n        if (!(options.style instanceof TextStyle))\n        {\n            options.style = new TextStyle(options.style);\n        }\n\n        if (!(options.textureStyle instanceof TextureStyle))\n        {\n            options.textureStyle = new TextureStyle(options.textureStyle);\n        }\n\n        if (typeof options.text !== 'string')\n        {\n            options.text = options.text.toString();\n        }\n\n        const { text, style, textureStyle } = options;\n\n        const resolution = options.resolution ?? this._renderer.resolution;\n\n        const { frame, canvasAndContext } = CanvasTextGenerator.getCanvasAndContext({\n            text: text as string,\n            style: style as TextStyle,\n            resolution,\n        });\n\n        const texture = getPo2TextureFromSource(canvasAndContext.canvas, frame.width, frame.height, resolution);\n\n        if (textureStyle) texture.source.style = textureStyle as TextureStyle;\n\n        if (style.trim)\n        {\n            // reapply the padding to the frame\n            frame.pad(style.padding);\n            texture.frame.copyFrom(frame);\n            texture.updateUvs();\n        }\n\n        if (style.filters)\n        {\n            // apply the filters to the texture if required..\n            // this returns a new texture with the filters applied\n            const filteredTexture = this._applyFilters(texture, style.filters);\n\n            // return the original texture to the pool so we can reuse the next frame\n            this.returnTexture(texture);\n\n            CanvasTextGenerator.returnCanvasAndContext(canvasAndContext);\n\n            // return the new texture with the filters applied\n            return filteredTexture;\n        }\n\n        this._renderer.texture.initSource(texture._source);\n\n        CanvasTextGenerator.returnCanvasAndContext(canvasAndContext);\n\n        return texture;\n    }\n\n    /**\n     * Returns a texture that was created wit the above `getTexture` function.\n     * Handy if you are done with a texture and want to return it to the pool.\n     * @param texture - The texture to be returned.\n     */\n    public returnTexture(texture: Texture)\n    {\n        const source = texture.source;\n\n        source.resource = null;\n        source.uploadMethodId = 'unknown';\n        source.alphaMode = 'no-premultiply-alpha';\n\n        TexturePool.returnTexture(texture, true);\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     * @deprecated since 8.10.0\n     */\n    public renderTextToCanvas(): void\n    {\n        // #if _DEBUG\n        deprecation(\n            '8.10.0',\n            'CanvasTextSystem.renderTextToCanvas: no longer supported, use CanvasTextSystem.getTexture instead'\n        );\n        // #endif\n    }\n\n    /**\n     * Applies the specified filters to the given texture.\n     *\n     * This method takes a texture and a list of filters, applies the filters to the texture,\n     * and returns the resulting texture. It also ensures that the alpha mode of the resulting\n     * texture is set to 'premultiplied-alpha'.\n     * @param {Texture} texture - The texture to which the filters will be applied.\n     * @param {Filter[]} filters - The filters to apply to the texture.\n     * @returns {Texture} The resulting texture after all filters have been applied.\n     */\n    private _applyFilters(texture: Texture, filters: Filter[]): Texture\n    {\n        // Save the current render target so it can be restored later\n        const currentRenderTarget = this._renderer.renderTarget.renderTarget;\n\n        // Apply the filters to the texture and get the resulting texture\n        const resultTexture = this._renderer.filter.generateFilteredTexture({\n            texture,\n            filters,\n        });\n\n        // Set the alpha mode of the resulting texture to 'premultiplied-alpha'\n\n        // Restore the previous render target\n        this._renderer.renderTarget.bind(currentRenderTarget, false);\n\n        // Return the resulting texture with the filters applied\n        return resultTexture;\n    }\n\n    public destroy(): void\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem';\n\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n","/** @internal */\nexport const localUniformBit = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* wgsl */`\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n};\n\n// TODO this works, but i think down the road it will be better to manage groups automatically if there are clashes\n/** @internal */\nexport const localUniformBitGroup2 = {\n    ...localUniformBit,\n    vertex: {\n        ...localUniformBit.vertex,\n        // replace the group!\n        header: localUniformBit.vertex.header.replace('group(1)', 'group(2)'),\n    }\n};\n\n/** @internal */\nexport const localUniformBitGl = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* glsl */`\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n};\n","/** @internal */\nexport const tilingBit = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            }\n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    }\n\n};\n\n/** @internal */\nexport const tilingBitGl = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n\n        `,\n        main: /* glsl */`\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `,\n        main: /* glsl */`\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n\n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n\n        `\n    }\n\n};\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { tilingBit, tilingBitGl } from './tilingBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\n/**\n * The shader used by the TilingSprite.\n * @internal\n */\nexport class TilingSpriteShader extends Shader\n{\n    constructor()\n    {\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBit,\n                tilingBit,\n                roundPixelsBit,\n            ],\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBitGl,\n                tilingBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        const tilingUniforms = new UniformGroup({\n            uMapCoord: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: 'vec4<f32>' },\n            uClampOffset: { value: new Float32Array([0, 0]), type: 'vec2<f32>' },\n            uTextureTransform: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: 'vec4<f32>' },\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: new UniformGroup({\n                    uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n                    uRound: { value: 0, type: 'f32' },\n                }),\n                tilingUniforms,\n                uTexture: Texture.EMPTY.source,\n                uSampler: Texture.EMPTY.source.style,\n            }\n        });\n    }\n\n    public updateUniforms(\n        width: number, height: number,\n        matrix: Matrix,\n        anchorX: number, anchorY: number,\n        texture: Texture\n    ): void\n    {\n        const tilingUniforms = this.resources.tilingUniforms;\n\n        const textureWidth = texture.width;\n        const textureHeight = texture.height;\n        const textureMatrix = texture.textureMatrix;\n\n        const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n\n        uTextureTransform.set(\n            matrix.a * textureWidth / width,\n            matrix.b * textureWidth / height,\n            matrix.c * textureHeight / width,\n            matrix.d * textureHeight / height,\n            matrix.tx / width,\n            matrix.ty / height);\n\n        uTextureTransform.invert();\n\n        tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n        tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n        tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n        tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n        tilingUniforms.uniforms.uSizeAnchor[0] = width;\n        tilingUniforms.uniforms.uSizeAnchor[1] = height;\n        tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n        tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n\n        if (texture)\n        {\n            this.resources.uTexture = texture.source;\n            this.resources.uSampler = texture.source.style;\n        }\n    }\n}\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry';\n\n/** @internal */\nexport class QuadGeometry extends MeshGeometry\n{\n    constructor()\n    {\n        super({\n            positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            indices: new Uint32Array([0, 1, 2, 0, 2, 3]),\n        });\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../rendering/renderers/shared/state/State';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader';\nimport { QuadGeometry } from './utils/QuadGeometry';\nimport { setPositions } from './utils/setPositions';\nimport { setUvs } from './utils/setUvs';\n\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { TilingSprite } from './TilingSprite';\n\nconst sharedQuad = new QuadGeometry();\n\n/** @internal */\nexport class TilingSpriteGpuData\n{\n    public canBatch: boolean = true;\n    public renderable: TilingSprite;\n    public batchableMesh?: BatchableMesh;\n    public geometry?: MeshGeometry;\n    public shader?: TilingSpriteShader;\n\n    constructor()\n    {\n        this.geometry = new MeshGeometry({\n            indices: sharedQuad.indices.slice(),\n            positions: sharedQuad.positions.slice(),\n            uvs: sharedQuad.uvs.slice(),\n        });\n    }\n\n    public destroy()\n    {\n        this.geometry.destroy();\n        this.shader?.destroy();\n    }\n}\n\n/**\n * The TilingSpritePipe is a render pipe for rendering TilingSprites.\n * It handles the batching and rendering of TilingSprites using a shader.\n * @internal\n */\nexport class TilingSpritePipe implements RenderPipe<TilingSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'tilingSprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private readonly _state: State = State.default2d;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(renderable: TilingSprite): boolean\n    {\n        const tilingSpriteData = this._getTilingSpriteData(renderable);\n\n        const couldBatch = tilingSpriteData.canBatch;\n\n        this._updateCanBatch(renderable);\n\n        const canBatch = tilingSpriteData.canBatch;\n\n        if (canBatch && canBatch === couldBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                renderable.texture\n            );\n        }\n\n        return (couldBatch !== canBatch);\n\n        // // TODO - only update if required?\n        // // only texture\n        // // only uvs\n        // // only positions?\n    }\n\n    public addRenderable(tilingSprite: TilingSprite, instructionSet: InstructionSet)\n    {\n        const batcher = this._renderer.renderPipes.batch;\n\n        // init\n        this._updateCanBatch(tilingSprite);\n\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry, canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            tilingSpriteData.batchableMesh ||= new BatchableMesh();\n\n            const batchableMesh = tilingSpriteData.batchableMesh;\n\n            if (tilingSprite.didViewUpdate)\n            {\n                this._updateBatchableMesh(tilingSprite);\n\n                batchableMesh.geometry = geometry;\n                batchableMesh.renderable = tilingSprite;\n                batchableMesh.transform = tilingSprite.groupTransform;\n                batchableMesh.setTexture(tilingSprite._texture);\n            }\n\n            batchableMesh.roundPixels = (this._renderer._roundPixels | tilingSprite._roundPixels) as 0 | 1;\n\n            batcher.addToBatch(batchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            tilingSpriteData.shader ||= new TilingSpriteShader();\n\n            this.updateRenderable(tilingSprite);\n\n            instructionSet.add(tilingSprite);\n        }\n    }\n\n    public execute(tilingSprite: TilingSprite)\n    {\n        const { shader } = this._getTilingSpriteData(tilingSprite);\n\n        shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n\n        // deal with local uniforms...\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n        localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n\n        color32BitToUniform(\n            tilingSprite.groupColorAlpha,\n            localUniforms.uColor,\n            0\n        );\n\n        this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n\n        this._renderer.encoder.draw({\n            geometry: sharedQuad,\n            shader,\n            state: this._state,\n        });\n    }\n\n    public updateRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            if (tilingSprite.didViewUpdate) this._updateBatchableMesh(tilingSprite);\n\n            batchableMesh._batcher.updateElement(batchableMesh);\n        }\n        else if (tilingSprite.didViewUpdate)\n        {\n            const { shader } = tilingSpriteData;\n            // now update uniforms...\n\n            shader.updateUniforms(\n                tilingSprite.width,\n                tilingSprite.height,\n                tilingSprite._tileTransform.matrix,\n                tilingSprite.anchor.x,\n                tilingSprite.anchor.y,\n                tilingSprite.texture,\n            );\n        }\n    }\n\n    private _getTilingSpriteData(renderable: TilingSprite): TilingSpriteGpuData\n    {\n        return renderable._gpuData[this._renderer.uid] || this._initTilingSpriteData(renderable);\n    }\n\n    private _initTilingSpriteData(tilingSprite: TilingSprite): TilingSpriteGpuData\n    {\n        const gpuData = new TilingSpriteGpuData();\n\n        gpuData.renderable = tilingSprite;\n        tilingSprite._gpuData[this._renderer.uid] = gpuData;\n\n        return gpuData;\n    }\n\n    private _updateBatchableMesh(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry } = renderableData;\n\n        const style = tilingSprite.texture.source.style;\n\n        if (style.addressMode !== 'repeat')\n        {\n            style.addressMode = 'repeat';\n            style.update();\n        }\n\n        setUvs(tilingSprite, geometry.uvs);\n        setPositions(tilingSprite, geometry.positions);\n    }\n\n    public destroy()\n    {\n        this._renderer = null;\n    }\n\n    private _updateCanBatch(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n        const texture = tilingSprite.texture;\n\n        let _nonPowOf2wrapping = true;\n\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            _nonPowOf2wrapping = (this._renderer as WebGLRenderer).context.supports.nonPowOf2wrapping;\n        }\n\n        renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n\n        return renderableData.canBatch;\n    }\n}\n\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { applyMatrix } from './applyMatrix';\n\nimport type { TilingSprite } from '../TilingSprite';\n\n/**\n * @param tilingSprite\n * @param uvs\n * @internal\n */\nexport function setUvs(tilingSprite: TilingSprite, uvs: Float32Array)\n{\n    const texture = tilingSprite.texture;\n\n    const width = texture.frame.width;\n    const height = texture.frame.height;\n\n    let anchorX = 0;\n    let anchorY = 0;\n\n    if (tilingSprite.applyAnchorToTexture)\n    {\n        anchorX = tilingSprite.anchor.x;\n        anchorY = tilingSprite.anchor.y;\n    }\n\n    uvs[0] = uvs[6] = -anchorX;\n    uvs[2] = uvs[4] = 1 - anchorX;\n    uvs[1] = uvs[3] = -anchorY;\n    uvs[5] = uvs[7] = 1 - anchorY;\n\n    const textureMatrix = Matrix.shared;\n\n    textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n\n    textureMatrix.tx /= tilingSprite.width;\n    textureMatrix.ty /= tilingSprite.height;\n\n    textureMatrix.invert();\n\n    textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n\n    applyMatrix(uvs, 2, 0, textureMatrix);\n}\n","import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { TypedArray } from '../../../rendering/renderers/shared/buffer/Buffer';\n\n/**\n * @param array\n * @param stride\n * @param offset\n * @param matrix\n * @internal\n */\nexport function applyMatrix(array: TypedArray, stride: number, offset: number, matrix: Matrix)\n{\n    let index = 0;\n    const size = array.length / (stride || 2);\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    offset *= stride;\n\n    while (index < size)\n    {\n        const x = array[offset];\n        const y = array[offset + 1];\n\n        array[offset] = (a * x) + (c * y) + tx;\n        array[offset + 1] = (b * x) + (d * y) + ty;\n\n        offset += stride;\n\n        index++;\n    }\n}\n","import type { TilingSprite } from '../TilingSprite';\n\n/**\n * @param tilingSprite\n * @param positions\n * @internal\n */\nexport function setPositions(tilingSprite: TilingSprite, positions: Float32Array)\n{\n    const anchorX = tilingSprite.anchor.x;\n    const anchorY = tilingSprite.anchor.y;\n\n    positions[0] = -anchorX * tilingSprite.width;\n    positions[1] = -anchorY * tilingSprite.height;\n    positions[2] = (1 - anchorX) * tilingSprite.width;\n    positions[3] = -anchorY * tilingSprite.height;\n    positions[4] = (1 - anchorX) * tilingSprite.width;\n    positions[5] = (1 - anchorY) * tilingSprite.height;\n    positions[6] = -anchorX * tilingSprite.width;\n    positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { TilingSpritePipe } from './TilingSpritePipe';\n\nextensions.add(TilingSpritePipe);\n","import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableMeshElement } from '../../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { ViewContainer } from '../../view/ViewContainer';\nimport type { MeshGeometry } from './MeshGeometry';\n\n/**\n * A batchable mesh object.\n * @ignore\n */\nexport class BatchableMesh implements DefaultBatchableMeshElement\n{\n    public batcherName = 'default';\n\n    public _topology: Topology;\n\n    public readonly packAsQuad = false;\n    public location: number;\n\n    public renderable: ViewContainer;\n\n    public indexOffset = 0;\n    public attributeOffset = 0;\n\n    public texture: Texture;\n    public geometry: MeshGeometry;\n    public transform: Matrix;\n    public roundPixels: 0 | 1 = 0;\n\n    public _attributeStart: number;\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n    public _indexStart: number;\n    public _textureId: number;\n    public _textureMatrixUpdateId: number = -1;\n\n    private _transformedUvs: Float32Array;\n    private _uvUpdateId: number = -1;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n\n    get topology() { return this._topology || this.geometry.topology; }\n    set topology(value: Topology) { this._topology = value; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.geometry = null;\n        this._uvUpdateId = -1;\n        this._textureMatrixUpdateId = -1;\n    }\n\n    /**\n     * Sets the texture for the batchable mesh.\n     * As it does so, it resets the texture matrix update ID.\n     * this is to ensure that the texture matrix is recalculated when the uvs are referenced\n     * @param value - The texture to set.\n     */\n    public setTexture(value: Texture)\n    {\n        if (this.texture === value) return;\n\n        this.texture = value;\n        this._textureMatrixUpdateId = -1;\n    }\n\n    get uvs()\n    {\n        const geometry = this.geometry;\n\n        const uvBuffer = geometry.getBuffer('aUV');\n\n        const uvs = uvBuffer.data;\n\n        let transformedUvs = uvs;\n        const textureMatrix = this.texture.textureMatrix;\n\n        if (!textureMatrix.isSimple)\n        {\n            transformedUvs = this._transformedUvs;\n\n            if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID)\n            {\n                if (!transformedUvs || transformedUvs.length < uvs.length)\n                {\n                    transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n                }\n\n                this._textureMatrixUpdateId = textureMatrix._updateID;\n                this._uvUpdateId = uvBuffer._updateID;\n\n                textureMatrix.multiplyUvs(uvs as Float32Array, transformedUvs);\n            }\n        }\n\n        return transformedUvs as Float32Array;\n    }\n\n    get positions()\n    {\n        return this.geometry.positions;\n    }\n\n    get indices()\n    {\n        return this.geometry.indices;\n    }\n\n    get color()\n    {\n        return this.renderable.groupColorAlpha;\n    }\n\n    get groupTransform()\n    {\n        return this.renderable.groupTransform;\n    }\n\n    get attributeSize()\n    {\n        return this.geometry.positions.length / 2;\n    }\n\n    get indexSize()\n    {\n        return this.geometry.indices.length;\n    }\n}\n","import type { BLEND_MODES, CULL_MODES } from './const';\n\nconst blendModeIds = {\n    normal: 0,\n    add: 1,\n    multiply: 2,\n    screen: 3,\n    overlay: 4,\n    erase: 5,\n    'normal-npm': 6,\n    'add-npm': 7,\n    'screen-npm': 8,\n    min: 9,\n    max: 10,\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * This is a WebGL state, and is is passed to {@link GlStateSystem}.\n *\n * Each mesh rendered may require WebGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n * @category rendering\n * @advanced\n */\nexport class State\n{\n    /**\n     * The data is a unique number based on the states settings.\n     * This lets us quickly compare states with a single number rather than looking\n     * at all the individual settings.\n     */\n    public data: number;\n    /** @internal */\n    public _blendModeId: number;\n    private _blendMode: BLEND_MODES;\n    private _polygonOffset: number;\n\n    constructor()\n    {\n        this.data = 0;\n\n        this.blendMode = 'normal';\n        this.polygonOffset = 0;\n\n        this.blend = true;\n        this.depthMask = true;\n    }\n\n    /**\n     * Activates blending of the computed fragment color values.\n     * @default true\n     */\n    get blend(): boolean\n    {\n        return !!(this.data & (1 << BLEND));\n    }\n\n    set blend(value: boolean)\n    {\n        if (!!(this.data & (1 << BLEND)) !== value)\n        {\n            this.data ^= (1 << BLEND);\n        }\n    }\n\n    /**\n     * Activates adding an offset to depth values of polygon's fragments\n     * @default false\n     */\n    get offsets(): boolean\n    {\n        return !!(this.data & (1 << OFFSET));\n    }\n\n    set offsets(value: boolean)\n    {\n        if (!!(this.data & (1 << OFFSET)) !== value)\n        {\n            this.data ^= (1 << OFFSET);\n        }\n    }\n\n    /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n    set cullMode(value: CULL_MODES)\n    {\n        if (value === 'none')\n        {\n            this.culling = false;\n\n            return;\n        }\n\n        this.culling = true;\n        this.clockwiseFrontFace = value === 'front';\n    }\n\n    get cullMode(): CULL_MODES\n    {\n        if (!this.culling)\n        {\n            return 'none';\n        }\n\n        return this.clockwiseFrontFace ? 'front' : 'back';\n    }\n\n    /**\n     * Activates culling of polygons.\n     * @default false\n     */\n    get culling(): boolean\n    {\n        return !!(this.data & (1 << CULLING));\n    }\n\n    set culling(value: boolean)\n    {\n        if (!!(this.data & (1 << CULLING)) !== value)\n        {\n            this.data ^= (1 << CULLING);\n        }\n    }\n\n    /**\n     * Activates depth comparisons and updates to the depth buffer.\n     * @default false\n     */\n    get depthTest(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_TEST));\n    }\n\n    set depthTest(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_TEST)) !== value)\n        {\n            this.data ^= (1 << DEPTH_TEST);\n        }\n    }\n\n    /**\n     * Enables or disables writing to the depth buffer.\n     * @default true\n     */\n    get depthMask(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_MASK));\n    }\n\n    set depthMask(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_MASK)) !== value)\n        {\n            this.data ^= (1 << DEPTH_MASK);\n        }\n    }\n\n    /**\n     * Specifies whether or not front or back-facing polygons can be culled.\n     * @default false\n     */\n    get clockwiseFrontFace(): boolean\n    {\n        return !!(this.data & (1 << WINDING));\n    }\n\n    set clockwiseFrontFace(value: boolean)\n    {\n        if (!!(this.data & (1 << WINDING)) !== value)\n        {\n            this.data ^= (1 << WINDING);\n        }\n    }\n\n    /**\n     * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n     * @default 'normal'\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blend = (value !== 'none');\n        this._blendMode = value;\n        this._blendModeId = blendModeIds[value as keyof typeof blendModeIds] || 0;\n    }\n\n    /**\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n     * @default 0\n     */\n    get polygonOffset(): number\n    {\n        return this._polygonOffset;\n    }\n\n    set polygonOffset(value: number)\n    {\n        this.offsets = !!value;\n        this._polygonOffset = value;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/core:State `\n            + `blendMode=${this.blendMode} `\n            + `clockwiseFrontFace=${this.clockwiseFrontFace} `\n            + `culling=${this.culling} `\n            + `depthMask=${this.depthMask} `\n            + `polygonOffset=${this.polygonOffset}`\n            + `]`;\n    }\n    // #endif\n\n    /**\n     * A quickly getting an instance of a State that is configured for 2d rendering.\n     * @returns a new State with values set for 2d rendering\n     */\n    public static for2d(): State\n    {\n        const state = new State();\n\n        state.depthTest = false;\n        state.blend = true;\n\n        return state;\n    }\n\n    public static default2d = State.for2d();\n}\n\n","import { ExtensionType } from '../extensions/Extensions';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\nimport type { Renderer } from '../rendering/renderers/types';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\n/**\n * Application options for the {@link ResizePlugin}.\n * These options control how your application handles window and element resizing.\n * @example\n * ```ts\n * // Auto-resize to window\n * await app.init({ resizeTo: window });\n *\n * // Auto-resize to container element\n * await app.init({ resizeTo: document.querySelector('#game') });\n * ```\n * @category app\n * @standard\n */\nexport interface ResizePluginOptions\n{\n    /**\n     * Element to automatically resize the renderer to.\n     * @example\n     * ```ts\n     * const app = new Application();\n     * await app.init({\n     *     resizeTo: window, // Resize to the entire window\n     *     // or\n     *     resizeTo: document.querySelector('#game-container'), // Resize to a specific element\n     *     // or\n     *     resizeTo: null, // Disable auto-resize\n     * });\n     * ```\n     * @default null\n     */\n    resizeTo?: Window | HTMLElement;\n}\n\n/**\n * Middleware for Application's resize functionality. This plugin handles automatic\n * and manual resizing of your PixiJS application.\n *\n * Adds the following features to {@link Application}:\n * - `resizeTo`: Set an element to automatically resize to\n * - `resize`: Manually trigger a resize\n * - `queueResize`: Queue a resize for the next animation frame\n * - `cancelResize`: Cancel a queued resize\n * @example\n * ```ts\n * import { Application, ResizePlugin } from 'pixi.js';\n *\n * // Create application\n * const app = new Application();\n *\n * // Example 1: Auto-resize to window\n * await app.init({ resizeTo: window });\n *\n * // Example 2: Auto-resize to specific element\n * const container = document.querySelector('#game-container');\n * await app.init({ resizeTo: container });\n *\n * // Example 3: Change resize target at runtime\n * app.resizeTo = window;                    // Enable auto-resize to window\n * app.resizeTo = null;                      // Disable auto-resize\n * ```\n * @category app\n * @standard\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n    /** @internal */\n    public static resizeTo: Window | HTMLElement;\n    /** @internal */\n    public static resize: () => void;\n    /** @internal */\n    public static renderer: ResizeableRenderer;\n    /** @internal */\n    public static queueResize: () => void;\n    /** @internal */\n    public static render: () => void;\n    /** @internal */\n    private static _resizeId: number;\n    /** @internal */\n    private static _resizeTo: Window | HTMLElement;\n    /** @internal */\n    private static _cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options: ResizePluginOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this._cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        this._cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this._cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @private\n     */\n    public static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this._cancelResize();\n        this._cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n","import { ExtensionType } from '../extensions/Extensions';\nimport { UPDATE_PRIORITY } from '../ticker/const';\nimport { Ticker } from '../ticker/Ticker';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\n\n/**\n * Application options for the {@link TickerPlugin}.\n * These options control the animation loop and update cycle of your PixiJS application.\n * @example\n * ```ts\n * import { Application } from 'pixi.js';\n *\n * // Basic setup with default options\n * const app = new Application();\n * await app.init({\n *     autoStart: true,     // Start animation loop automatically\n *     sharedTicker: false  // Use dedicated ticker instance\n * });\n *\n * // Advanced setup with shared ticker\n * const app2 = new Application();\n * await app2.init({\n *     autoStart: false,    // Don't start automatically\n *     sharedTicker: true   // Use global shared ticker\n * });\n *\n * // Start animation when ready\n * app2.start();\n * ```\n * @remarks\n * The ticker is the heart of your application's animation system. It:\n * - Manages the render loop\n * - Provides accurate timing information\n * - Handles frame-based updates\n * - Supports priority-based execution order\n * @see {@link Ticker} For detailed ticker functionality\n * @see {@link UPDATE_PRIORITY} For update priority constants\n * @category app\n * @standard\n */\nexport interface TickerPluginOptions\n{\n    /**\n     * Controls whether the animation loop starts automatically after initialization.\n     * > [!IMPORTANT]\n     * > Setting this to `false` does NOT stop the shared ticker even if `sharedTicker` is `true`.\n     * > You must stop the shared ticker manually if needed.\n     * @example\n     * ```ts\n     * // Auto-start (default behavior)\n     * await app.init({ autoStart: true });\n     *\n     * // Manual start\n     * await app.init({ autoStart: false });\n     * app.start(); // Start when ready\n     * ```\n     * @default true\n     */\n    autoStart?: boolean;\n\n    /**\n     * Controls whether to use the shared global ticker or create a new instance.\n     *\n     * The shared ticker is useful when you have multiple instances that should sync their updates.\n     * However, it has some limitations regarding update order control.\n     *\n     * Update Order:\n     * 1. System ticker (always runs first)\n     * 2. Shared ticker (if enabled)\n     * 3. App ticker (if using own ticker)\n     * @example\n     * ```ts\n     * // Use shared ticker (global instance)\n     * await app.init({ sharedTicker: true });\n     *\n     * // Use dedicated ticker (default)\n     * await app.init({ sharedTicker: false });\n     *\n     * // Access ticker properties\n     * console.log(app.ticker.FPS);    // Current FPS\n     * console.log(app.ticker.deltaMS); // MS since last update\n     * ```\n     * @default false\n     */\n    sharedTicker?: boolean;\n}\n\n/**\n * Middleware for Application's {@link Ticker} functionality. This plugin manages the\n * animation loop and update cycle of your PixiJS application.\n *\n * Adds the following features to {@link Application}:\n * - `ticker`: Access to the application's ticker\n * - `start`: Start the animation loop\n * - `stop`: Stop the animation loop\n * @example\n * ```ts\n * import { Application, TickerPlugin, extensions } from 'pixi.js';\n *\n * // Create application\n * const app = new Application();\n *\n * // Example 1: Basic ticker usage (default autoStart)\n * await app.init({ autoStart: true });      // Starts ticker automatically\n *\n * // Example 2: Manual ticker control\n * await app.init({ autoStart: false });     // Don't start automatically\n * app.start();                              // Start manually\n * app.stop();                               // Stop manually\n *\n * // Example 3: Add custom update logic\n * app.ticker.add((ticker) => {\n *     // Run every frame, delta is the time since last update\n *     sprite.rotation += 0.1 * ticker.deltaTime;\n * });\n *\n * // Example 4: Control update priority\n * import { UPDATE_PRIORITY } from 'pixi.js';\n *\n * app.ticker.add(\n *     (ticker) => {\n *         // Run before normal priority updates\n *     },\n *     null,\n *     UPDATE_PRIORITY.HIGH\n * );\n *\n * // Example 5: One-time update\n * app.ticker.addOnce(() => {\n *     console.log('Runs next frame only');\n * });\n * ```\n * @see {@link Ticker} For detailed ticker functionality\n * @see {@link UPDATE_PRIORITY} For priority constants\n * @category app\n * @standard\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    /** @internal */\n    public static start: () => void;\n    /** @internal */\n    public static stop: () => void;\n    /** @internal */\n    private static _ticker: Ticker;\n    /** @internal */\n    public static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options?: PixiMixins.ApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        this._ticker = null;\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @private\n     */\n    public static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n","import { extensions } from '../extensions/Extensions';\nimport { ResizePlugin } from './ResizePlugin';\nimport { TickerPlugin } from './TickerPlugin';\n\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n","import type { Matrix } from '../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableQuadElement } from '../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { Container } from '../container/Container';\n\n/**\n * A batchable sprite object.\n * @internal\n */\nexport class BatchableSprite implements DefaultBatchableQuadElement\n{\n    public batcherName = 'default';\n    public topology: Topology = 'triangle-list';\n\n    // batch specific..\n    public readonly attributeSize = 4;\n    public readonly indexSize = 6;\n    public readonly packAsQuad = true;\n\n    public transform: Matrix;\n\n    public renderable: Container;\n    public texture: Texture;\n    public bounds: BoundsData;\n\n    public roundPixels: 0 | 1 = 0;\n\n    public _indexStart: number;\n    public _textureId: number;\n    public _attributeStart = 0; // location in the buffer\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n    get color() { return this.renderable.groupColorAlpha; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.bounds = null;\n    }\n\n    public destroy()\n    {\n        // BOOM!\n    }\n}\n","import { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\nimport { ViewContainer, type ViewContainerOptions } from '../../view/ViewContainer';\nimport { GraphicsContext } from './GraphicsContext';\nimport { type GraphicsGpuData } from './GraphicsPipe';\n\nimport type { ColorSource } from '../../../color/Color';\nimport type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { PointData } from '../../../maths/point/PointData';\nimport type { Instruction } from '../../../rendering/renderers/shared/instructions/Instruction';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Bounds } from '../../container/bounds/Bounds';\nimport type { ContextDestroyOptions, DestroyOptions } from '../../container/destroyTypes';\nimport type { FillInput, FillStyle, StrokeStyle } from './FillTypes';\nimport type { GraphicsPath } from './path/GraphicsPath';\nimport type { RoundedPoint } from './path/roundShape';\n\n/**\n * Constructor options used for Graphics instances.\n * Configures the initial state and behavior of a Graphics object.\n * @example\n * ```ts\n * const graphics = new Graphics({\n *     roundPixels: true,\n *     position: { x: 100.5, y: 100.5 }\n * });\n *\n * // Reuse graphics context\n * const sharedContext = new GraphicsContext();\n * const graphics1 = new Graphics({ context: sharedContext });\n * const graphics2 = new Graphics({ context: sharedContext });\n * ```\n * @see {@link Graphics} For the graphics class implementation\n * @see {@link GraphicsContext} For the graphics context API\n * @category scene\n * @standard\n */\nexport interface GraphicsOptions extends PixiMixins.GraphicsOptions, ViewContainerOptions\n{\n    /**\n     * The GraphicsContext to use, useful for reuse and optimisation\n     * If not provided, a new GraphicsContext will be created.\n     * @example\n     * ```ts\n     * const sharedContext = new GraphicsContext();\n     * const graphics1 = new Graphics({ context: sharedContext });\n     * const graphics2 = new Graphics({ context: sharedContext });\n     * ```\n     */\n    context?: GraphicsContext;\n    /**\n     * Whether or not to round the x/y position.\n     * @default false\n     * @example\n     * ```ts\n     * const graphics = new Graphics({ roundPixels: true });\n     * ```\n     */\n    roundPixels?: boolean;\n}\n// eslint-disable-next-line requireExport/require-export-jsdoc, requireMemberAPI/require-member-api-doc\nexport interface Graphics extends PixiMixins.Graphics, ViewContainer<GraphicsGpuData> {}\n\n/**\n * The Graphics class is primarily used to render primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them. It can also be used to create complex\n * masks and hit areas for interaction.\n * @example\n * ```ts\n * // Create a new graphics object\n * const graphics = new Graphics();\n *\n * // Draw a filled rectangle with a stroke\n * graphics\n *     .rect(0, 0, 100, 100)\n *     .fill({ color: 0xff0000 }) // Fill with red\n *     .stroke({ width: 2, color: 0x000000 }); // Stroke with black\n *\n * // Draw a complex shape\n * graphics\n *     .moveTo(50, 50)\n *     .lineTo(100, 100)\n *     .arc(100, 100, 50, 0, Math.PI)\n *     .closePath()\n *     .fill({ color: 0x00ff00, alpha: 0.5 }); // Fill the shape\n *\n * // Use as a mask\n * sprite.mask = graphics;\n * ```\n * @see {@link GraphicsContext} For the underlying drawing API\n * @see {@link GraphicsPath} For path creation\n * @category scene\n * @standard\n */\nexport class Graphics extends ViewContainer<GraphicsGpuData> implements Instruction\n{\n    /** @internal */\n    public override readonly renderPipeId: string = 'graphics';\n    /** @internal */\n    public batched: boolean;\n\n    private _context: GraphicsContext;\n    private readonly _ownedContext: GraphicsContext;\n\n    /**\n     * Creates a new Graphics object.\n     * @param options - Options for the Graphics.\n     */\n    constructor(options?: GraphicsOptions | GraphicsContext)\n    {\n        if (options instanceof GraphicsContext)\n        {\n            options = { context: options };\n        }\n\n        const { context, roundPixels, ...rest } = options || {};\n\n        super({\n            label: 'Graphics',\n            ...rest\n        });\n\n        if (!context)\n        {\n            this._context = this._ownedContext = new GraphicsContext();\n        }\n        else\n        {\n            this._context = context;\n        }\n\n        this._context.on('update', this.onViewUpdate, this);\n\n        this.didViewUpdate = true;\n\n        this.allowChildren = false;\n        this.roundPixels = roundPixels ?? false;\n    }\n\n    set context(context: GraphicsContext)\n    {\n        if (context === this._context) return;\n\n        this._context.off('update', this.onViewUpdate, this);\n\n        this._context = context;\n\n        // TODO store this bound function somewhere else..\n        this._context.on('update', this.onViewUpdate, this);\n\n        this.onViewUpdate();\n    }\n\n    /**\n     * The underlying graphics context used for drawing operations.\n     * Controls how shapes and paths are rendered.\n     * @example\n     * ```ts\n     * // Create a shared context\n     * const sharedContext = new GraphicsContext();\n     *\n     * // Create graphics objects sharing the same context\n     * const graphics1 = new Graphics();\n     * const graphics2 = new Graphics();\n     *\n     * // Assign shared context\n     * graphics1.context = sharedContext;\n     * graphics2.context = sharedContext;\n     *\n     * // Both graphics will show the same shapes\n     * sharedContext\n     *     .rect(0, 0, 100, 100)\n     *     .fill({ color: 0xff0000 });\n     * ```\n     * @see {@link GraphicsContext} For drawing operations\n     * @see {@link GraphicsOptions} For context configuration\n     */\n    get context(): GraphicsContext\n    {\n        return this._context;\n    }\n\n    /**\n     * The local bounds of the graphics object.\n     * Returns the boundaries after all graphical operations but before any transforms.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Draw a shape\n     * graphics\n     *     .rect(0, 0, 100, 100)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Get bounds information\n     * const bounds = graphics.bounds;\n     * console.log(bounds.width);  // 100\n     * console.log(bounds.height); // 100\n     * ```\n     * @readonly\n     * @see {@link Bounds} For bounds operations\n     * @see {@link Container#getBounds} For transformed bounds\n     */\n    override get bounds(): Bounds\n    {\n        return this._context.bounds;\n    }\n\n    /**\n     * Graphics objects do not need to update their bounds as the context handles this.\n     * @private\n     */\n    protected updateBounds(): void { /** */ }\n\n    /**\n     * Checks if the object contains the given point.\n     * Returns true if the point lies within the Graphics object's rendered area.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Draw a shape\n     * graphics\n     *     .rect(0, 0, 100, 100)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Check point intersection\n     * if (graphics.containsPoint({ x: 50, y: 50 })) {\n     *     console.log('Point is inside rectangle!');\n     * }\n     * ```\n     * @param point - The point to check in local coordinates\n     * @returns True if the point is inside the Graphics object\n     * @see {@link Graphics#bounds} For bounding box checks\n     * @see {@link PointData} For point data structure\n     */\n    public override containsPoint(point: PointData)\n    {\n        return this._context.containsPoint(point);\n    }\n\n    /**\n     * Destroys this graphics renderable and optionally its context.\n     * @param options - Options parameter. A boolean will act as if all options\n     *\n     * If the context was created by this graphics and `destroy(false)` or `destroy()` is called\n     * then the context will still be destroyed.\n     *\n     * If you want to explicitly not destroy this context that this graphics created,\n     * then you should pass destroy({ context: false })\n     *\n     * If the context was passed in as an argument to the constructor then it will not be destroyed\n     * @example\n     * ```ts\n     * // Destroy the graphics and its context\n     * graphics.destroy();\n     * graphics.destroy(true);\n     * graphics.destroy({ context: true, texture: true, textureSource: true });\n     * ```\n     */\n    public override destroy(options?: DestroyOptions): void\n    {\n        if (this._ownedContext && !options)\n        {\n            this._ownedContext.destroy(options);\n        }\n        else if (options === true || (options as ContextDestroyOptions)?.context === true)\n        {\n            this._context.destroy(options);\n        }\n\n        (this._ownedContext as null) = null;\n        this._context = null;\n\n        super.destroy(options);\n    }\n\n    private _callContextMethod(method: keyof GraphicsContext, args: any[]): this\n    {\n        (this.context as any)[method](...args);\n\n        return this;\n    }\n\n    // --------------------------------------- GraphicsContext methods ---------------------------------------\n    /**\n     * Sets the current fill style of the graphics context.\n     * The fill style can be a color, gradient, pattern, or a complex style object.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Basic color fill\n     * graphics\n     *     .setFillStyle({ color: 0xff0000 }) // Red fill\n     *     .rect(0, 0, 100, 100)\n     *     .fill();\n     *\n     * // Gradient fill\n     * const gradient = new FillGradient({\n     *    end: { x: 1, y: 0 },\n     *    colorStops: [\n     *         { offset: 0, color: 0xff0000 }, // Red at start\n     *         { offset: 0.5, color: 0x00ff00 }, // Green at middle\n     *         { offset: 1, color: 0x0000ff }, // Blue at end\n     *    ],\n     * });\n     *\n     * graphics\n     *     .setFillStyle(gradient)\n     *     .circle(100, 100, 50)\n     *     .fill();\n     *\n     * // Pattern fill\n     * const pattern = new FillPattern(texture);\n     * graphics\n     *     .setFillStyle({\n     *         fill: pattern,\n     *         alpha: 0.5\n     *     })\n     *     .rect(0, 0, 200, 200)\n     *     .fill();\n     * ```\n     * @param {FillInput} args - The fill style to apply\n     * @returns The Graphics instance for chaining\n     * @see {@link FillStyle} For fill style options\n     * @see {@link FillGradient} For gradient fills\n     * @see {@link FillPattern} For pattern fills\n     */\n    public setFillStyle(...args: Parameters<GraphicsContext['setFillStyle']>): this\n    {\n        return this._callContextMethod('setFillStyle', args);\n    }\n\n    /**\n     * Sets the current stroke style of the graphics context.\n     * Similar to fill styles, stroke styles can encompass colors, gradients, patterns, or more detailed configurations.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Basic color stroke\n     * graphics\n     *     .setStrokeStyle({\n     *         width: 2,\n     *         color: 0x000000\n     *     })\n     *     .rect(0, 0, 100, 100)\n     *     .stroke();\n     *\n     * // Complex stroke style\n     * graphics\n     *     .setStrokeStyle({\n     *         width: 4,\n     *         color: 0xff0000,\n     *         alpha: 0.5,\n     *         join: 'round',\n     *         cap: 'round',\n     *         alignment: 0.5\n     *     })\n     *     .circle(100, 100, 50)\n     *     .stroke();\n     *\n     * // Gradient stroke\n     * const gradient = new FillGradient({\n     *    end: { x: 1, y: 0 },\n     *    colorStops: [\n     *         { offset: 0, color: 0xff0000 }, // Red at start\n     *         { offset: 0.5, color: 0x00ff00 }, // Green at middle\n     *         { offset: 1, color: 0x0000ff }, // Blue at end\n     *    ],\n     * });\n     *\n     * graphics\n     *     .setStrokeStyle({\n     *         width: 10,\n     *         fill: gradient\n     *     })\n     *     .poly([0,0, 100,50, 0,100])\n     *     .stroke();\n     * ```\n     * @param {StrokeInput} args - The stroke style to apply\n     * @returns The Graphics instance for chaining\n     * @see {@link StrokeStyle} For stroke style options\n     * @see {@link FillGradient} For gradient strokes\n     * @see {@link FillPattern} For pattern strokes\n     */\n    public setStrokeStyle(...args: Parameters<GraphicsContext['setStrokeStyle']>): this\n    {\n        return this._callContextMethod('setStrokeStyle', args);\n    }\n\n    /**\n     * Fills the current or given path with the current fill style or specified style.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Fill with direct color\n     * graphics\n     *     .circle(50, 50, 25)\n     *     .fill('red'); // Red fill\n     *\n     * // Fill with texture\n     * graphics\n     *    .rect(0, 0, 100, 100)\n     *    .fill(myTexture); // Fill with texture\n     *\n     * // Fill with complex style\n     * graphics\n     *     .rect(0, 0, 100, 100)\n     *     .fill({\n     *         color: 0x00ff00,\n     *         alpha: 0.5,\n     *         texture: myTexture,\n     *         matrix: new Matrix()\n     *     });\n     *\n     * // Fill with gradient\n     * const gradient = new FillGradient({\n     *     end: { x: 1, y: 0 },\n     *     colorStops: [\n     *         { offset: 0, color: 0xff0000 },\n     *         { offset: 0.5, color: 0x00ff00 },\n     *         { offset: 1, color: 0x0000ff },\n     *     ],\n     * });\n     *\n     * graphics\n     *     .circle(100, 100, 50)\n     *     .fill(gradient);\n     * ```\n     * @param {FillInput} style - The style to fill the path with. Can be:\n     * - A ColorSource\n     * - A gradient\n     * - A pattern\n     * - A complex style object\n     * If omitted, uses current fill style.\n     * @returns The Graphics instance for chaining\n     * @see {@link FillStyle} For fill style options\n     * @see {@link FillGradient} For gradient fills\n     * @see {@link FillPattern} For pattern fills\n     */\n    public fill(style?: FillInput): this;\n    /** @deprecated 8.0.0 */\n    public fill(color: ColorSource, alpha?: number): this;\n    public fill(...args: [FillStyle | ColorSource, number?]): this\n    {\n        return this._callContextMethod('fill', args);\n    }\n    /**\n     * Strokes the current path with the current stroke style or specified style.\n     * Outlines the shape using the stroke settings.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Stroke with direct color\n     * graphics\n     *     .circle(50, 50, 25)\n     *     .stroke({\n     *         width: 2,\n     *         color: 0xff0000\n     *     }); // 2px red stroke\n     *\n     * // Fill with texture\n     * graphics\n     *    .rect(0, 0, 100, 100)\n     *    .stroke(myTexture); // Fill with texture\n     *\n     * // Stroke with gradient\n     * const gradient = new FillGradient({\n     *     end: { x: 1, y: 0 },\n     *     colorStops: [\n     *         { offset: 0, color: 0xff0000 },\n     *         { offset: 0.5, color: 0x00ff00 },\n     *         { offset: 1, color: 0x0000ff },\n     *     ],\n     * });\n     *\n     * graphics\n     *     .rect(0, 0, 100, 100)\n     *     .stroke({\n     *         width: 4,\n     *         fill: gradient,\n     *         alignment: 0.5,\n     *         join: 'round'\n     *     });\n     * ```\n     * @param {StrokeStyle} args - Optional stroke style to apply. Can be:\n     * - A stroke style object with width, color, etc.\n     * - A gradient\n     * - A pattern\n     * If omitted, uses current stroke style.\n     * @returns The Graphics instance for chaining\n     * @see {@link StrokeStyle} For stroke style options\n     * @see {@link FillGradient} For gradient strokes\n     * @see {@link setStrokeStyle} For setting default stroke style\n     */\n    public stroke(...args: Parameters<GraphicsContext['stroke']>): this\n    {\n        return this._callContextMethod('stroke', args);\n    }\n    /**\n     * Adds a texture to the graphics context. This method supports multiple ways to draw textures\n     * including basic textures, tinted textures, and textures with custom dimensions.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Basic texture drawing\n     * graphics.texture(myTexture);\n     *\n     * // Tinted texture with position\n     * graphics.texture(myTexture, 0xff0000); // Red tint\n     *\n     * // Texture with custom position and dimensions\n     * graphics\n     *     .texture(\n     *         myTexture,    // texture\n     *         0xffffff,     // white tint\n     *         100, 100,     // position\n     *         200, 150      // dimensions\n     *     );\n     * ```\n     * Basic texture drawing:\n     * @param texture - The Texture object to use.\n     * @returns The instance of the current Graphics for chaining.\n     *\n     * Extended texture drawing:\n     * @param texture - The Texture object to use.\n     *        tint - A ColorSource to tint the texture (defaults to white).\n     *        dx - The x-coordinate for the texture placement.\n     *        dy - The y-coordinate for the texture placement.\n     *        dw - The width to draw the texture (defaults to texture width).\n     *        dh - The height to draw the texture (defaults to texture height).\n     * @returns The instance of the current Graphics for chaining.\n     * @see {@link Texture} For texture creation\n     * @see {@link FillPattern} For pattern fills\n     */\n    public texture(texture: Texture): this;\n    public texture(texture: Texture, tint?: ColorSource, dx?: number, dy?: number, dw?: number, dh?: number): this;\n    public texture(...args: [Texture, number?, number?, number?, number?, number?]): this\n    {\n        return this._callContextMethod('texture', args);\n    }\n    /**\n     * Resets the current path. Any previous path and its commands are discarded and a new path is\n     * started. This is typically called before beginning a new shape or series of drawing commands.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     * graphics\n     *     .circle(150, 150, 50)\n     *     .fill({ color: 0x00ff00 })\n     *     .beginPath() // Starts a new path\n     *     .circle(250, 150, 50)\n     *     .fill({ color: 0x0000ff });\n     * ```\n     * @returns The Graphics instance for chaining\n     * @see {@link Graphics#moveTo} For starting a new subpath\n     * @see {@link Graphics#closePath} For closing the current path\n     */\n    public beginPath(): this\n    {\n        return this._callContextMethod('beginPath', []);\n    }\n    /**\n     * Applies a cutout to the last drawn shape. This is used to create holes or complex shapes by\n     * subtracting a path from the previously drawn path.\n     *\n     * If a hole is not completely in a shape, it will fail to cut correctly.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Draw outer circle\n     * graphics\n     *     .circle(100, 100, 50)\n     *     .fill({ color: 0xff0000 });\n     *     .circle(100, 100, 25) // Inner circle\n     *     .cut() // Cuts out the inner circle from the outer circle\n     * ```\n     */\n    public cut(): this\n    {\n        return this._callContextMethod('cut', []);\n    }\n    /**\n     * Adds an arc to the current path, which is centered at (x, y) with the specified radius,\n     * starting and ending angles, and direction.\n     * @example\n     * ```ts\n     * // Draw a simple arc (quarter circle)\n     * const graphics = new Graphics();\n     * graphics\n     *     .arc(100, 100, 50, 0, Math.PI/2)\n     *     .stroke({ width: 2, color: 0xff0000 });\n     *\n     * // Draw a full circle using an arc\n     * graphics\n     *     .arc(200, 200, 30, 0, Math.PI * 2)\n     *     .stroke({ color: 0x00ff00 });\n     *\n     * // Draw a counterclockwise arc\n     * graphics\n     *     .arc(150, 150, 40, Math.PI, 0, true)\n     *     .stroke({ width: 2, color: 0x0000ff });\n     * ```\n     * @param x - The x-coordinate of the arc's center\n     * @param y - The y-coordinate of the arc's center\n     * @param radius - The arc's radius (must be positive)\n     * @param startAngle - The starting point of the arc, in radians\n     * @param endAngle - The end point of the arc, in radians\n     * @param counterclockwise - Optional. If true, draws the arc counterclockwise.\n     *                          If false (default), draws clockwise.\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#circle} For drawing complete circles\n     * @see {@link Graphics#arcTo} For drawing arcs between points\n     * @see {@link Graphics#arcToSvg} For SVG-style arc drawing\n     */\n    public arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): this;\n    public arc(...args: Parameters<GraphicsContext['arc']>): this\n    {\n        return this._callContextMethod('arc', args);\n    }\n    /**\n     * Adds an arc to the current path that connects two points using a radius.\n     * The arc is drawn between the current point and the specified end point,\n     * using the given control point to determine the curve of the arc.\n     * @example\n     * ```ts\n     * // Draw a simple curved corner\n     * const graphics = new Graphics();\n     * graphics\n     *     .moveTo(50, 50)\n     *     .arcTo(100, 50, 100, 100, 20) // Rounded corner with 20px radius\n     *     .stroke({ width: 2, color: 0xff0000 });\n     *\n     * // Create a rounded rectangle using arcTo\n     * graphics\n     *     .moveTo(150, 150)\n     *     .arcTo(250, 150, 250, 250, 30) // Top right corner\n     *     .arcTo(250, 250, 150, 250, 30) // Bottom right corner\n     *     .arcTo(150, 250, 150, 150, 30) // Bottom left corner\n     *     .arcTo(150, 150, 250, 150, 30) // Top left corner\n     *     .fill({ color: 0x00ff00 });\n     * ```\n     * @param x1 - The x-coordinate of the control point\n     * @param y1 - The y-coordinate of the control point\n     * @param x2 - The x-coordinate of the end point\n     * @param y2 - The y-coordinate of the end point\n     * @param radius - The radius of the arc in pixels (must be positive)\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#arc} For drawing arcs using center point and angles\n     * @see {@link Graphics#arcToSvg} For SVG-style arc drawing\n     * @see {@link Graphics#roundRect} For drawing rectangles with rounded corners\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this;\n    public arcTo(...args: Parameters<GraphicsContext['arcTo']>): this\n    {\n        return this._callContextMethod('arcTo', args);\n    }\n    /**\n     * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n     * This is particularly useful when converting SVG paths to Graphics or creating complex curved shapes.\n     * @example\n     * ```ts\n     * // Draw a simple elliptical arc\n     * const graphics = new Graphics();\n     * graphics\n     *     .moveTo(100, 100)\n     *     .arcToSvg(50, 30, 0, 0, 1, 200, 100)\n     *     .stroke({ width: 2, color: 0xff0000 });\n     *\n     * // Create a complex path with rotated elliptical arc\n     * graphics\n     *     .moveTo(150, 150)\n     *     .arcToSvg(\n     *         60,    // rx\n     *         30,    // ry\n     *         45,    // x-axis rotation (45 degrees)\n     *         1,     // large arc flag\n     *         0,     // sweep flag\n     *         250,   // end x\n     *         200    // end y\n     *     )\n     *     .stroke({ width: 4, color: 0x00ff00 });\n     *\n     * // Chain multiple arcs for complex shapes\n     * graphics\n     *     .moveTo(300, 100)\n     *     .arcToSvg(40, 20, 0, 0, 1, 350, 150)\n     *     .arcToSvg(40, 20, 0, 0, 1, 300, 200)\n     *     .fill({ color: 0x0000ff, alpha: 0.5 });\n     * ```\n     * @param rx - The x-radius of the ellipse (must be non-negative)\n     * @param ry - The y-radius of the ellipse (must be non-negative)\n     * @param xAxisRotation - The rotation of the ellipse's x-axis relative to the x-axis, in degrees\n     * @param largeArcFlag - Either 0 or 1, determines if the larger of the two possible arcs is chosen (1) or not (0)\n     * @param sweepFlag - Either 0 or 1, determines if the arc should be swept in\n     *                    a positive angle direction (1) or negative (0)\n     * @param x - The x-coordinate of the arc's end point\n     * @param y - The y-coordinate of the arc's end point\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#arc} For simple circular arcs\n     * @see {@link Graphics#arcTo} For connecting points with circular arcs\n     * @see {@link Graphics#svg} For parsing complete SVG paths\n     */\n    public arcToSvg(\n        rx: number, ry: number, xAxisRotation: number, largeArcFlag: number, sweepFlag: number, x: number, y: number\n    ): this;\n    public arcToSvg(...args: Parameters<GraphicsContext['arcToSvg']>): this\n    {\n        return this._callContextMethod('arcToSvg', args);\n    }\n    /**\n     * Adds a cubic Bézier curve to the path, from the current point to the specified end point.\n     * The curve is influenced by two control points that define its shape and curvature.\n     * @example\n     * ```ts\n     * // Draw a simple curved line\n     * const graphics = new Graphics();\n     * graphics\n     *     .moveTo(50, 50)\n     *     .bezierCurveTo(\n     *         100, 25,   // First control point\n     *         150, 75,   // Second control point\n     *         200, 50    // End point\n     *     )\n     *     .stroke({ width: 2, color: 0xff0000 });\n     *\n     * // Adjust curve smoothness\n     * graphics\n     *     .moveTo(50, 200)\n     *     .bezierCurveTo(\n     *         100, 150,\n     *         200, 250,\n     *         250, 200,\n     *         0.5         // Smoothness factor\n     *     )\n     *     .stroke({ width: 4, color: 0x0000ff });\n     * ```\n     * @param cp1x - The x-coordinate of the first control point\n     * @param cp1y - The y-coordinate of the first control point\n     * @param cp2x - The x-coordinate of the second control point\n     * @param cp2y - The y-coordinate of the second control point\n     * @param x - The x-coordinate of the end point\n     * @param y - The y-coordinate of the end point\n     * @param smoothness - Optional parameter to adjust the curve's smoothness (0-1)\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#quadraticCurveTo} For simpler curves with one control point\n     * @see {@link Graphics#arc} For circular arcs\n     * @see {@link Graphics#arcTo} For connecting points with circular arcs\n     */\n    public bezierCurveTo(\n        cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number, smoothness?: number\n    ): this;\n    public bezierCurveTo(...args: Parameters<GraphicsContext['bezierCurveTo']>): this\n    {\n        return this._callContextMethod('bezierCurveTo', args);\n    }\n    /**\n     * Closes the current path by drawing a straight line back to the start point.\n     *\n     * This is useful for completing shapes and ensuring they are properly closed for fills.\n     * @example\n     * ```ts\n     * // Create a triangle with closed path\n     * const graphics = new Graphics();\n     * graphics\n     *     .moveTo(50, 50)\n     *     .lineTo(100, 100)\n     *     .lineTo(0, 100)\n     *     .closePath()\n     * ```\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#beginPath} For starting a new path\n     * @see {@link Graphics#fill} For filling closed paths\n     * @see {@link Graphics#stroke} For stroking paths\n     */\n    public closePath(): this\n    {\n        return this._callContextMethod('closePath', []);\n    }\n    /**\n     * Draws an ellipse at the specified location and with the given x and y radii.\n     * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Draw a basic ellipse\n     * graphics\n     *     .ellipse(100, 100, 50, 30)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Draw an ellipse with stroke\n     * graphics\n     *     .ellipse(200, 100, 70, 40)\n     *     .stroke({ width: 2, color: 0x00ff00 });\n     * ```\n     * @param x - The x-coordinate of the center of the ellipse\n     * @param y - The y-coordinate of the center of the ellipse\n     * @param radiusX - The horizontal radius of the ellipse\n     * @param radiusY - The vertical radius of the ellipse\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#circle} For drawing perfect circles\n     * @see {@link Graphics#arc} For drawing partial circular arcs\n     */\n    public ellipse(x: number, y: number, radiusX: number, radiusY: number): this;\n    public ellipse(...args: Parameters<GraphicsContext['ellipse']>): this\n    {\n        return this._callContextMethod('ellipse', args);\n    }\n    /**\n     * Draws a circle shape at the specified location with the given radius.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Draw a simple filled circle\n     * graphics\n     *     .circle(100, 100, 50)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Draw a circle with gradient fill\n     * const gradient = new FillGradient({\n     *     end: { x: 1, y: 0 },\n     *     colorStops: [\n     *           { offset: 0, color: 0xff0000 }, // Red at start\n     *           { offset: 0.5, color: 0x00ff00 }, // Green at middle\n     *           { offset: 1, color: 0x0000ff }, // Blue at end\n     *     ],\n     * });\n     *\n     * graphics\n     *     .circle(250, 100, 40)\n     *     .fill({ fill: gradient });\n     * ```\n     * @param x - The x-coordinate of the center of the circle\n     * @param y - The y-coordinate of the center of the circle\n     * @param radius - The radius of the circle\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#ellipse} For drawing ellipses\n     * @see {@link Graphics#arc} For drawing partial circles\n     */\n    public circle(x: number, y: number, radius: number): this;\n    public circle(...args: Parameters<GraphicsContext['circle']>): this\n    {\n        return this._callContextMethod('circle', args);\n    }\n    /**\n     * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n     * This allows for reuse of complex paths and shapes across different graphics instances.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     * // Create a reusable path\n     * const heartPath = new GraphicsPath()\n     *     .moveTo(0, 0)\n     *     .bezierCurveTo(-50, -25, -50, -75, 0, -100)\n     *     .bezierCurveTo(50, -75, 50, -25, 0, 0);\n     *\n     * // Use the path multiple times\n     * graphics\n     *     .path(heartPath)\n     *     .fill({ color: 0xff0000 })\n     *     .translateTransform(200, 200)\n     *     .path(heartPath)\n     *     .fill({ color: 0xff0000, alpha: 0.5 });\n     * ```\n     * @param path - The `GraphicsPath` to add to the current path\n     * @returns The Graphics instance for method chaining\n     * @see {@link GraphicsPath} For creating reusable paths\n     * @see {@link Matrix} For creating transformations\n     * @see {@link Graphics#transform} For applying transformations\n     */\n    public path(path: GraphicsPath): this;\n    public path(...args: Parameters<GraphicsContext['path']>): this\n    {\n        return this._callContextMethod('path', args);\n    }\n    /**\n     * Connects the current point to a new point with a straight line.\n     * Any subsequent drawing commands will start from this new point.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Draw a triangle\n     * graphics\n     *     .moveTo(50, 50)\n     *     .lineTo(100, 100)\n     *     .lineTo(0, 100)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Create a complex shape with multiple lines\n     * graphics\n     *     .moveTo(200, 50)\n     *     .lineTo(250, 50)\n     *     .lineTo(250, 100)\n     *     .lineTo(200, 100)\n     *     .stroke({ width: 2, color: 0x00ff00 });\n     * ```\n     * @param x - The x-coordinate of the line's end point\n     * @param y - The y-coordinate of the line's end point\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#moveTo} For starting a new sub-path\n     */\n    public lineTo(x: number, y: number): this;\n    public lineTo(...args: Parameters<GraphicsContext['lineTo']>): this\n    {\n        return this._callContextMethod('lineTo', args);\n    }\n    /**\n     * Sets the starting point for a new sub-path.\n     *\n     * Moves the \"pen\" to a new location without drawing a line.\n     * Any subsequent drawing commands will start from this point.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Create multiple separate lines\n     * graphics\n     *     .moveTo(50, 50)\n     *     .lineTo(100, 50)\n     *     .moveTo(50, 100)    // Start a new line\n     *     .lineTo(100, 100)\n     *     .stroke({ width: 2, color: 0xff0000 });\n     *\n     * // Create disconnected shapes\n     * graphics\n     *     .moveTo(150, 50)\n     *     .rect(150, 50, 50, 50)\n     *     .fill({ color: 0x00ff00 })\n     *     .moveTo(250, 50)    // Start a new shape\n     *     .circle(250, 75, 25)\n     *     .fill({ color: 0x0000ff });\n     *\n     * // Position before curved paths\n     * graphics\n     *     .moveTo(300, 50)\n     *     .bezierCurveTo(\n     *         350, 25,   // Control point 1\n     *         400, 75,   // Control point 2\n     *         450, 50    // End point\n     *     )\n     *     .stroke({ width: 3, color: 0xff00ff });\n     * ```\n     * @param x - The x-coordinate to move to\n     * @param y - The y-coordinate to move to\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#lineTo} For drawing lines\n     * @see {@link Graphics#beginPath} For starting a completely new path\n     */\n    public moveTo(x: number, y: number): this;\n    public moveTo(...args: Parameters<GraphicsContext['moveTo']>): this\n    {\n        return this._callContextMethod('moveTo', args);\n    }\n    /**\n     * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n     * The starting point is the last point in the current path.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Draw a simple curve\n     * graphics\n     *     .moveTo(50, 50)\n     *     .quadraticCurveTo(100, 25, 150, 50)\n     *     .stroke({ width: 2, color: 0xff0000 });\n     *\n     * // Adjust curve smoothness\n     * graphics\n     *     .moveTo(50, 200)\n     *     .quadraticCurveTo(\n     *         150, 150,   // Control point\n     *         250, 200,   // End point\n     *         0.5         // Smoothness factor\n     *     )\n     *     .stroke({\n     *         width: 4,\n     *         color: 0x0000ff,\n     *         alpha: 0.7\n     *     });\n     * ```\n     * @param cpx - The x-coordinate of the control point\n     * @param cpy - The y-coordinate of the control point\n     * @param x - The x-coordinate of the end point\n     * @param y - The y-coordinate of the end point\n     * @param smoothness - Optional parameter to adjust the curve's smoothness (0-1)\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#bezierCurveTo} For curves with two control points\n     * @see {@link Graphics#arc} For circular arcs\n     * @see {@link Graphics#arcTo} For connecting points with circular arcs\n     */\n    public quadraticCurveTo(cpx: number, cpy: number, x: number, y: number, smoothness?: number): this;\n    public quadraticCurveTo(...args: Parameters<GraphicsContext['quadraticCurveTo']>): this\n    {\n        return this._callContextMethod('quadraticCurveTo', args);\n    }\n    /**\n     * Draws a rectangle shape.\n     *\n     * This method adds a new rectangle path to the current drawing.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Draw a simple filled rectangle\n     * graphics\n     *     .rect(50, 50, 100, 75)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Rectangle with stroke\n     * graphics\n     *     .rect(200, 50, 100, 75)\n     *     .stroke({ width: 2, color: 0x00ff00 });\n     * ```\n     * @param x - The x-coordinate of the top-left corner of the rectangle\n     * @param y - The y-coordinate of the top-left corner of the rectangle\n     * @param w - The width of the rectangle\n     * @param h - The height of the rectangle\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#roundRect} For drawing rectangles with rounded corners\n     * @see {@link Graphics#filletRect} For drawing rectangles with filleted corners\n     * @see {@link Graphics#chamferRect} For drawing rectangles with chamfered corners\n     */\n\n    public rect(x: number, y: number, w: number, h: number): this;\n    public rect(...args: Parameters<GraphicsContext['rect']>): this\n    {\n        return this._callContextMethod('rect', args);\n    }\n    /**\n     * Draws a rectangle with rounded corners. The corner radius can be specified to\n     * determine how rounded the corners should be.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Basic rounded rectangle\n     * graphics\n     *     .roundRect(50, 50, 100, 75, 15)\n     *     .fill({ color: 0xff0000 });\n     * ```\n     * @param x - The x-coordinate of the top-left corner of the rectangle\n     * @param y - The y-coordinate of the top-left corner of the rectangle\n     * @param w - The width of the rectangle\n     * @param h - The height of the rectangle\n     * @param radius - The radius of the rectangle's corners (must be non-negative)\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#rect} For drawing rectangles with sharp corners\n     * @see {@link Graphics#filletRect} For drawing rectangles with filleted corners\n     * @see {@link Graphics#chamferRect} For drawing rectangles with chamfered corners\n     */\n    public roundRect(x: number, y: number, w: number, h: number, radius?: number): this;\n    public roundRect(...args: Parameters<GraphicsContext['roundRect']>): this\n    {\n        return this._callContextMethod('roundRect', args);\n    }\n    /**\n     * Draws a polygon shape by specifying a sequence of points. This method allows for the creation of complex polygons,\n     * which can be both open and closed.\n     *\n     * An optional transformation can be applied, enabling the polygon to be scaled,\n     * rotated, or translated as needed.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Draw a triangle using array of numbers [x1,y1, x2,y2, x3,y3]\n     * graphics\n     *     .poly([50,50, 100,100, 0,100], true)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Draw a polygon using point objects\n     * graphics\n     *     .poly([\n     *         { x: 200, y: 50 },\n     *         { x: 250, y: 100 },\n     *         { x: 200, y: 150 },\n     *         { x: 150, y: 100 }\n     *     ])\n     *     .fill({ color: 0x00ff00 });\n     *\n     * // Draw an open polygon with stroke\n     * graphics\n     *     .poly([300,50, 350,50, 350,100, 300,100], false)\n     *     .stroke({\n     *         width: 2,\n     *         color: 0x0000ff,\n     *         join: 'round'\n     *     });\n     * ```\n     * @param points - An array of numbers [x1,y1, x2,y2, ...] or an array of point objects [{x,y}, ...]\n     *                representing the vertices of the polygon in sequence\n     * @param close - Whether to close the polygon path by connecting the last point to the first.\n     *               Default is true.\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#regularPoly} For drawing regular polygons\n     * @see {@link Graphics#roundPoly} For drawing polygons with rounded corners\n     * @see {@link Graphics#star} For drawing star shapes\n     */\n    public poly(points: number[] | PointData[], close?: boolean): this;\n    public poly(...args: Parameters<GraphicsContext['poly']>): this\n    {\n        return this._callContextMethod('poly', args);\n    }\n    /**\n     * Draws a regular polygon with a specified number of sides. All sides and angles are equal,\n     * making shapes like triangles, squares, pentagons, etc.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Draw a simple triangle (3 sides)\n     * graphics\n     *     .regularPoly(100, 100, 50, 3)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Draw a hexagon (6 sides) with rotation\n     * graphics\n     *     .regularPoly(\n     *         250, 100,    // center position\n     *         40,          // radius\n     *         6,           // sides\n     *         Math.PI / 6  // rotation (30 degrees)\n     *     )\n     *     .fill({ color: 0x00ff00 })\n     *     .stroke({ width: 2, color: 0x000000 });\n     *\n     * // Draw an octagon (8 sides) with transform\n     * const transform = new Matrix()\n     *     .scale(1.5, 1)      // stretch horizontally\n     *     .rotate(Math.PI/4); // rotate 45 degrees\n     *\n     * graphics\n     *     .regularPoly(400, 100, 30, 8, 0, transform)\n     *     .fill({ color: 0x0000ff, alpha: 0.5 });\n     * ```\n     * @param x - The x-coordinate of the center of the polygon\n     * @param y - The y-coordinate of the center of the polygon\n     * @param radius - The radius of the circumscribed circle of the polygon\n     * @param sides - The number of sides of the polygon (must be 3 or more)\n     * @param rotation - The rotation angle of the polygon in radians (default: 0)\n     * @param transform - Optional Matrix to transform the polygon's shape\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#poly} For drawing custom polygons\n     * @see {@link Graphics#roundPoly} For drawing polygons with rounded corners\n     * @see {@link Graphics#star} For drawing star shapes\n     */\n    public regularPoly(x: number, y: number, radius: number, sides: number, rotation?: number, transform?: Matrix): this;\n    public regularPoly(...args: Parameters<GraphicsContext['regularPoly']>): this\n    {\n        return this._callContextMethod('regularPoly', args);\n    }\n    /**\n     * Draws a polygon with rounded corners.\n     *\n     * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Draw a basic rounded triangle\n     * graphics\n     *     .roundPoly(100, 100, 50, 3, 10)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Draw a rounded hexagon with rotation\n     * graphics\n     *     .roundPoly(\n     *         250, 150,     // center position\n     *         40,           // radius\n     *         6,            // sides\n     *         8,            // corner radius\n     *         Math.PI / 6   // rotation (30 degrees)\n     *     )\n     *     .fill({ color: 0x00ff00 })\n     *     .stroke({ width: 2, color: 0x000000 });\n     * ```\n     * @param x - The x-coordinate of the center of the polygon\n     * @param y - The y-coordinate of the center of the polygon\n     * @param radius - The radius of the circumscribed circle of the polygon\n     * @param sides - The number of sides of the polygon (must be 3 or more)\n     * @param corner - The radius of the corner rounding (must be non-negative)\n     * @param rotation - The rotation angle of the polygon in radians (default: 0)\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#regularPoly} For drawing polygons without rounded corners\n     * @see {@link Graphics#poly} For drawing custom polygons\n     * @see {@link Graphics#roundRect} For drawing rectangles with rounded corners\n     */\n    public roundPoly(x: number, y: number, radius: number, sides: number, corner: number, rotation?: number): this;\n    public roundPoly(...args: Parameters<GraphicsContext['roundPoly']>): this\n    {\n        return this._callContextMethod('roundPoly', args);\n    }\n    /**\n     * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n     * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Draw a custom shape with rounded corners\n     * graphics\n     *     .roundShape([\n     *         { x: 100, y: 100, radius: 20 },\n     *         { x: 200, y: 100, radius: 10 },\n     *         { x: 200, y: 200, radius: 15 },\n     *         { x: 100, y: 200, radius: 5 }\n     *     ], 10)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Using quadratic curves for corners\n     * graphics\n     *     .roundShape([\n     *         { x: 250, y: 100 },\n     *         { x: 350, y: 100 },\n     *         { x: 350, y: 200 },\n     *         { x: 250, y: 200 }\n     *     ], 15, true, 0.5)\n     *     .fill({ color: 0x00ff00 })\n     *     .stroke({ width: 2, color: 0x000000 });\n     *\n     * // Shape with varying corner radii\n     * graphics\n     *     .roundShape([\n     *         { x: 400, y: 100, radius: 30 },\n     *         { x: 500, y: 100, radius: 5 },\n     *         { x: 450, y: 200, radius: 15 }\n     *     ], 10)\n     *     .fill({ color: 0x0000ff, alpha: 0.5 });\n     * ```\n     * @param points - An array of `RoundedPoint` representing the corners of the shape.\n     *                Each point can have its own radius or use the default.\n     *                A minimum of 3 points is required.\n     * @param radius - The default radius for corners without a specific radius defined.\n     *                Applied to any point that doesn't specify its own radius.\n     * @param useQuadratic - When true, corners are drawn using quadratic curves instead\n     *                      of arcs, creating a different visual style. Defaults to false.\n     * @param smoothness - Controls the smoothness of quadratic corners when useQuadratic\n     *                    is true. Values range from 0-1, higher values create smoother curves.\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#roundRect} For drawing rectangles with rounded corners\n     * @see {@link Graphics#roundPoly} For drawing regular polygons with rounded corners\n     */\n    public roundShape(points: RoundedPoint[], radius: number, useQuadratic?: boolean, smoothness?: number): this;\n    public roundShape(...args: Parameters<GraphicsContext['roundShape']>): this\n    {\n        return this._callContextMethod('roundShape', args);\n    }\n    /**\n     * Draws a rectangle with fillet corners. Unlike rounded rectangles, this supports negative corner\n     * radii which create external rounded corners rather than internal ones.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Draw a rectangle with internal fillets\n     * graphics\n     *     .filletRect(50, 50, 100, 80, 15)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Draw a rectangle with external fillets\n     * graphics\n     *     .filletRect(200, 50, 100, 80, -20)\n     *     .fill({ color: 0x00ff00 })\n     *     .stroke({ width: 2, color: 0x000000 });\n     * ```\n     * @param x - The x-coordinate of the top-left corner of the rectangle\n     * @param y - The y-coordinate of the top-left corner of the rectangle\n     * @param width - The width of the rectangle\n     * @param height - The height of the rectangle\n     * @param fillet - The radius of the corner fillets (can be positive or negative)\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#roundRect} For standard rounded corners\n     * @see {@link Graphics#chamferRect} For angled corners\n     */\n    public filletRect(x: number, y: number, width: number, height: number, fillet: number): this;\n    public filletRect(...args: Parameters<GraphicsContext['filletRect']>): this\n    {\n        return this._callContextMethod('filletRect', args);\n    }\n    /**\n     * Draws a rectangle with chamfered (angled) corners. Each corner is cut off at\n     * a 45-degree angle based on the chamfer size.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Draw a basic chamfered rectangle\n     * graphics\n     *     .chamferRect(50, 50, 100, 80, 15)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Add transform and stroke\n     * const transform = new Matrix()\n     *     .rotate(Math.PI / 4); // 45 degrees\n     *\n     * graphics\n     *     .chamferRect(200, 50, 100, 80, 20, transform)\n     *     .fill({ color: 0x00ff00 })\n     *     .stroke({ width: 2, color: 0x000000 });\n     * ```\n     * @param x - The x-coordinate of the top-left corner of the rectangle\n     * @param y - The y-coordinate of the top-left corner of the rectangle\n     * @param width - The width of the rectangle\n     * @param height - The height of the rectangle\n     * @param chamfer - The size of the corner chamfers (must be non-zero)\n     * @param transform - Optional Matrix to transform the rectangle\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#roundRect} For rounded corners\n     * @see {@link Graphics#filletRect} For rounded corners with negative radius support\n     */\n    public chamferRect(x: number, y: number, width: number, height: number, chamfer: number, transform?: Matrix): this;\n    public chamferRect(...args: Parameters<GraphicsContext['chamferRect']>): this\n    {\n        return this._callContextMethod('chamferRect', args);\n    }\n    /**\n     * Draws a star shape centered at a specified location. This method allows for the creation\n     * of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n     *\n     * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n     * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Draw a basic 5-pointed star\n     * graphics\n     *     .star(100, 100, 5, 50)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Star with custom inner radius\n     * graphics\n     *     .star(250, 100, 6, 50, 20)\n     *     .fill({ color: 0x00ff00 })\n     *     .stroke({ width: 2, color: 0x000000 });\n     * ```\n     * @param x - The x-coordinate of the center of the star\n     * @param y - The y-coordinate of the center of the star\n     * @param points - The number of points on the star (must be >= 3)\n     * @param radius - The outer radius of the star (distance from center to point tips)\n     * @param innerRadius - Optional. The inner radius of the star (distance from center to inner vertices).\n     *                     If not specified, defaults to half of the outer radius\n     * @param rotation - Optional. The rotation of the star in radians. Default is 0,\n     *                  which aligns one point straight up\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#regularPoly} For drawing regular polygons\n     * @see {@link Graphics#poly} For drawing custom polygons\n     * @see {@link Graphics#path} For creating custom shapes\n     */\n    public star(x: number, y: number, points: number, radius: number, innerRadius?: number, rotation?: number): this;\n    public star(...args: Parameters<GraphicsContext['star']>): this\n    {\n        return this._callContextMethod('star', args);\n    }\n    /**\n     * Parses and renders an SVG string into the graphics context. This allows for complex shapes\n     * and paths defined in SVG format to be drawn within the graphics context.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     * graphics\n     *     .svg(`\n     *         <path d=\"M 50,50 L 100,50 L 100,100 L 50,100 Z\"\n     *               fill=\"blue\" />\n     *         <circle cx=\"150\" cy=\"75\" r=\"25\"\n     *               fill=\"green\" />\n     *     `)\n     *     .stroke({ width: 2, color: 0x000000 });\n     * ```\n     * @param svg - The SVG string to be parsed and rendered\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#path} For adding custom paths\n     * @see {@link Graphics#fill} For filling shapes after SVG parsing\n     * @see {@link Graphics#stroke} For stroking shapes after SVG parsing\n     */\n    public svg(svg: string): this;\n    public svg(...args: Parameters<GraphicsContext['svg']>): this\n    {\n        return this._callContextMethod('svg', args);\n    }\n    /**\n     * Restores the most recently saved graphics state by popping the top of the graphics state stack.\n     * This includes transformations, fill styles, and stroke styles.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Save current state\n     * graphics.save();\n     *\n     * // Make temporary changes\n     * graphics\n     *     .translateTransform(100, 100)\n     *     .setFillStyle({ color: 0xff0000 })\n     *     .circle(0, 0, 50)\n     *     .fill();\n     *\n     * // Restore to previous state\n     * graphics.restore();\n     *\n     * // Draw with original transform and styles\n     * graphics\n     *     .circle(50, 50, 30)\n     *     .fill();\n     * ```\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#save} For saving the current state\n     */\n    public restore(): this;\n    public restore(...args: Parameters<GraphicsContext['restore']>): this\n    {\n        return this._callContextMethod('restore', args);\n    }\n    /**\n     * Saves the current graphics state onto a stack. The state includes:\n     * - Current transformation matrix\n     * - Current fill style\n     * - Current stroke style\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Save state before complex operations\n     * graphics.save();\n     *\n     * // Create transformed and styled shape\n     * graphics\n     *     .translateTransform(100, 100)\n     *     .rotateTransform(Math.PI / 4)\n     *     .setFillStyle({\n     *         color: 0xff0000,\n     *         alpha: 0.5\n     *     })\n     *     .rect(-25, -25, 50, 50)\n     *     .fill();\n     *\n     * // Restore to original state\n     * graphics.restore();\n     *\n     * // Continue drawing with previous state\n     * graphics\n     *     .circle(50, 50, 25)\n     *     .fill();\n     * ```\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#restore} For restoring the saved state\n     * @see {@link Graphics#setTransform} For setting transformations\n     */\n    public save(): this\n    {\n        return this._callContextMethod('save', []);\n    }\n    /**\n     * Returns the current transformation matrix of the graphics context.\n     * This matrix represents all accumulated transformations including translate, scale, and rotate.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Apply some transformations\n     * graphics\n     *     .translateTransform(100, 100)\n     *     .rotateTransform(Math.PI / 4);\n     *\n     * // Get the current transform matrix\n     * const matrix = graphics.getTransform();\n     * console.log(matrix.tx, matrix.ty); // 100, 100\n     *\n     * // Use the matrix for other operations\n     * graphics\n     *     .setTransform(matrix)\n     *     .circle(0, 0, 50)\n     *     .fill({ color: 0xff0000 });\n     * ```\n     * @returns The current transformation matrix.\n     * @see {@link Graphics#setTransform} For setting the transform matrix\n     * @see {@link Matrix} For matrix operations\n     */\n    public getTransform(): Matrix\n    {\n        return this.context.getTransform();\n    }\n    /**\n     * Resets the current transformation matrix to the identity matrix, effectively removing\n     * any transformations (rotation, scaling, translation) previously applied.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Apply transformations\n     * graphics\n     *     .translateTransform(100, 100)\n     *     .scaleTransform(2, 2)\n     *     .circle(0, 0, 25)\n     *     .fill({ color: 0xff0000 });\n     * // Reset transform to default state\n     * graphics\n     *     .resetTransform()\n     *     .circle(50, 50, 25) // Will draw at actual coordinates\n     *     .fill({ color: 0x00ff00 });\n     * ```\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#getTransform} For getting the current transform\n     * @see {@link Graphics#setTransform} For setting a specific transform\n     * @see {@link Graphics#save} For saving the current transform state\n     * @see {@link Graphics#restore} For restoring a previous transform state\n     */\n    public resetTransform(): this\n    {\n        return this._callContextMethod('resetTransform', []);\n    }\n    /**\n     * Applies a rotation transformation to the graphics context around the current origin.\n     * Positive angles rotate clockwise, while negative angles rotate counterclockwise.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Rotate 45 degrees clockwise\n     * graphics\n     *     .rotateTransform(Math.PI / 4)\n     *     .rect(-25, -25, 50, 50)\n     *     .fill({ color: 0xff0000 });\n     * ```\n     * @param angle - The angle of rotation in radians\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#scaleTransform} For scaling transformations\n     * @see {@link Graphics#translateTransform} For position transformations\n     */\n    public rotateTransform(angle: number): this;\n    public rotateTransform(...args: Parameters<GraphicsContext['rotate']>): this\n    {\n        return this._callContextMethod('rotate', args);\n    }\n    /**\n     * Applies a scaling transformation to the graphics context, scaling drawings by x horizontally\n     * and by y vertically relative to the current origin.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Uniform scaling\n     * graphics\n     *     .scaleTransform(2)  // Scale both dimensions by 2\n     *     .circle(0, 0, 25)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Non-uniform scaling\n     * graphics\n     *     .scaleTransform(0.5, 2)  // Half width, double height\n     *     .rect(100, 100, 50, 50)\n     *     .fill({ color: 0x00ff00 });\n     * ```\n     * @param x - The scale factor in the horizontal direction\n     * @param y - The scale factor in the vertical direction. If omitted, equals x\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#rotateTransform} For rotation transformations\n     * @see {@link Graphics#translateTransform} For position transformations\n     */\n    public scaleTransform(x: number, y?: number): this;\n    public scaleTransform(...args: Parameters<GraphicsContext['scale']>): this\n    {\n        return this._callContextMethod('scale', args);\n    }\n    /**\n     * Sets the current transformation matrix of the graphics context.\n     *\n     * This method can either\n     * take a Matrix object or individual transform values to create a new transformation matrix.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Using a Matrix object\n     * const matrix = new Matrix()\n     *     .translate(100, 100)\n     *     .rotate(Math.PI / 4);\n     *\n     * graphics\n     *     .setTransform(matrix)\n     *     .rect(0, 0, 50, 50)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Using individual transform values\n     * graphics\n     *     .setTransform(\n     *         2, 0,     // scale x by 2\n     *         0, 1,     // no skew\n     *         100, 100  // translate x,y by 100\n     *     )\n     *     .circle(0, 0, 25)\n     *     .fill({ color: 0x00ff00 });\n     * ```\n     * @param transform - The matrix to set as the current transformation matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setTransform(transform: Matrix): this;\n    /**\n     * Sets the current transformation matrix of the graphics context to the specified matrix or values.\n     * This replaces the current transformation matrix.\n     * @param a - The value for the a property of the matrix, or a Matrix object to use directly.\n     * @param b - The value for the b property of the matrix.\n     * @param c - The value for the c property of the matrix.\n     * @param d - The value for the d property of the matrix.\n     * @param dx - The value for the tx (translate x) property of the matrix.\n     * @param dy - The value for the ty (translate y) property of the matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setTransform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    public setTransform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this;\n    public setTransform(...args: [Matrix] | [number, number, number, number, number, number]): this\n    {\n        return this._callContextMethod('setTransform', args);\n    }\n    /**\n     * Applies a transformation matrix to the current graphics context by multiplying\n     * the current matrix with the specified matrix. This allows for complex transformations\n     * combining multiple operations.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Using a Matrix object\n     * const matrix = new Matrix()\n     *     .scale(2, 1)      // Scale horizontally\n     *     .rotate(Math.PI/6); // Rotate 30 degrees\n     *\n     * graphics\n     *     .transform(matrix)\n     *     .rect(0, 0, 50, 50)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Using individual transform values\n     * graphics\n     *     .transform(\n     *         1, 0.5,    // Skew horizontally\n     *         0, 1,      // No vertical skew\n     *         100, 100   // Translate\n     *     )\n     *     .circle(0, 0, 25)\n     *     .fill({ color: 0x00ff00 });\n     * ```\n     * @param transform - The matrix to apply to the current transformation.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public transform(transform: Matrix): this;\n    /**\n     * Applies the specified transformation matrix to the current graphics context by multiplying\n     * the current matrix with the specified matrix.\n     * @param a - The value for the a property of the matrix, or a Matrix object to use directly.\n     * @param b - The value for the b property of the matrix.\n     * @param c - The value for the c property of the matrix.\n     * @param d - The value for the d property of the matrix.\n     * @param dx - The value for the tx (translate x) property of the matrix.\n     * @param dy - The value for the ty (translate y) property of the matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public transform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    public transform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this;\n    public transform(...args: [Matrix] | [number, number, number, number, number, number]): this\n    {\n        return this._callContextMethod('transform', args);\n    }\n    /**\n     * Applies a translation transformation to the graphics context, moving the origin by the specified amounts.\n     * This affects all subsequent drawing operations.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Basic translation\n     * graphics\n     *     .translateTransform(100, 100)\n     *     .circle(0, 0, 25)\n     *     .fill({ color: 0xff0000 });\n     * ```\n     * @param x - The amount to translate in the horizontal direction\n     * @param y - The amount to translate in the vertical direction. If omitted, equals x\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#setTransform} For setting absolute transformations\n     * @see {@link Graphics#transform} For applying complex transformations\n     * @see {@link Graphics#save} For saving the current transform state\n     */\n    public translateTransform(x: number, y?: number): this;\n    public translateTransform(...args: Parameters<GraphicsContext['translate']>): this\n    {\n        return this._callContextMethod('translate', args);\n    }\n    /**\n     * Clears all drawing commands from the graphics context, effectively resetting it.\n     * This includes clearing the current path, fill style, stroke style, and transformations.\n     *\n     * > [!NOTE] Graphics objects are not designed to be continuously cleared and redrawn.\n     * > Instead, they are intended to be used for static or semi-static graphics that\n     * > can be redrawn as needed. Frequent clearing and redrawing may lead to performance issues.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Draw some shapes\n     * graphics\n     *     .circle(100, 100, 50)\n     *     .fill({ color: 0xff0000 })\n     *     .rect(200, 100, 100, 50)\n     *     .fill({ color: 0x00ff00 });\n     *\n     * // Clear all graphics\n     * graphics.clear();\n     *\n     * // Start fresh with new shapes\n     * graphics\n     *     .circle(150, 150, 30)\n     *     .fill({ color: 0x0000ff });\n     * ```\n     * @returns The Graphics instance for method chaining\n     * @see {@link Graphics#beginPath} For starting a new path without clearing styles\n     * @see {@link Graphics#save} For saving the current state\n     * @see {@link Graphics#restore} For restoring a previous state\n     */\n    public clear(): this\n    {\n        return this._callContextMethod('clear', []);\n    }\n    /**\n     * Gets or sets the current fill style for the graphics context. The fill style determines\n     * how shapes are filled when using the fill() method.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Basic color fill\n     * graphics.fillStyle = {\n     *     color: 0xff0000,  // Red\n     *     alpha: 1\n     * };\n     *\n     * // Using gradients\n     * const gradient = new FillGradient({\n     *     end: { x: 0, y: 1 }, // Vertical gradient\n     *     stops: [\n     *         { offset: 0, color: 0xff0000, alpha: 1 }, // Start color\n     *         { offset: 1, color: 0x0000ff, alpha: 1 }  // End color\n     *     ]\n     * });\n     *\n     * graphics.fillStyle = {\n     *     fill: gradient,\n     *     alpha: 0.8\n     * };\n     *\n     * // Using patterns\n     * graphics.fillStyle = {\n     *     texture: myTexture,\n     *     alpha: 1,\n     *     matrix: new Matrix()\n     *         .scale(0.5, 0.5)\n     *         .rotate(Math.PI / 4)\n     * };\n     * ```\n     * @type {ConvertedFillStyle}\n     * @see {@link FillStyle} For all available fill style options\n     * @see {@link FillGradient} For creating gradient fills\n     * @see {@link Graphics#fill} For applying the fill to paths\n     */\n    get fillStyle(): GraphicsContext['fillStyle']\n    {\n        return this._context.fillStyle;\n    }\n    set fillStyle(value: FillInput)\n    {\n        this._context.fillStyle = value;\n    }\n    /**\n     * Gets or sets the current stroke style for the graphics context. The stroke style determines\n     * how paths are outlined when using the stroke() method.\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Basic stroke style\n     * graphics.strokeStyle = {\n     *     width: 2,\n     *     color: 0xff0000,\n     *     alpha: 1\n     * };\n     *\n     * // Using with gradients\n     * const gradient = new FillGradient({\n     *   end: { x: 0, y: 1 },\n     *   stops: [\n     *       { offset: 0, color: 0xff0000, alpha: 1 },\n     *       { offset: 1, color: 0x0000ff, alpha: 1 }\n     *   ]\n     * });\n     *\n     * graphics.strokeStyle = {\n     *     width: 4,\n     *     fill: gradient,\n     *     alignment: 0.5,\n     *     join: 'round',\n     *     cap: 'round'\n     * };\n     *\n     * // Complex stroke settings\n     * graphics.strokeStyle = {\n     *     width: 6,\n     *     color: 0x00ff00,\n     *     alpha: 0.5,\n     *     join: 'miter',\n     *     miterLimit: 10,\n     * };\n     * ```\n     * @see {@link StrokeStyle} For all available stroke style options\n     * @see {@link Graphics#stroke} For applying the stroke to paths\n     */\n    get strokeStyle(): GraphicsContext['strokeStyle']\n    {\n        return this._context.strokeStyle;\n    }\n    set strokeStyle(value: StrokeStyle)\n    {\n        this._context.strokeStyle = value;\n    }\n\n    /**\n     * Creates a new Graphics object that copies the current graphics content.\n     * The clone can either share the same context (shallow clone) or have its own independent\n     * context (deep clone).\n     * @example\n     * ```ts\n     * const graphics = new Graphics();\n     *\n     * // Create original graphics content\n     * graphics\n     *     .circle(100, 100, 50)\n     *     .fill({ color: 0xff0000 });\n     *\n     * // Create a shallow clone (shared context)\n     * const shallowClone = graphics.clone();\n     *\n     * // Changes to original affect the clone\n     * graphics\n     *     .circle(200, 100, 30)\n     *     .fill({ color: 0x00ff00 });\n     *\n     * // Create a deep clone (independent context)\n     * const deepClone = graphics.clone(true);\n     *\n     * // Modify deep clone independently\n     * deepClone\n     *     .translateTransform(100, 100)\n     *     .circle(0, 0, 40)\n     *     .fill({ color: 0x0000ff });\n     * ```\n     * @param deep - Whether to create a deep clone of the graphics object.\n     *              If false (default), the context will be shared between objects.\n     *              If true, creates an independent copy of the context.\n     * @returns A new Graphics instance with either shared or copied context\n     * @see {@link Graphics#context} For accessing the underlying graphics context\n     * @see {@link GraphicsContext} For understanding the shared context behavior\n     */\n    public clone(deep = false): Graphics\n    {\n        if (deep)\n        {\n            return new Graphics(this._context.clone());\n        }\n\n        (this._ownedContext as null) = null;\n        const clone = new Graphics(this._context);\n\n        return clone;\n    }\n\n    // -------- v7 deprecations ---------\n\n    /**\n     * @param width\n     * @param color\n     * @param alpha\n     * @deprecated since 8.0.0 Use {@link Graphics#setStrokeStyle} instead\n     */\n    public lineStyle(width?: number, color?: ColorSource, alpha?: number): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#lineStyle is no longer needed. Use Graphics#setStrokeStyle to set the stroke style.');\n        // #endif\n\n        const strokeStyle: Partial<StrokeStyle> = {};\n\n        // avoid undefined assignment\n        width && (strokeStyle.width = width);\n        color && (strokeStyle.color = color);\n        alpha && (strokeStyle.alpha = alpha);\n\n        this.context.strokeStyle = strokeStyle;\n\n        return this;\n    }\n\n    /**\n     * @param color\n     * @param alpha\n     * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n     */\n    public beginFill(color: ColorSource, alpha?: number)\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'Graphics#beginFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.');\n        // #endif\n\n        const fillStyle: Partial<FillStyle> = {};\n\n        // avoid undefined assignment\n        if (color !== undefined) fillStyle.color = color;\n        if (alpha !== undefined) fillStyle.alpha = alpha;\n\n        this.context.fillStyle = fillStyle;\n\n        return this;\n    }\n\n    /**\n     * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n     */\n    public endFill()\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'Graphics#endFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.');\n        // #endif\n\n        this.context.fill();\n        const strokeStyle = this.context.strokeStyle;\n\n        if (strokeStyle.width !== GraphicsContext.defaultStrokeStyle.width\n            || strokeStyle.color !== GraphicsContext.defaultStrokeStyle.color\n            || strokeStyle.alpha !== GraphicsContext.defaultStrokeStyle.alpha)\n        {\n            this.context.stroke();\n        }\n\n        return this;\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#circle} instead\n     */\n    public drawCircle(...args: Parameters<GraphicsContext['circle']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawCircle has been renamed to Graphics#circle');\n        // #endif\n\n        return this._callContextMethod('circle', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#ellipse} instead\n     */\n    public drawEllipse(...args: Parameters<GraphicsContext['ellipse']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawEllipse has been renamed to Graphics#ellipse');\n        // #endif\n\n        return this._callContextMethod('ellipse', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#poly} instead\n     */\n    public drawPolygon(...args: Parameters<GraphicsContext['poly']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawPolygon has been renamed to Graphics#poly');\n        // #endif\n\n        return this._callContextMethod('poly', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#rect} instead\n     */\n    public drawRect(...args: Parameters<GraphicsContext['rect']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawRect has been renamed to Graphics#rect');\n        // #endif\n\n        return this._callContextMethod('rect', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#roundRect} instead\n     */\n    public drawRoundedRect(...args: Parameters<GraphicsContext['roundRect']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawRoundedRect has been renamed to Graphics#roundRect');\n        // #endif\n\n        return this._callContextMethod('roundRect', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#star} instead\n     */\n    public drawStar(...args: Parameters<GraphicsContext['star']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawStar has been renamed to Graphics#star');\n        // #endif\n\n        return this._callContextMethod('star', args);\n    }\n}\n","// TODO eventually we should not use this bit, but instead use the localUniformBit\n// have the MSDF bit be merged in with the localUniformBit\n\n/** @internal */\nexport const localUniformMSDFBit = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `,\n        main: /* wgsl */`\n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n\n    }\n};\n\n/** @internal */\nexport const localUniformMSDFBitGl = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform float uDistance;\n         `,\n        main: /* glsl */`\n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n\n    }\n};\n","/** @internal */\nexport const mSDFBit = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* wgsl */`\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n\n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n\n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n\n            }\n        `,\n    }\n\n};\n\n/** @internal */\nexport const mSDFBitGl = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* glsl */`\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n\n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n\n                // SDF\n                median = min(median, msdfColor.a);\n\n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n            }\n        `,\n    }\n\n};\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport {\n    generateTextureBatchBit,\n    generateTextureBatchBitGl\n} from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\n/** @internal */\nexport class SdfShader extends Shader\n{\n    constructor(maxTextures: number)\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uDistance: { value: 4, type: 'f32' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(maxTextures),\n                localUniformMSDFBit,\n                mSDFBit,\n                roundPixelsBit\n            ]\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(maxTextures),\n                localUniformMSDFBitGl,\n                mSDFBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: getBatchSamplersUniformGroup(maxTextures),\n            }\n        });\n    }\n}\n","import { Cache } from '../../assets/cache/Cache';\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { Graphics } from '../graphics/shared/Graphics';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics';\nimport { SdfShader } from '../text/sdfShader/SdfShader';\nimport { BitmapFontManager } from './BitmapFontManager';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../rendering/renderers/shared/Renderable';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { BitmapText } from './BitmapText';\n\n/** @internal */\nexport class BitmapTextGraphics extends Graphics\n{\n    public destroy()\n    {\n        if (this.context.customShader)\n        {\n            this.context.customShader.destroy();\n        }\n\n        super.destroy();\n    }\n}\n\n/** @internal */\nexport class BitmapTextPipe implements RenderPipe<BitmapText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'bitmapText',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuBitmapText');\n    }\n\n    public validateRenderable(bitmapText: BitmapText): boolean\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n\n        // TODO - need to shift all the verts in the graphicsData to the new anchor\n\n        // update the anchor...\n    }\n\n    public addRenderable(bitmapText: BitmapText, instructionSet: InstructionSet)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    public updateRenderable(bitmapText: BitmapText)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    private _updateContext(bitmapText: BitmapText, proxyGraphics: Graphics)\n    {\n        const { context } = proxyGraphics;\n\n        const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n\n        context.clear();\n\n        if (bitmapFont.distanceField.type !== 'none')\n        {\n            if (!context.customShader)\n            {\n                // TODO: Check if this is a WebGL renderer before asserting type\n                context.customShader = new SdfShader(this._renderer.limits.maxBatchableTextures);\n            }\n        }\n\n        const chars = CanvasTextMetrics.graphemeSegmenter(bitmapText.text);\n        const style = bitmapText._style;\n\n        let currentY = bitmapFont.baseLineOffset;\n\n        // measure our text...\n        const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n\n        const padding = style.padding;\n        const scale = bitmapTextLayout.scale;\n\n        let tx = bitmapTextLayout.width;\n        let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n\n        if (style._stroke)\n        {\n            tx += style._stroke.width / scale;\n            ty += style._stroke.width / scale;\n        }\n\n        context\n            .translate((-bitmapText._anchor._x * tx) - padding, (-bitmapText._anchor._y * ty) - padding)\n            .scale(scale, scale);\n\n        const tint = bitmapFont.applyFillAsTint ? style._fill.color : 0xFFFFFF;\n\n        for (let i = 0; i < bitmapTextLayout.lines.length; i++)\n        {\n            const line = bitmapTextLayout.lines[i];\n\n            for (let j = 0; j < line.charPositions.length; j++)\n            {\n                const char = line.chars[j];\n\n                const charData = bitmapFont.chars[char];\n\n                if (charData?.texture)\n                {\n                    context.texture(\n                        charData.texture,\n                        tint ? tint : 'black',\n                        Math.round(line.charPositions[j] + charData.xOffset),\n                        Math.round(currentY + charData.yOffset),\n                    );\n                }\n            }\n\n            currentY += bitmapFont.lineHeight;\n        }\n    }\n\n    private _getGpuBitmapText(bitmapText: BitmapText)\n    {\n        return bitmapText._gpuData[this._renderer.uid] || this.initGpuText(bitmapText);\n    }\n\n    public initGpuText(bitmapText: BitmapText)\n    {\n        // TODO we could keep a bunch of contexts around and reuse one that has the same style!\n        const proxyRenderable = new BitmapTextGraphics();\n\n        bitmapText._gpuData[this._renderer.uid] = proxyRenderable;\n\n        this._updateContext(bitmapText, proxyRenderable);\n\n        return proxyRenderable;\n    }\n\n    private _updateDistanceField(bitmapText: BitmapText)\n    {\n        const context = this._getGpuBitmapText(bitmapText).context;\n\n        const fontFamily = bitmapText._style.fontFamily as string;\n        const dynamicFont = Cache.get(`${fontFamily as string}-bitmap`);\n\n        // Inject the shader code with the correct value\n        const { a, b, c, d } = bitmapText.groupTransform;\n\n        const dx = Math.sqrt((a * a) + (b * b));\n        const dy = Math.sqrt((c * c) + (d * d));\n        const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n        const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n\n        const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n\n        context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n    }\n\n    public destroy()\n    {\n        this._renderer = null;\n    }\n}\n\nfunction syncWithProxy(container: Renderable, proxy: Renderable)\n{\n    proxy.groupTransform = container.groupTransform;\n    proxy.groupColorAlpha = container.groupColorAlpha;\n    proxy.groupColor = container.groupColor;\n    proxy.groupBlendMode = container.groupBlendMode;\n    proxy.globalDisplayStatus = container.globalDisplayStatus;\n    proxy.groupTransform = container.groupTransform;\n    proxy.localDisplayStatus = container.localDisplayStatus;\n    proxy.groupAlpha = container.groupAlpha;\n    proxy._roundPixels = container._roundPixels;\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { BitmapTextPipe } from './BitmapTextPipe';\n\nextensions.add(BitmapTextPipe);\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { type Renderer } from '../../../rendering/renderers/types';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../gpu/colorToUniform';\nimport { BatchableGraphics } from './BatchableGraphics';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Graphics } from './Graphics';\nimport type { GpuGraphicsContext } from './GraphicsContextSystem';\n\n/** @internal */\nexport interface GraphicsAdaptor\n{\n    shader: Shader;\n    contextChange(renderer: Renderer): void;\n    execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void;\n    destroy(): void;\n}\n\n/** @internal */\nexport class GraphicsGpuData\n{\n    public batches: BatchableGraphics[] = [];\n    public batched = false;\n    public destroy()\n    {\n        this.batches.forEach((batch) =>\n        {\n            BigPool.return(batch as PoolItem);\n        });\n\n        this.batches.length = 0;\n    }\n}\n\n/** @internal */\nexport class GraphicsPipe implements RenderPipe<Graphics>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public renderer: Renderer;\n    public state: State = State.for2d();\n\n    private _adaptor: GraphicsAdaptor;\n\n    constructor(renderer: Renderer, adaptor: GraphicsAdaptor)\n    {\n        this.renderer = renderer;\n\n        this._adaptor = adaptor;\n\n        this.renderer.runners.contextChange.add(this);\n    }\n\n    public contextChange(): void\n    {\n        this._adaptor.contextChange(this.renderer);\n    }\n\n    public validateRenderable(graphics: Graphics): boolean\n    {\n        // assume context is dirty..\n        const context = graphics.context;\n\n        const wasBatched = !!graphics._gpuData;\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n\n        if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable)\n        {\n            // TODO what if they are the same size??\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // need to get batches here.. as we need to know if we can batch or not..\n        // this also overrides the current batches..\n        if (graphics.didViewUpdate)\n        {\n            this._rebuild(graphics);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._addToBatcher(graphics, instructionSet);\n        }\n        else\n        {\n            this.renderer.renderPipes.batch.break(instructionSet);\n            instructionSet.add(graphics);\n        }\n    }\n\n    public updateRenderable(graphics: Graphics)\n    {\n        const gpuData = this._getGpuDataForRenderable(graphics);\n\n        const batches = gpuData.batches;\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batch._batcher.updateElement(batch);\n        }\n    }\n\n    public execute(graphics: Graphics)\n    {\n        if (!graphics.isRenderable) return;\n\n        const renderer = this.renderer;\n        const context = graphics.context;\n        const contextSystem = renderer.graphicsContext;\n\n        // early out if there is no actual visual stuff...\n        if (!contextSystem.getGpuContext(context).batches.length)\n        { return; }\n\n        const shader = context.customShader || this._adaptor.shader;\n\n        this.state.blendMode = graphics.groupBlendMode;\n\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = graphics.groupTransform;\n        localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n\n        color32BitToUniform(\n            graphics.groupColorAlpha,\n            localUniforms.uColor,\n            0,\n        );\n\n        this._adaptor.execute(this, graphics);\n    }\n\n    private _rebuild(graphics: Graphics)\n    {\n        const gpuData = this._getGpuDataForRenderable(graphics);\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // free up the batches..\n        gpuData.destroy();\n\n        if (gpuContext.isBatchable)\n        {\n            this._updateBatchesForRenderable(graphics, gpuData);\n        }\n    }\n\n    private _addToBatcher(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const batchPipe = this.renderer.renderPipes.batch;\n\n        const batches = this._getGpuDataForRenderable(graphics).batches;\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batchPipe.addToBatch(batch, instructionSet);\n        }\n    }\n\n    private _getGpuDataForRenderable(graphics: Graphics): GraphicsGpuData\n    {\n        return graphics._gpuData[this.renderer.uid] || this._initGpuDataForRenderable(graphics);\n    }\n\n    private _initGpuDataForRenderable(graphics: Graphics): GraphicsGpuData\n    {\n        const gpuData = new GraphicsGpuData();\n\n        graphics._gpuData[this.renderer.uid] = gpuData;\n\n        return gpuData;\n    }\n\n    private _updateBatchesForRenderable(graphics: Graphics, gpuData: GraphicsGpuData)\n    {\n        const context = graphics.context;\n\n        const gpuContext: GpuGraphicsContext = this.renderer.graphicsContext.getGpuContext(context);\n\n        const roundPixels = (this.renderer._roundPixels | graphics._roundPixels) as 0 | 1;\n\n        gpuData.batches = gpuContext.batches.map((batch) =>\n        {\n            const batchClone = BigPool.get(BatchableGraphics);\n\n            batch.copyTo(batchClone);\n\n            batchClone.renderable = graphics;\n\n            batchClone.roundPixels = roundPixels;\n\n            return batchClone;\n        });\n    }\n\n    public destroy()\n    {\n        this.renderer = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n        this.state = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem';\nimport { GraphicsPipe } from './shared/GraphicsPipe';\n\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n","import { type Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { BatchableSprite } from '../sprite/BatchableSprite';\n\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { HTMLText } from './HTMLText';\n\n/**\n * The BatchableHTMLText class extends the BatchableSprite class and is used to handle HTML text rendering.\n * It includes a promise for the texture as generating the HTML texture takes some time.\n * @internal\n */\nexport class BatchableHTMLText extends BatchableSprite\n{\n    private readonly _renderer: Renderer;\n    public texturePromise: Promise<Texture>;\n    public generatingTexture = false;\n\n    /**\n     * Creates an instance of BatchableHTMLText.\n     * @param renderer - The renderer instance to be used.\n     */\n    constructor(renderer: Renderer)\n    {\n        super();\n\n        // Next step is to make canvasTextSystem a GLOBAL object.\n        // so this is ok for now..\n        this._renderer = renderer;\n\n        renderer.runners.resolutionChange.add(this);\n    }\n\n    /** Handles resolution changes for the HTML text. If the text has auto resolution enabled, it triggers a view update. */\n    public resolutionChange()\n    {\n        const text = this.renderable as HTMLText;\n\n        if (text._autoResolution)\n        {\n            text.onViewUpdate();\n        }\n    }\n\n    /** Destroys the BatchableHTMLText instance. Returns the texture promise to the renderer and cleans up references. */\n    public destroy()\n    {\n        this._renderer.htmlText.returnTexturePromise(this.texturePromise);\n\n        this.texturePromise = null;\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { updateTextBounds } from '../text/utils/updateTextBounds';\nimport { BatchableHTMLText } from './BatchableHTMLText';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { HTMLText } from './HTMLText';\n\n/**\n * The HTMLTextPipe class is responsible for rendering HTML text.\n * @internal\n */\nexport class HTMLTextPipe implements RenderPipe<HTMLText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(htmlText: HTMLText): boolean\n    {\n        return htmlText._didTextUpdate;\n    }\n\n    public addRenderable(htmlText: HTMLText, instructionSet: InstructionSet)\n    {\n        const batchableHTMLText = this._getGpuText(htmlText);\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateGpuText(htmlText).catch((e) =>\n            {\n                console.error(e);\n            });\n\n            htmlText._didTextUpdate = false;\n\n            updateTextBounds(batchableHTMLText, htmlText);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableHTMLText, instructionSet);\n    }\n\n    public updateRenderable(htmlText: HTMLText)\n    {\n        const batchableHTMLText = this._getGpuText(htmlText);\n\n        batchableHTMLText._batcher.updateElement(batchableHTMLText);\n    }\n\n    private async _updateGpuText(htmlText: HTMLText)\n    {\n        htmlText._didTextUpdate = false;\n\n        const batchableHTMLText = this._getGpuText(htmlText);\n\n        if (batchableHTMLText.generatingTexture) return;\n\n        if (batchableHTMLText.texturePromise)\n        {\n            this._renderer.htmlText.returnTexturePromise(batchableHTMLText.texturePromise);\n            batchableHTMLText.texturePromise = null;\n        }\n\n        batchableHTMLText.generatingTexture = true;\n\n        htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n\n        const texturePromise = this._renderer.htmlText.getTexturePromise(htmlText);\n\n        batchableHTMLText.texturePromise = texturePromise;\n\n        batchableHTMLText.texture = await texturePromise;\n\n        // need a rerender...\n        const renderGroup = htmlText.renderGroup || htmlText.parentRenderGroup;\n\n        if (renderGroup)\n        {\n            // need a rebuild of the render group\n            renderGroup.structureDidChange = true;\n        }\n\n        batchableHTMLText.generatingTexture = false;\n\n        updateTextBounds(batchableHTMLText, htmlText);\n    }\n\n    private _getGpuText(htmlText: HTMLText)\n    {\n        return htmlText._gpuData[this._renderer.uid] || this.initGpuText(htmlText);\n    }\n\n    public initGpuText(htmlText: HTMLText)\n    {\n        const batchableHTMLText = new BatchableHTMLText(this._renderer);\n\n        batchableHTMLText.renderable = htmlText;\n        batchableHTMLText.transform = htmlText.groupTransform;\n        batchableHTMLText.texture = Texture.EMPTY;\n        batchableHTMLText.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        batchableHTMLText.roundPixels = (this._renderer._roundPixels | htmlText._roundPixels) as 0 | 1;\n\n        htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n        htmlText._gpuData[this._renderer.uid] = batchableHTMLText;\n\n        return batchableHTMLText;\n    }\n\n    public destroy()\n    {\n        this._renderer = null;\n    }\n}\n\n","import type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\n\n/** @internal */\nconst nssvg = 'http://www.w3.org/2000/svg';\n/** @internal */\nconst nsxhtml = 'http://www.w3.org/1999/xhtml';\n\n/** @internal */\nexport class HTMLTextRenderData\n{\n    public svgRoot = document.createElementNS(nssvg, 'svg');\n    public foreignObject = document.createElementNS(nssvg, 'foreignObject');\n    public domElement = document.createElementNS(nsxhtml, 'div');\n    public styleElement = document.createElementNS(nsxhtml, 'style');\n    public image = new Image();\n    public canvasAndContext?: CanvasAndContext;\n\n    constructor()\n    {\n        const { foreignObject, svgRoot, styleElement, domElement } = this;\n        // Arbitrary max size\n\n        foreignObject.setAttribute('width', '10000');\n        foreignObject.setAttribute('height', '10000');\n        foreignObject.style.overflow = 'hidden';\n\n        svgRoot.appendChild(foreignObject);\n\n        foreignObject.appendChild(styleElement);\n        foreignObject.appendChild(domElement);\n    }\n}\n","import { Color } from '../../../color/Color';\n\nimport type { ConvertedStrokeStyle } from '../../graphics/shared/FillTypes';\nimport type { TextStyle } from '../../text/TextStyle';\nimport type { HTMLTextStyle, HTMLTextStyleOptions } from '../HTMLTextStyle';\n\n/**\n * Internally converts all of the style properties into CSS equivalents.\n * @param style\n * @returns The CSS style string, for setting `style` property of root HTMLElement.\n * @internal\n */\nexport function textStyleToCSS(style: HTMLTextStyle): string\n{\n    const stroke = style._stroke;\n    const fill = style._fill;\n\n    const cssStyleString = [\n        `color: ${Color.shared.setValue(fill.color).toHex()}`,\n        `font-size: ${(style.fontSize as number)}px`,\n        `font-family: ${style.fontFamily}`,\n        `font-weight: ${style.fontWeight}`,\n        `font-style: ${style.fontStyle}`,\n        `font-variant: ${style.fontVariant}`,\n        `letter-spacing: ${style.letterSpacing}px`,\n        `text-align: ${style.align}`,\n        `padding: ${style.padding}px`,\n        `white-space: ${(style.whiteSpace === 'pre' && style.wordWrap) ? 'pre-wrap' : style.whiteSpace}`,\n        ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n        ...style.wordWrap ? [\n            `word-wrap: ${style.breakWords ? 'break-all' : 'break-word'}`,\n            `max-width: ${style.wordWrapWidth}px`\n        ] : [],\n        ...stroke ? [strokeToCSS(stroke)] : [],\n        ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n        ...style.cssOverrides,\n    ].join(';');\n\n    const cssStyles = [`div { ${cssStyleString} }`];\n\n    tagStyleToCSS(style.tagStyles, cssStyles);\n\n    return cssStyles.join(' ');\n}\n\nfunction dropShadowToCSS(dropShadowStyle: TextStyle['dropShadow']): string\n{\n    const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n    const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n    const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n\n    const position = `${x}px ${y}px`;\n\n    if (dropShadowStyle.blur > 0)\n    {\n        return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n    }\n\n    return `text-shadow: ${position} ${color}`;\n}\n\nfunction strokeToCSS(stroke: ConvertedStrokeStyle): string\n{\n    return [\n        `-webkit-text-stroke-width: ${stroke.width}px`,\n        `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        `text-stroke-width: ${stroke.width}px`,\n        `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        'paint-order: stroke',\n    ].join(';');\n}\n\n/** Converts the tag styles into CSS. */\nconst templates = {\n    fontSize: `font-size: {{VALUE}}px`,\n    fontFamily: `font-family: {{VALUE}}`,\n    fontWeight: `font-weight: {{VALUE}}`,\n    fontStyle: `font-style: {{VALUE}}`,\n    fontVariant: `font-variant: {{VALUE}}`,\n    letterSpacing: `letter-spacing: {{VALUE}}px`,\n    align: `text-align: {{VALUE}}`,\n    padding: `padding: {{VALUE}}px`,\n    whiteSpace: `white-space: {{VALUE}}`,\n    lineHeight: `line-height: {{VALUE}}px`,\n    wordWrapWidth: `max-width: {{VALUE}}px`,\n};\n\n/** Converts the tag styles into CSS if modifications are required */\nconst transform = {\n    fill: (value: string) => `color: ${Color.shared.setValue(value).toHex()}`,\n    breakWords: (value: string) => `word-wrap: ${value ? 'break-all' : 'break-word'}`,\n    stroke: strokeToCSS,\n    dropShadow: dropShadowToCSS\n};\n\nfunction tagStyleToCSS(tagStyles: Record<string, HTMLTextStyleOptions>, out: string[])\n{\n    for (const i in tagStyles)\n    {\n        const tagStyle = tagStyles[i];\n        const cssTagStyle = [];\n\n        for (const j in tagStyle)\n        {\n            if (transform[j as keyof typeof transform])\n            {\n                cssTagStyle.push(transform[j as keyof typeof transform](tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n            else if (templates[j as keyof typeof templates])\n            {\n                // eslint-disable-next-line max-len\n                cssTagStyle.push(templates[j as keyof typeof templates].replace('{{VALUE}}', tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n        }\n\n        out.push(`${i} { ${cssTagStyle.join(';')} }`);\n    }\n}\n","/* eslint-disable accessor-pairs */\nimport { warn } from '../../utils/logging/warn';\nimport { TextStyle } from '../text/TextStyle';\nimport { textStyleToCSS } from './utils/textStyleToCSS';\n\nimport type { FillInput, StrokeInput } from '../graphics/shared/FillTypes';\nimport type { TextStyleOptions } from '../text/TextStyle';\n\n/**\n * Options for HTML text style, extends standard text styling with HTML-specific capabilities.\n * Omits certain base text properties that don't apply to HTML rendering.\n * @example\n * ```ts\n * // Basic HTML text style\n * const text = new HTMLText({\n *     text: '<p>Hello World</p>',\n *     style: {\n *         fontSize: 24,\n *         fill: '#ff0000',\n *         fontFamily: 'Arial',\n *         align: 'center'\n *     }\n * });\n *\n * // Custom tag styling\n * const taggedText = new HTMLText({\n *     text: '<custom>Custom Tag</custom>',\n *     style: {\n *         fontSize: 16,\n *         tagStyles: {\n *             custom: {\n *                 fontSize: 32,\n *                 fill: '#00ff00',\n *                 fontStyle: 'italic'\n *             }\n *         }\n *     }\n * });\n * ```\n * @category text\n * @standard\n */\nexport interface HTMLTextStyleOptions extends Omit<TextStyleOptions, 'leading' | 'textBaseline' | 'trim' | 'filters'>\n{\n    /**\n     * List of CSS style overrides to apply to the HTML text.\n     * These styles are added after the built-in styles and can override any default styling.\n     * @advanced\n     */\n    cssOverrides?: string[];\n\n    /**\n     * Custom styles to apply to specific HTML tags.\n     * Allows for consistent styling of custom elements without CSS overrides.\n     * @example\n     * ```ts\n     * const text = new HTMLText({\n     *     text: `\n     *         <red>Main Title</red>\n     *         <grey>The subtitle</grey>\n     *         <blue>Regular content text</blue>\n     *     `,\n     *     style: {\n     *         tagStyles: {\n     *             red: {\n     *                 fill: '#ff0000',\n     *             },\n     *             grey: {\n     *                 fill: '#666666',\n     *             },\n     *             blue: {\n     *                 fill: 'blue',\n     *             }\n     *         }\n     *     }\n     * });\n     * ```\n     * @standard\n     */\n    tagStyles?: Record<string, HTMLTextStyleOptions>;\n}\n\n/**\n * A TextStyle object rendered by the HTMLTextSystem.\n * @category text\n */\nexport class HTMLTextStyle extends TextStyle\n{\n    private _cssOverrides: string[] = [];\n    private _cssStyle: string;\n    /**\n     * Custom styles to apply to specific HTML tags.\n     * Allows for consistent styling of custom elements without CSS overrides.\n     * @example\n     * new HTMLText({\n     *   text:'<red>Red</red>,<blue>Blue</blue>,<green>Green</green>',\n     *   style:{\n     *       fontFamily: 'DM Sans',\n     *       fill: 'white',\n     *       fontSize:100,\n     *       tagStyles:{\n     *           red:{\n     *               fill:'red',\n     *           },\n     *           blue:{\n     *               fill:'blue',\n     *           },\n     *           green:{\n     *               fill:'green',\n     *           }\n     *       }\n     *   }\n     * );\n     * @standard\n     */\n    public tagStyles: Record<string, HTMLTextStyleOptions>;\n\n    constructor(options: HTMLTextStyleOptions = {})\n    {\n        super(options);\n\n        this.cssOverrides = options.cssOverrides ?? [];\n        this.tagStyles = options.tagStyles ?? {};\n    }\n\n    /**\n     * List of CSS style overrides to apply to the HTML text.\n     * These styles are added after the built-in styles and can override any default styling.\n     * @advanced\n     */\n    set cssOverrides(value: string | string[])\n    {\n        this._cssOverrides = value instanceof Array ? value : [value];\n        this.update();\n    }\n\n    /** @advanced */\n    get cssOverrides(): string[]\n    {\n        return this._cssOverrides;\n    }\n\n    /**\n     * Updates the text style and triggers a refresh of the CSS style cache.\n     * This method is called automatically when style properties are changed.\n     * @example\n     * ```ts\n     * // Update after multiple changes\n     * const text = new HTMLText({\n     *     text: 'Hello World',\n     *     style\n     * });\n     *\n     * style.fontSize = 32;\n     * style.fill = '#00ff00';\n     * style.fontFamily = 'Arial';\n     * style.update(); // Apply all changes at once\n     * ```\n     * @advanced\n     * @see {@link HTMLTextStyle#cssStyle} For accessing the generated CSS\n     * @see {@link HTMLTextStyle#cssOverrides} For managing CSS overrides\n     */\n    public update()\n    {\n        this._cssStyle = null;\n        super.update();\n    }\n\n    /**\n     * Creates a new HTMLTextStyle object with the same values as this one.\n     * This creates a deep copy of all style properties, including dropShadow and tag styles.\n     * @example\n     * ```ts\n     * // Create original style\n     * const originalStyle = new HTMLTextStyle({\n     *     fontSize: 24,\n     *     fill: '#ff0000',\n     *     tagStyles: {\n     *         header: { fontSize: 32, fill: '#00ff00' }\n     *     }\n     * });\n     *\n     * // Clone the style\n     * const clonedStyle = originalStyle.clone();\n     *\n     * // Modify cloned style independently\n     * clonedStyle.fontSize = 36;\n     * clonedStyle.fill = '#0000ff';\n     *\n     * // Original style remains unchanged\n     * console.log(originalStyle.fontSize); // Still 24\n     * console.log(originalStyle.fill); // Still '#ff0000'\n     * ```\n     *\n     * Properties that are cloned:\n     * - Basic text properties (fontSize, fontFamily, etc.)\n     * - Fill and stroke styles\n     * - Drop shadow configuration\n     * - CSS overrides\n     * - Tag styles (deep copied)\n     * - Word wrap settings\n     * - Alignment and spacing\n     * @returns {HTMLTextStyle} A new HTMLTextStyle instance with the same properties\n     * @see {@link HTMLTextStyle} For available style properties\n     * @see {@link HTMLTextStyle#cssOverrides} For CSS override handling\n     * @see {@link HTMLTextStyle#tagStyles} For tag style configuration\n     * @standard\n     */\n    public clone(): HTMLTextStyle\n    {\n        return new HTMLTextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n            cssOverrides: this.cssOverrides,\n            tagStyles: { ...this.tagStyles },\n        });\n    }\n\n    /**\n     * The CSS style string that will be applied to the HTML text.\n     * @advanced\n     */\n    get cssStyle(): string\n    {\n        if (!this._cssStyle)\n        {\n            this._cssStyle = textStyleToCSS(this);\n        }\n\n        return this._cssStyle;\n    }\n\n    /**\n     * Add a style override, this can be any CSS property\n     * it will override any built-in style. This is the\n     * property and the value as a string (e.g., `color: red`).\n     * This will override any other internal style.\n     * @param {string} value - CSS style(s) to add.\n     * @example\n     * style.addOverride('background-color: red');\n     * @advanced\n     */\n    public addOverride(...value: string[]): void\n    {\n        const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n\n        if (toAdd.length > 0)\n        {\n            this.cssOverrides.push(...toAdd);\n            this.update();\n        }\n    }\n\n    /**\n     * Remove any overrides that match the value.\n     * @param {string} value - CSS style to remove.\n     * @example\n     * style.removeOverride('background-color: red');\n     * @advanced\n     */\n    public removeOverride(...value: string[]): void\n    {\n        const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n\n        if (toRemove.length > 0)\n        {\n            this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n            this.update();\n        }\n    }\n\n    /**\n     * Sets the fill style for the text. HTML text only supports color fills (string or number values).\n     * Texture fills are not supported and will trigger a warning in debug mode.\n     * @example\n     * ```ts\n     * // Using hex colors\n     * const text = new HTMLText({\n     *     text: 'Colored Text',\n     *     style: {\n     *         fill: 0xff0000 // Red color\n     *     }\n     * });\n     *\n     * // Using CSS color strings\n     * text.style.fill = '#00ff00';     // Hex string (Green)\n     * text.style.fill = 'blue';        // Named color\n     * text.style.fill = 'rgb(255,0,0)' // RGB\n     * text.style.fill = '#f0f';        // Short hex\n     *\n     * // Invalid usage (will trigger warning in debug)\n     * text.style.fill = {\n     *     type: 'pattern',\n     *     texture: Texture.from('pattern.png')\n     * }; // Not supported, falls back to default\n     * ```\n     * @param value - The fill color to use. Must be a string or number.\n     * @throws {Warning} In debug mode when attempting to use unsupported fill types\n     * @see {@link TextStyle#fill} For full fill options in canvas text\n     * @standard\n     */\n    override set fill(value: FillInput)\n    {\n        // if its not a string or a number, then its a texture!\n        if (typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color fill is not supported by HTMLText');\n            // #endif\n        }\n\n        super.fill = value;\n    }\n\n    /**\n     * Sets the stroke style for the text. HTML text only supports color strokes (string or number values).\n     * Texture strokes are not supported and will trigger a warning in debug mode.\n     * @example\n     * ```ts\n     * // Using hex colors\n     * const text = new HTMLText({\n     *     text: 'Outlined Text',\n     *     style: {\n     *         stroke: 0xff0000 // Red outline\n     *     }\n     * });\n     *\n     * // Using CSS color strings\n     * text.style.stroke = '#00ff00';     // Hex string (Green)\n     * text.style.stroke = 'blue';        // Named color\n     * text.style.stroke = 'rgb(255,0,0)' // RGB\n     * text.style.stroke = '#f0f';        // Short hex\n     *\n     * // Using stroke width\n     * text.style = {\n     *     stroke: {\n     *         color: '#ff0000',\n     *         width: 2\n     *     }\n     * };\n     *\n     * // Remove stroke\n     * text.style.stroke = null;\n     *\n     * // Invalid usage (will trigger warning in debug)\n     * text.style.stroke = {\n     *     type: 'pattern',\n     *     texture: Texture.from('pattern.png')\n     * }; // Not supported, falls back to default\n     * ```\n     * @param value - The stroke style to use. Must be a string, number, or stroke configuration object\n     * @throws {Warning} In debug mode when attempting to use unsupported stroke types\n     * @see {@link TextStyle#stroke} For full stroke options in canvas text\n     * @standard\n     */\n    override set stroke(value: StrokeInput)\n    {\n        // if its not a string or a number, then its a texture!\n        if (value && typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color stroke is not supported by HTMLText');\n            // #endif\n        }\n\n        super.stroke = value;\n    }\n}\n","import { loadFontAsBase64 } from './loadFontAsBase64';\n\n/**\n * Options for the font CSS style\n * @category text\n * @internal\n */\nexport interface FontCSSStyleOptions\n{\n    /**\n     * The font family to use in the CSS\n     * @example\n     * 'Arial' or ['Arial', 'Helvetica']\n     */\n    fontFamily: string | string[]\n    /**\n     * The font weight to use in the CSS\n     * @example\n     * 'normal', 'bold', '100', '200', etc.\n     */\n    fontWeight: string\n    /**\n     * The font style to use in the CSS\n     * @example\n     * 'normal', 'italic', 'oblique'\n     */\n    fontStyle: string\n}\n\n/**\n * This will take a font url and a style and return a css string that can be injected into a style tag\n * This will contain inlined base64 font and the font family information\n * @param style - the style to generate the css for\n * @param url - The url to load the font from\n * @returns - The css string\n * @internal\n */\nexport async function loadFontCSS(style: FontCSSStyleOptions, url: string): Promise<string>\n{\n    const dataSrc = await loadFontAsBase64(url);\n\n    return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n","import { DOMAdapter } from '../../../environment/adapter';\n\n/**\n * Resolves a font url to a base64 string\n * @param url - The url to load the font from\n * @returns - The font as a base64 string\n * @internal\n */\nexport async function loadFontAsBase64(url: string): Promise<string>\n{\n    const response = await DOMAdapter.get().fetch(url);\n\n    const blob = await response.blob();\n\n    const reader = new FileReader();\n\n    const dataSrc: string = await new Promise((resolve, reject) =>\n    {\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n\n    return dataSrc;\n}\n","import { Cache } from '../../../assets/cache/Cache';\nimport { loadFontCSS } from './loadFontCSS';\n\nimport type { FontCSSStyleOptions } from './loadFontCSS';\n\n/** @internal */\nexport const FontStylePromiseCache = new Map<string, Promise<string>>();\n\n/**\n * takes the font families and returns a css string that can be injected into a style tag\n * It will contain the font families and the font urls encoded as base64\n * @param fontFamilies - The font families to load\n * @param style - The FontCSSStyleOptions to load the font with (used for the first font family)\n * @param defaultOptions - The default options to load the font with (used for the rest of the font families)\n * @param defaultOptions.fontWeight - The default font weight\n * @param defaultOptions.fontStyle - The default font style\n * @returns - The css string\n * @internal\n */\nexport async function getFontCss(\n    fontFamilies: string[],\n    style: FontCSSStyleOptions,\n    defaultOptions: {fontWeight: string, fontStyle: string}\n)\n{\n    const fontPromises = fontFamilies\n        .filter((fontFamily) => Cache.has(`${fontFamily}-and-url`))\n        .map((fontFamily, i) =>\n        {\n            if (!FontStylePromiseCache.has(fontFamily))\n            {\n                const { url } = Cache.get(`${fontFamily}-and-url`);\n\n                if (i === 0)\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: style.fontWeight,\n                        fontStyle: style.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n\n                else\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: defaultOptions.fontWeight,\n                        fontStyle: defaultOptions.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n            }\n\n            return FontStylePromiseCache.get(fontFamily);\n        });\n\n    return (await Promise.all(fontPromises)).join('\\n');\n}\n","import { HTMLTextRenderData } from '../HTMLTextRenderData';\n\nimport type { Size } from '../../../maths/misc/Size';\nimport type { HTMLTextStyle } from '../HTMLTextStyle';\n\nlet tempHTMLTextRenderData: HTMLTextRenderData;\n\n/**\n * Measures the HTML text without actually generating an image.\n * This is used to calculate the size of the text.\n * @param text - The text to measure\n * @param style - The style to use\n * @param fontStyleCSS - The font css to use\n * @param htmlTextRenderData - The HTMLTextRenderData to write the SVG to\n * @returns - The size of the text\n * @internal\n */\nexport function measureHtmlText(\n    text: string,\n    style: HTMLTextStyle,\n    fontStyleCSS?: string,\n    htmlTextRenderData?: HTMLTextRenderData\n): Size\n{\n    htmlTextRenderData ||= tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n\n    const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n\n    domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n\n    domElement.setAttribute('style', 'transform-origin: top left; display: inline-block');\n\n    if (fontStyleCSS)\n    {\n        styleElement.textContent = fontStyleCSS;\n    }\n\n    // Measure the contents using the shadow DOM\n    document.body.appendChild(svgRoot);\n\n    const contentBounds = domElement.getBoundingClientRect();\n\n    svgRoot.remove();\n\n    // padding is included in the CSS calculation, so we need to remove it here\n    const doublePadding = style.padding * 2;\n\n    return {\n        width: contentBounds.width - doublePadding,\n        height: contentBounds.height - doublePadding,\n    };\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { type CanvasAndContext, CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool';\nimport { type TextureStyle } from '../../rendering/renderers/shared/texture/TextureStyle';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { isSafari } from '../../utils/browser/isSafari';\nimport { warn } from '../../utils/logging/warn';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource';\nimport { HTMLTextRenderData } from './HTMLTextRenderData';\nimport { HTMLTextStyle } from './HTMLTextStyle';\nimport { extractFontFamilies } from './utils/extractFontFamilies';\nimport { getFontCss } from './utils/getFontCss';\nimport { getSVGUrl } from './utils/getSVGUrl';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage';\nimport { loadSVGImage } from './utils/loadSVGImage';\nimport { measureHtmlText } from './utils/measureHtmlText';\n\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { HTMLTextOptions } from './HTMLText';\n\n/**\n * System plugin to the renderer to manage HTMLText\n * @category rendering\n * @advanced\n */\nexport class HTMLTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    /**\n     * WebGPU has a cors issue when uploading an image that is an SVGImage\n     * To get around this we need to create a canvas draw the image to it and upload that instead.\n     * Bit of a shame.. but no other work around just yet!\n     */\n    private readonly _createCanvas: boolean;\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._createCanvas = renderer.type === RendererType.WEBGPU;\n    }\n\n    /**\n     * @param options\n     * @deprecated Use getTexturePromise instead\n     */\n    public getTexture(options: HTMLTextOptions): Promise<Texture>\n    {\n        return this.getTexturePromise(options);\n    }\n\n    public getTexturePromise(options: HTMLTextOptions): Promise<Texture>\n    {\n        return this._buildTexturePromise(options);\n    }\n\n    private async _buildTexturePromise(options: HTMLTextOptions)\n    {\n        const { text, style, resolution, textureStyle } = options as {\n            text: string,\n            style: HTMLTextStyle,\n            resolution: number,\n            textureStyle?: TextureStyle,\n        };\n\n        const htmlTextData = BigPool.get(HTMLTextRenderData);\n        const fontFamilies = extractFontFamilies(text, style);\n        const fontCSS = await getFontCss(\n            fontFamilies,\n            style,\n            HTMLTextStyle.defaultTextStyle as {fontWeight: string, fontStyle: string}\n        );\n        const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const image = htmlTextData.image;\n\n        // this off set will ensure we don't get any UV bleeding!\n        const uvSafeOffset = 2;\n\n        image.width = (width | 0) + uvSafeOffset;\n        image.height = (height | 0) + uvSafeOffset;\n\n        const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n\n        await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n\n        const resource: HTMLImageElement | HTMLCanvasElement = image;\n        let canvasAndContext: CanvasAndContext;\n\n        if (this._createCanvas)\n        {\n            // silly webGPU workaround..\n            canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n        }\n\n        const texture = getPo2TextureFromSource(canvasAndContext ? canvasAndContext.canvas : resource,\n            image.width - uvSafeOffset,\n            image.height - uvSafeOffset,\n            resolution\n        );\n\n        if (textureStyle) texture.source.style = textureStyle;\n\n        if (this._createCanvas)\n        {\n            this._renderer.texture.initSource(texture.source);\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n        }\n\n        BigPool.return(htmlTextData as PoolItem);\n\n        return texture;\n    }\n\n    public returnTexturePromise(texturePromise: Promise<Texture>)\n    {\n        texturePromise.then((texture) =>\n        {\n            this._cleanUp(texture);\n        }).catch(() =>\n        {\n            // #if _DEBUG\n            warn('HTMLTextSystem: Failed to clean texture');\n            // #endif\n        });\n    }\n\n    private _cleanUp(texture: Texture)\n    {\n        TexturePool.returnTexture(texture, true);\n        texture.source.resource = null;\n        texture.source.uploadMethodId = 'unknown';\n    }\n\n    public destroy()\n    {\n        // BOOM!\n        (this._renderer as null) = null;\n    }\n}\n","import type { HTMLTextStyle } from '../HTMLTextStyle';\n\n/**\n * Extracts font families from text. It will extract font families from the style, tagStyles and any font families\n * embedded in the text. It should also strip out duplicates as it goes.\n * @param  text - The text to extract font families from\n * @param style - The style to extract font families from\n * @returns {string[]} - The font families as an array of strings\n * @internal\n */\nexport function extractFontFamilies(text: string, style: HTMLTextStyle): string[]\n{\n    const fontFamily = style.fontFamily;\n    const fontFamilies: string[] = [];\n    const dedupe: Record<string, boolean> = {};\n\n    // first ensure fonts are loaded inline..\n    // find any font..\n    const regex = /font-family:([^;\"\\s]+)/g;\n\n    const matches = text.match(regex);\n\n    function addFontFamily(fontFamily: string)\n    {\n        if (!dedupe[fontFamily])\n        {\n            fontFamilies.push(fontFamily);\n\n            dedupe[fontFamily] = true;\n        }\n    }\n\n    if (Array.isArray(fontFamily))\n    {\n        for (let i = 0; i < fontFamily.length; i++)\n        {\n            addFontFamily(fontFamily[i]);\n        }\n    }\n    else\n    {\n        addFontFamily(fontFamily);\n    }\n\n    if (matches)\n    {\n        matches.forEach((match) =>\n        {\n            const fontFamily = match.split(':')[1].trim();\n\n            addFontFamily(fontFamily);\n        });\n    }\n\n    for (const i in style.tagStyles)\n    {\n        const fontFamily = style.tagStyles[i].fontFamily;\n\n        addFontFamily(fontFamily as string);\n    }\n\n    return fontFamilies;\n}\n","import type { HTMLTextRenderData } from '../HTMLTextRenderData';\nimport type { HTMLTextStyle } from '../HTMLTextStyle';\n\n/**\n * takes all the data and returns a svg url string can be loaded by an image element\n * @param text - The text to measure\n * @param style - The style to use\n * @param resolution - The resolution to use\n * @param fontCSS - The font css to use\n * @param htmlTextData - The HTMLTextRenderData to write the SVG to\n * @returns - The SVG as a url string\n * @internal\n */\nexport function getSVGUrl(\n    text: string,\n    style: HTMLTextStyle,\n    resolution: number,\n    fontCSS: string,\n    htmlTextData: HTMLTextRenderData\n)\n{\n    const { domElement, styleElement, svgRoot } = htmlTextData;\n\n    domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n    domElement.setAttribute('style', `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n    styleElement.textContent = fontCSS;\n\n    const { width, height } = htmlTextData.image;\n\n    svgRoot.setAttribute('width', width.toString());\n    svgRoot.setAttribute('height', height.toString());\n\n    return new XMLSerializer().serializeToString(svgRoot);\n}\n","/**\n * This function loads an SVG image into an HTMLImageElement.\n * The image can then be uploaded as texture to the GPU.\n * iOS has a bug where embedded fonts are not available immediately after the image loads,\n * so we wait an arbitrary amount of time before resolving the promise.\n * @param image - The image to load the SVG into\n * @param url - The url to load the SVG from\n * @param delay - Whether to delay the load\n * @returns - A promise that resolves when the image has loaded\n * @internal\n */\nexport function loadSVGImage(image: HTMLImageElement, url: string, delay: boolean)\n{\n    return new Promise<void>(async (resolve) =>\n    {\n        // Safari has a known bug where embedded fonts are not available\n        // immediately after the image loads, to compensate we wait an\n        // arbitrary amount of time\n        // @see https://bugs.webkit.org/show_bug.cgi?id=219770\n        if (delay)\n        {\n            await new Promise<void>((resolve) => setTimeout(resolve, 100));\n        }\n\n        image.onload = () =>\n        {\n            resolve();\n        };\n\n        image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n        image.crossOrigin = 'anonymous';\n    });\n}\n","import { DOMAdapter } from '../../environment/adapter';\n\n/**\n * Checks if the current browser is Safari.\n * @returns {boolean} True if the browser is Safari, false otherwise.\n * @internal\n */\nexport function isSafari(): boolean\n{\n    const { userAgent } = DOMAdapter.get().getNavigator();\n\n    return (/^((?!chrome|android).)*safari/i).test(userAgent);\n}\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\nimport type { CanvasAndContext } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\n/**\n * This function converts an image to a canvas, and returns the canvas.\n * It is used to convert images to canvases to work around a CORS issue where WebGPU cannot\n * upload an SVGImage to a texture.\n *\n * It uses the CanvasPool to get an optimal canvas and context, and then draws the image onto it.\n * Remember to return this canvas is immediately to the CanvasPool for reuse when you are done with it.\n * (eg upload it to the GPU!)\n * @param image - The image to convert to a canvas.\n * @param resolution - The resolution of the canvas.\n * @internal\n */\nexport function getTemporaryCanvasFromImage(image: HTMLImageElement, resolution: number): CanvasAndContext\n{\n    // Get an optimal canvas and context from the CanvasPool, based on the\n    // dimensions of the image and the desired resolution.\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n        image.width,\n        image.height,\n        resolution\n    );\n\n    // Clear the context of the canvas, and draw the image onto it.\n    const { context } = canvasAndContext;\n\n    context.clearRect(0, 0, image.width, image.height);\n    context.drawImage(image, 0, 0);\n\n    // Return the canvas.\n    return canvasAndContext;\n}\n\n","import { extensions } from '../../extensions/Extensions';\nimport { HTMLTextPipe } from './HTMLTextPipe';\nimport { HTMLTextSystem } from './HTMLTextSystem';\n\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { type GPUData } from '../../view/ViewContainer';\nimport { BatchableMesh } from './BatchableMesh';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type {\n    InstructionPipe,\n    RenderPipe\n} from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Mesh } from './Mesh';\n\n// TODO Record mode is a P2, will get back to this as it's not a priority\n// const recordMode = true;\n\n/**\n * GPUData for Mesh\n * @internal\n */\nexport class MeshGpuData implements GPUData\n{\n    public meshData?: MeshData;\n    public batchableMesh?: BatchableMesh;\n\n    public destroy()\n    {\n        // BOOM!\n    }\n}\n\n/**\n * The data for the mesh\n * @internal\n */\ninterface MeshData\n{\n    /** if the mesh is batched or not */\n    batched: boolean;\n    /** the size of the index buffer */\n    indexSize: number;\n    /** the size of the vertex buffer */\n    vertexSize: number;\n}\n\n/** @internal */\nexport interface MeshAdaptor\n{\n    init(): void;\n    execute(meshPipe: MeshPipe, mesh: Mesh): void;\n    destroy(): void;\n}\n\n/**\n * The MeshPipe is responsible for handling the rendering of Mesh objects.\n * It manages the batching of meshes, updates their GPU data, and executes the rendering instructions.\n * It also handles the local uniforms for each mesh, such as transformation matrices and colors.\n * @category scene\n * @internal\n */\nexport class MeshPipe implements RenderPipe<Mesh>, InstructionPipe<Mesh>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'mesh',\n    } as const;\n\n    public localUniforms = new UniformGroup({\n        uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n        uRound: { value: 0, type: 'f32' },\n    });\n\n    public localUniformsBindGroup = new BindGroup({\n        0: this.localUniforms,\n    });\n\n    public renderer: Renderer;\n\n    private _adaptor: MeshAdaptor;\n\n    constructor(renderer: Renderer, adaptor: MeshAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init();\n    }\n\n    public validateRenderable(mesh: Mesh): boolean\n    {\n        const meshData = this._getMeshData(mesh);\n\n        const wasBatched = meshData.batched;\n\n        const isBatched = mesh.batched;\n\n        meshData.batched = isBatched;\n\n        if (wasBatched !== isBatched)\n        {\n            return true;\n        }\n        else if (isBatched)\n        {\n            const geometry = mesh._geometry;\n\n            // no need to break the batch if it's the same size\n            if (geometry.indices.length !== meshData.indexSize\n                    || geometry.positions.length !== meshData.vertexSize)\n            {\n                meshData.indexSize = geometry.indices.length;\n                meshData.vertexSize = geometry.positions.length;\n\n                return true;\n            }\n\n            const batchableMesh = this._getBatchableMesh(mesh);\n\n            if (batchableMesh.texture.uid !== mesh._texture.uid)\n            {\n                batchableMesh._textureMatrixUpdateId = -1;\n            }\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                mesh._texture\n            );\n        }\n\n        return false;\n    }\n\n    public addRenderable(mesh: Mesh, instructionSet: InstructionSet)\n    {\n        const batcher = this.renderer.renderPipes.batch;\n\n        const { batched } = this._getMeshData(mesh);\n\n        if (batched)\n        {\n            const gpuBatchableMesh = this._getBatchableMesh(mesh);\n\n            gpuBatchableMesh.setTexture(mesh._texture);\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            batcher.addToBatch(gpuBatchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            instructionSet.add(mesh);\n        }\n    }\n\n    public updateRenderable(mesh: Mesh)\n    {\n        if (mesh.batched)\n        {\n            const gpuBatchableMesh = this._getBatchableMesh(mesh);\n\n            gpuBatchableMesh.setTexture(mesh._texture);\n\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n        }\n    }\n\n    public execute(mesh: Mesh)\n    {\n        if (!mesh.isRenderable) return;\n\n        mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n\n        const localUniforms = this.localUniforms;\n\n        localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n        localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n        localUniforms.update();\n\n        color32BitToUniform(\n            mesh.groupColorAlpha,\n            localUniforms.uniforms.uColor,\n            0\n        );\n\n        this._adaptor.execute(this, mesh);\n    }\n\n    private _getMeshData(mesh: Mesh): MeshData\n    {\n        mesh._gpuData[this.renderer.uid] ||= new MeshGpuData();\n\n        return mesh._gpuData[this.renderer.uid].meshData || this._initMeshData(mesh);\n    }\n\n    private _initMeshData(mesh: Mesh): MeshData\n    {\n        mesh._gpuData[this.renderer.uid].meshData = {\n            batched: mesh.batched,\n            indexSize: mesh._geometry.indices?.length,\n            vertexSize: mesh._geometry.positions?.length,\n        };\n\n        return mesh._gpuData[this.renderer.uid].meshData;\n    }\n\n    private _getBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        mesh._gpuData[this.renderer.uid] ||= new MeshGpuData();\n\n        return mesh._gpuData[this.renderer.uid].batchableMesh || this._initBatchableMesh(mesh);\n    }\n\n    private _initBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        // TODO - make this batchable graphics??\n        const gpuMesh: BatchableMesh = new BatchableMesh();\n\n        gpuMesh.renderable = mesh;\n        gpuMesh.setTexture(mesh._texture);\n        gpuMesh.transform = mesh.groupTransform;\n        gpuMesh.roundPixels = (this.renderer._roundPixels | mesh._roundPixels) as 0 | 1;\n\n        mesh._gpuData[this.renderer.uid].batchableMesh = gpuMesh;\n\n        return gpuMesh;\n    }\n\n    public destroy()\n    {\n        this.localUniforms = null;\n        this.localUniformsBindGroup = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n\n        this.renderer = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { MeshPipe } from './shared/MeshPipe';\n\nextensions.add(MeshPipe);\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { Bounds } from '../../container/bounds/Bounds';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\n\nconst tempBounds = new Bounds();\n\n/**\n * Takes an image and creates a texture from it, using a power of 2 texture from the texture pool.\n * Remember to return the texture when you don't need it any more!\n * @param image - The image to create a texture from\n * @param width - the frame width of the texture\n * @param height - the frame height of the texture\n * @param resolution - The resolution of the texture\n * @returns - The texture\n * @internal\n */\nexport function getPo2TextureFromSource(\n    image: HTMLImageElement | HTMLCanvasElement | ICanvas,\n    width: number,\n    height: number,\n    resolution: number\n): Texture\n{\n    const bounds = tempBounds;\n\n    bounds.minX = 0;\n    bounds.minY = 0;\n\n    bounds.maxX = (image.width / resolution) | 0;\n    bounds.maxY = (image.height / resolution) | 0;\n\n    const texture = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        resolution,\n        false\n    );\n\n    texture.source.uploadMethodId = 'image';\n    texture.source.resource = image;\n    texture.source.alphaMode = 'premultiply-alpha-on-upload';\n\n    texture.frame.width = width / resolution;\n    texture.frame.height = height / resolution;\n\n    // We want to update the resource on the GPU,\n    // but we do not want to resize the texture.\n    // calling `texture.source.update` will fit the resource to the texture\n    // causing a resize of the texture on the GPU.\n    // which is not what we want!\n    texture.source.emit('update', texture.source);\n\n    texture.updateUvs();\n\n    return texture;\n}\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\n\nimport type { MeshGeometryOptions } from '../mesh/shared/MeshGeometry';\n\n/**\n * Constructor options used for `PlaneGeometry` instances.\n * ```js\n * const planeGeometry = new PlaneGeometry({\n *    width: 100,\n *    height: 100,\n *    verticesX: 10,\n *    verticesY: 10,\n * });\n * ```\n * @see {@link PlaneGeometry}\n * @category scene\n * @advanced\n */\nexport interface PlaneGeometryOptions\n{\n    /** Width of plane */\n    width?: number;\n    /** Height of plane */\n    height?: number;\n    /** Number of vertices on x-axis */\n    verticesX?: number;\n    /** Number of vertices on y-axis */\n    verticesY?: number;\n}\n\n/**\n * The PlaneGeometry allows you to draw a 2d plane\n * @category scene\n * @advanced\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public static defaultOptions: PlaneGeometryOptions & MeshGeometryOptions = {\n        width: 100,\n        height: 100,\n        verticesX: 10,\n        verticesY: 10,\n    };\n\n    /** The number of vertices on x-axis */\n    public verticesX: number;\n    /** The number of vertices on y-axis */\n    public verticesY: number;\n    /** The width of plane */\n    public width: number;\n    /** The height of plane */\n    public height: number;\n\n    /**\n     * @param {PlaneGeometryOptions} options - Options to be applied to plane geometry\n     */\n    constructor(options: PlaneGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(width?: number, height?: number, verticesX?: number, verticesY?: number);\n    constructor(...args: [PlaneGeometryOptions?] | [number?, number?, number?, number?])\n    {\n        super({});\n\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead');\n            // #endif\n\n            options = {\n                width: options,\n                height: args[1],\n                verticesX: args[2],\n                verticesY: args[3],\n            };\n        }\n\n        this.build(options);\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @param options - Options to be applied to plane geometry\n     */\n    public build(options: PlaneGeometryOptions): void\n    {\n        options = { ...PlaneGeometry.defaultOptions, ...options };\n\n        this.verticesX = this.verticesX ?? options.verticesX;\n        this.verticesY = this.verticesY ?? options.verticesY;\n\n        this.width = this.width ?? options.width;\n        this.height = this.height ?? options.height;\n\n        const total = this.verticesX * this.verticesY;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const verticesX = this.verticesX - 1;\n        const verticesY = this.verticesY - 1;\n\n        const sizeX = (this.width) / verticesX;\n        const sizeY = (this.height) / verticesY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.verticesX);\n            const y = ((i / this.verticesX) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / verticesX, y / verticesY);\n        }\n\n        const totalSub = verticesX * verticesY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % verticesX;\n            const ypos = (i / verticesX) | 0;\n\n            const value = (ypos * this.verticesX) + xpos;\n            const value2 = (ypos * this.verticesX) + xpos + 1;\n            const value3 = ((ypos + 1) * this.verticesX) + xpos;\n            const value4 = ((ypos + 1) * this.verticesX) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint32Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n","import { type PointData } from '../../maths/point/PointData';\nimport { PlaneGeometry } from '../mesh-plane/PlaneGeometry';\n\n/**\n * Options for the NineSliceGeometry.\n * @category scene\n * @advanced\n */\nexport interface NineSliceGeometryOptions\n{\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    width?: number\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    height?: number\n    /** The original width of the texture */\n    originalWidth?: number\n    /** The original height of the texture */\n    originalHeight?: number\n    /** The width of the left column. */\n    leftWidth?: number\n    /** The height of the top row. */\n    topHeight?: number\n    /** The width of the right column. */\n    rightWidth?: number\n    /** The height of the bottom row. */\n    bottomHeight?: number\n\n    /** The anchor point of the NineSliceSprite. */\n    anchor?: PointData\n}\n\n/**\n * The NineSliceGeometry class allows you to create a NineSlicePlane object.\n * @category scene\n * @advanced\n */\nexport class NineSliceGeometry extends PlaneGeometry\n{\n    /** The default options for the NineSliceGeometry. */\n    public static defaultOptions: NineSliceGeometryOptions = {\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        width: 100,\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        height: 100,\n        /** The width of the left column. */\n        leftWidth: 10,\n        /** The height of the top row. */\n        topHeight: 10,\n        /** The width of the right column. */\n        rightWidth: 10,\n        /** The height of the bottom row. */\n        bottomHeight: 10,\n\n        /** The original width of the texture */\n        originalWidth: 100,\n        /** The original height of the texture */\n        originalHeight: 100,\n    };\n\n    /** @internal */\n    public _leftWidth: number;\n    /** @internal */\n    public _rightWidth: number;\n    /** @internal */\n    public _topHeight: number;\n    /** @internal */\n    public _bottomHeight: number;\n\n    private _originalWidth: number;\n    private _originalHeight: number;\n    private _anchorX: any;\n    private _anchorY: number;\n\n    constructor(options: NineSliceGeometryOptions = {})\n    {\n        options = { ...NineSliceGeometry.defaultOptions, ...options };\n\n        super({\n            width: options.width,\n            height: options.height,\n            verticesX: 4,\n            verticesY: 4,\n        });\n\n        this.update(options);\n    }\n\n    /**\n     * Updates the NineSliceGeometry with the options.\n     * @param options - The options of the NineSliceGeometry.\n     */\n    public update(options: NineSliceGeometryOptions)\n    {\n        this.width = options.width ?? this.width;\n        this.height = options.height ?? this.height;\n        this._originalWidth = options.originalWidth ?? this._originalWidth;\n        this._originalHeight = options.originalHeight ?? this._originalHeight;\n        this._leftWidth = options.leftWidth ?? this._leftWidth;\n        this._rightWidth = options.rightWidth ?? this._rightWidth;\n        this._topHeight = options.topHeight ?? this._topHeight;\n        this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n\n        this._anchorX = options.anchor?.x;\n        this._anchorY = options.anchor?.y;\n\n        this.updateUvs();\n        this.updatePositions();\n    }\n\n    /** Updates the positions of the vertices. */\n    public updatePositions()\n    {\n        const p = this.positions;\n        const {\n            width,\n            height,\n            _leftWidth,\n            _rightWidth,\n            _topHeight,\n            _bottomHeight,\n            _anchorX,\n            _anchorY,\n        } = this;\n\n        const w = _leftWidth + _rightWidth;\n        const scaleW = width > w ? 1.0 : width / w;\n\n        const h = _topHeight + _bottomHeight;\n        const scaleH = height > h ? 1.0 : height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        const anchorOffsetX = _anchorX * width;\n        const anchorOffsetY = _anchorY * height;\n\n        p[0] = p[8] = p[16] = p[24] = -anchorOffsetX;\n        p[2] = p[10] = p[18] = p[26] = (_leftWidth * scale) - anchorOffsetX;\n        p[4] = p[12] = p[20] = p[28] = width - (_rightWidth * scale) - anchorOffsetX;\n        p[6] = p[14] = p[22] = p[30] = width - anchorOffsetX;\n\n        p[1] = p[3] = p[5] = p[7] = -anchorOffsetY;\n        p[9] = p[11] = p[13] = p[15] = (_topHeight * scale) - anchorOffsetY;\n        p[17] = p[19] = p[21] = p[23] = height - (_bottomHeight * scale) - anchorOffsetY;\n        p[25] = p[27] = p[29] = p[31] = height - anchorOffsetY;\n\n        this.getBuffer('aPosition').update();\n    }\n\n    /** Updates the UVs of the vertices. */\n    public updateUvs()\n    {\n        const uvs = this.uvs;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        const _uvw = 1.0 / this._originalWidth;\n        const _uvh = 1.0 / this._originalHeight;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.getBuffer('aUV').update();\n    }\n}\n\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { NineSliceGeometry } from './NineSliceGeometry';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { NineSliceSprite } from './NineSliceSprite';\n\n/**\n * GPU data for NineSliceSprite.\n * @internal\n */\nexport class NineSliceSpriteGpuData extends BatchableMesh\n{\n    constructor()\n    {\n        super();\n        this.geometry = new NineSliceGeometry();\n    }\n\n    public destroy()\n    {\n        this.geometry.destroy();\n    }\n}\n\n/**\n * The NineSliceSpritePipe is a render pipe for rendering NineSliceSprites.\n * @internal\n */\nexport class NineSliceSpritePipe implements RenderPipe<NineSliceSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'nineSliceSprite',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderable(sprite: NineSliceSprite, instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n    }\n\n    public updateRenderable(sprite: NineSliceSprite)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite._batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: NineSliceSprite): boolean\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        return !gpuSprite._batcher.checkAndUpdateTexture(\n            gpuSprite,\n            sprite._texture\n        );\n    }\n\n    private _updateBatchableSprite(sprite: NineSliceSprite, batchableSprite: BatchableMesh)\n    {\n        (batchableSprite.geometry as NineSliceGeometry)\n            .update(sprite);\n\n        // = sprite.bounds;\n        batchableSprite.setTexture(sprite._texture);\n    }\n\n    private _getGpuSprite(sprite: NineSliceSprite): NineSliceSpriteGpuData\n    {\n        return sprite._gpuData[this._renderer.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: NineSliceSprite): NineSliceSpriteGpuData\n    {\n        const gpuData = sprite._gpuData[this._renderer.uid] = new NineSliceSpriteGpuData();\n\n        const batchableMesh = gpuData;\n\n        batchableMesh.renderable = sprite;\n        batchableMesh.transform = sprite.groupTransform;\n        batchableMesh.texture = sprite._texture;\n        batchableMesh.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        // if the sprite has not been updated by the view, we need to update the batchable mesh now.\n        if (!sprite.didViewUpdate)\n        {\n            this._updateBatchableSprite(sprite, batchableMesh);\n        }\n\n        return gpuData;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe';\n\nextensions.add(NineSliceSpritePipe);\n","import { ExtensionType } from '../extensions/Extensions';\n\nimport type { InstructionSet } from '../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { Container } from '../scene/container/Container';\nimport type { Effect } from '../scene/container/Effect';\nimport type { FilterInstruction } from './FilterSystem';\n\n/** @internal */\nexport class FilterPipe implements InstructionPipe<FilterInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'filter',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(filterEffect: Effect, container: Container, instructionSet: InstructionSet): void\n    {\n        const renderPipes = this._renderer.renderPipes;\n\n        renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            canBundle: false,\n            action: 'pushFilter',\n            container,\n            filterEffect,\n        } as FilterInstruction);\n    }\n\n    public pop(_filterEffect: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: FilterInstruction)\n    {\n        if (instruction.action === 'pushFilter')\n        {\n            this._renderer.filter.push(instruction);\n        }\n        else if (instruction.action === 'popFilter')\n        {\n            this._renderer.filter.pop();\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import { ExtensionType } from '../extensions/Extensions';\nimport { Matrix } from '../maths/matrix/Matrix';\nimport { type Rectangle } from '../maths/shapes/Rectangle';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../rendering/renderers/types';\nimport { Bounds } from '../scene/container/bounds/Bounds';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds';\nimport { warn } from '../utils/logging/warn';\n\nimport type { WebGLRenderer } from '../rendering/renderers/gl/WebGLRenderer';\nimport type { WebGPURenderer } from '../rendering/renderers/gpu/WebGPURenderer';\nimport type { Instruction } from '../rendering/renderers/shared/instructions/Instruction';\nimport type { Renderable } from '../rendering/renderers/shared/Renderable';\nimport type { RenderTarget } from '../rendering/renderers/shared/renderTarget/RenderTarget';\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { System } from '../rendering/renderers/shared/system/System';\nimport type { Container } from '../scene/container/Container';\nimport type { Sprite } from '../scene/sprite/Sprite';\nimport type { Filter } from './Filter';\nimport type { FilterEffect } from './FilterEffect';\n\nconst quadGeometry = new Geometry({\n    attributes: {\n        aPosition: {\n            buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            format: 'float32x2',\n            stride: 2 * 4,\n            offset: 0,\n        },\n    },\n    indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3]),\n});\n\n/**\n * The filter pipeline is responsible for applying filters scene items!\n *\n * KNOWN BUGS:\n * 1. Global bounds calculation is incorrect if it is used when flip flopping filters. The maths can be found below\n * eg: filters [noiseFilter, blurFilter] noiseFilter will calculate the global bounds incorrectly.\n *\n * 2. RenderGroups do not work with filters. This is because the renderGroup matrix is not currently taken into account.\n *\n * Implementation notes:\n * 1. Gotcha - nesting filters that require blending will not work correctly. This creates a chicken and egg problem\n * the complexity and performance required to do this is not worth it i feel.. but lets see if others agree!\n *\n * 2. Filters are designed to be changed on the fly, this is means that changing filter information each frame will\n * not trigger an instruction rebuild. If you are constantly turning a filter on and off.. its therefore better to set\n * enabled to true or false on the filter. Or setting an empty array.\n *\n * 3. Need to look at perhaps aliasing when flip flopping filters. Really we should only need to antialias the FIRST\n * Texture we render too. The rest can be non aliased. This might help performance.\n * Currently we flip flop with an antialiased texture if antialiasing is enabled on the filter.\n * @internal\n */\nexport interface FilterInstruction extends Instruction\n{\n    renderPipeId: 'filter',\n    action: 'pushFilter' | 'popFilter',\n    container?: Container,\n    renderables?: Renderable[],\n    filterEffect: FilterEffect,\n}\n\n/**\n * Class representing the data required for applying filters.\n * This class holds various properties that are used during the filter application process.\n * @internal\n */\nclass FilterData\n{\n    /**\n     * Indicates whether the filter should be skipped.\n     * @type {boolean}\n     */\n    public skip = false;\n\n    /**\n     * The texture to which the filter is applied.\n     * @type {Texture}\n     */\n    public inputTexture: Texture = null;\n\n    /**\n     * The back texture used for blending, if required.\n     * @type {Texture | null}\n     */\n    public backTexture?: Texture = null;\n\n    /**\n     * The list of filters to be applied.\n     * @type {Filter[]}\n     */\n    public filters: Filter[] = null;\n\n    /**\n     * The bounds of the filter area.\n     * @type {Bounds}\n     */\n    public bounds = new Bounds();\n\n    /**\n     * The container to which the filter is applied.\n     * @type {Container}\n     */\n    public container: Container = null;\n\n    /**\n     * Indicates whether blending is required for the filter.\n     * @type {boolean}\n     */\n    public blendRequired: boolean = false;\n\n    /**\n     * The render surface where the output of the filter is rendered.\n     * @type {RenderSurface}\n     */\n    public outputRenderSurface: RenderSurface = null;\n\n    /**\n     * The global frame of the filter area.\n     * @type {{ x: number, y: number, width: number, height: number }}\n     */\n    public globalFrame = { x: 0, y: 0, width: 0, height: 0 };\n\n    /**\n     * Indicates whether antialiasing is enabled for the filter.\n     * @type {boolean}\n     */\n    public antialias: boolean;\n\n    /**\n     * The resolution of the filter.\n     * @type {number}\n     */\n    public resolution: number;\n}\n\n/**\n * System that manages the filter pipeline\n * @category rendering\n * @advanced\n */\nexport class FilterSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'filter',\n    } as const;\n\n    public readonly renderer: Renderer;\n\n    private _filterStackIndex = 0;\n    private _filterStack: FilterData[] = [];\n\n    private readonly _filterGlobalUniforms = new UniformGroup({\n        uInputSize: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputPixel: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputClamp: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uGlobalFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputTexture: { value: new Float32Array(4), type: 'vec4<f32>' },\n    });\n\n    private readonly _globalFilterBindGroup: BindGroup = new BindGroup({});\n    private _activeFilterData: FilterData;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n     * @readonly\n     */\n    public get activeBackTexture(): Texture | undefined\n    {\n        return this._activeFilterData?.backTexture;\n    }\n\n    /**\n     * Pushes a filter instruction onto the filter stack.\n     * @param instruction - The instruction containing the filter effect and container.\n     * @internal\n     */\n    public push(instruction: FilterInstruction)\n    {\n        const renderer = this.renderer;\n\n        const filters = instruction.filterEffect.filters;\n\n        // get a filter data from the stack. They can be reused multiple times each frame,\n        // so we don't need to worry about overwriting them in a single pass.\n        const filterData = this._pushFilterData();\n\n        filterData.skip = false;\n\n        filterData.filters = filters as Filter[];\n        filterData.container = instruction.container;\n        filterData.outputRenderSurface = renderer.renderTarget.renderSurface;\n\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n\n        const rootResolution = colorTextureSource.resolution;\n        const rootAntialias = colorTextureSource.antialias;\n\n        // if there are no filters, we skip the pass\n        if (filters.length === 0)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        const bounds = filterData.bounds;\n\n        this._calculateFilterArea(instruction, bounds);\n\n        this._calculateFilterBounds(filterData, renderer.renderTarget.rootViewPort, rootAntialias, rootResolution, 1);\n\n        if (filterData.skip)\n        {\n            return;\n        }\n\n        const previousFilterData = this._getPreviousFilterData();\n\n        const globalResolution = this._findFilterResolution(rootResolution);\n        let offsetX = 0;\n        let offsetY = 0;\n\n        if (previousFilterData)\n        {\n            offsetX = previousFilterData.bounds.minX;\n            offsetY = previousFilterData.bounds.minY;\n        }\n\n        this._calculateGlobalFrame(\n            filterData,\n            offsetX, offsetY,\n            globalResolution,\n            colorTextureSource.width,\n            colorTextureSource.height\n        );\n\n        // set all the filter data\n\n        this._setupFilterTextures(filterData, bounds, renderer, previousFilterData);\n    }\n\n    /**\n     * Applies filters to a texture.\n     *\n     * This method takes a texture and a list of filters, applies the filters to the texture,\n     * and returns the resulting texture.\n     * @param {object} params - The parameters for applying filters.\n     * @param {Texture} params.texture - The texture to apply filters to.\n     * @param {Filter[]} params.filters - The filters to apply.\n     * @returns {Texture} The resulting texture after all filters have been applied.\n     * @example\n     *\n     * ```ts\n     * // Create a texture and a list of filters\n     * const texture = new Texture(...);\n     * const filters = [new BlurFilter(), new ColorMatrixFilter()];\n     *\n     * // Apply the filters to the texture\n     * const resultTexture = filterSystem.applyToTexture({ texture, filters });\n     *\n     * // Use the resulting texture\n     * sprite.texture = resultTexture;\n     * ```\n     *\n     * Key Points:\n     * 1. padding is not currently supported here - so clipping may occur with filters that use padding.\n     * 2. If all filters are disabled or skipped, the original texture is returned.\n     */\n    public generateFilteredTexture({ texture, filters }: {texture: Texture, filters: Filter[]}): Texture\n    {\n        // get a filter data from the stack. They can be reused multiple times each frame,\n        // so we don't need to worry about overwriting them in a single pass.\n        const filterData = this._pushFilterData();\n\n        this._activeFilterData = filterData;\n        filterData.skip = false;\n\n        filterData.filters = filters;\n\n        const colorTextureSource = texture.source;\n\n        const rootResolution = colorTextureSource.resolution;\n        const rootAntialias = colorTextureSource.antialias;\n\n        // if there are no filters, we skip the pass\n        if (filters.length === 0)\n        {\n            filterData.skip = true;\n\n            return texture;\n        }\n\n        const bounds = filterData.bounds;\n\n        // this path is used by the blend modes mostly!\n        // they collect all renderables and push them into a list.\n        // this list is then used to calculate the bounds of the filter area\n\n        bounds.addRect(texture.frame);\n\n        this._calculateFilterBounds(filterData, bounds.rectangle, rootAntialias, rootResolution, 0);\n\n        if (filterData.skip)\n        {\n            return texture;\n        }\n\n        const globalResolution = rootResolution;\n        const offsetX = 0;\n        const offsetY = 0;\n\n        this._calculateGlobalFrame(\n            filterData,\n            offsetX, offsetY,\n            globalResolution,\n            colorTextureSource.width,\n            colorTextureSource.height\n        );\n\n        /// /////////\n\n        // set all the filter data\n        // get a P02 texture from our pool...\n        filterData.outputRenderSurface = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            filterData.resolution,\n            filterData.antialias,\n        );\n\n        filterData.backTexture = Texture.EMPTY;\n\n        /// ///\n        // bind...\n        // TODO this might need looking at for padding!\n        filterData.inputTexture = texture;\n\n        /// ////////////// PART 2 POP //////////////////////\n\n        const renderer = this.renderer;\n\n        // TODO required? check with AA\n        renderer.renderTarget.finishRenderPass();\n\n        // get a BufferResource from the uniformBatch.\n        // this will batch the shader uniform data and give us a buffer resource we can\n        // set on our globalUniform Bind Group\n        this._applyFiltersToTexture(filterData, true);\n\n        const outputTexture = filterData.outputRenderSurface as Texture;\n\n        outputTexture.source.alphaMode = 'premultiplied-alpha';\n\n        return outputTexture;\n    }\n\n    /** @internal */\n    public pop()\n    {\n        const renderer = this.renderer;\n\n        const filterData = this._popFilterData();\n\n        // if we are skipping this filter then we just do nothing :D\n        if (filterData.skip)\n        {\n            return;\n        }\n\n        renderer.globalUniforms.pop();\n\n        renderer.renderTarget.finishRenderPass();\n\n        this._activeFilterData = filterData;\n\n        this._applyFiltersToTexture(filterData, false);\n\n        // if we made a background texture, lets return that also\n        if (filterData.blendRequired)\n        {\n            TexturePool.returnTexture(filterData.backTexture);\n        }\n\n        // return the texture to the pool so we can reuse the next frame\n        TexturePool.returnTexture(filterData.inputTexture);\n    }\n\n    /**\n     * Copies the last render surface to a texture.\n     * @param lastRenderSurface - The last render surface to copy from.\n     * @param bounds - The bounds of the area to copy.\n     * @param previousBounds - The previous bounds to use for offsetting the copy.\n     */\n    public getBackTexture(lastRenderSurface: RenderTarget, bounds: Bounds, previousBounds?: Bounds)\n    {\n        const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n\n        const backTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            backgroundResolution,\n            false,\n        );\n\n        let x = bounds.minX;\n        let y = bounds.minY;\n\n        if (previousBounds)\n        {\n            x -= previousBounds.minX;\n            y -= previousBounds.minY;\n        }\n\n        x = Math.floor(x * backgroundResolution);\n        y = Math.floor(y * backgroundResolution);\n\n        const width = Math.ceil(bounds.width * backgroundResolution);\n        const height = Math.ceil(bounds.height * backgroundResolution);\n\n        this.renderer.renderTarget.copyToTexture(\n            lastRenderSurface,\n            backTexture,\n            { x, y },\n            { width, height },\n            { x: 0, y: 0 }\n        );\n\n        return backTexture;\n    }\n\n    /**\n     * Applies a filter to a texture.\n     * @param filter - The filter to apply.\n     * @param input - The input texture.\n     * @param output - The output render surface.\n     * @param clear - Whether to clear the output surface before applying the filter.\n     */\n    public applyFilter(filter: Filter, input: Texture, output: RenderSurface, clear: boolean)\n    {\n        const renderer = this.renderer;\n\n        const filterData = this._activeFilterData;\n\n        const outputRenderSurface = filterData.outputRenderSurface;\n\n        const isFinalTarget = outputRenderSurface === output;\n\n        // Find the correct resolution by looking back through the filter stack\n        const rootResolution = renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n        const resolution = this._findFilterResolution(rootResolution);\n\n        // Calculate the offset for both outputFrame and globalFrame\n        let offsetX = 0;\n        let offsetY = 0;\n\n        if (isFinalTarget)\n        {\n            const offset = this._findPreviousFilterOffset();\n\n            offsetX = offset.x;\n            offsetY = offset.y;\n        }\n\n        this._updateFilterUniforms(input, output, filterData, offsetX, offsetY, resolution, isFinalTarget, clear);\n\n        this._setupBindGroupsAndRender(filter, input, renderer);\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     * @param outputMatrix - The matrix to output to.\n     * @param {Sprite} sprite - The sprite to map to.\n     * @returns The mapped matrix.\n     */\n    public calculateSpriteMatrix(outputMatrix: Matrix, sprite: Sprite): Matrix\n    {\n        const data = this._activeFilterData;\n\n        const mappedMatrix = outputMatrix.set(\n            data.inputTexture._source.width,\n            0, 0,\n            data.inputTexture._source.height,\n            data.bounds.minX, data.bounds.minY\n        );\n\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n\n        const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n\n        if (renderGroup && renderGroup.cacheToLocalTransform)\n        {\n            // get the matrix relative to the render group..\n            worldTransform.prepend(renderGroup.cacheToLocalTransform);\n        }\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(\n            1.0 / sprite.texture.frame.width,\n            1.0 / sprite.texture.frame.height\n        );\n\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    public destroy(): void\n    {\n        // BOOM!\n    }\n\n    /**\n     * Sets up the bind groups and renders the filter.\n     * @param filter - The filter to apply\n     * @param input - The input texture\n     * @param renderer - The renderer instance\n     */\n    private _setupBindGroupsAndRender(filter: Filter, input: Texture, renderer: Renderer): void\n    {\n        // TODO - should prolly use a adaptor...\n        if ((renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            const batchUniforms = (renderer as WebGPURenderer).renderPipes.uniformBatch\n                .getUboResource(this._filterGlobalUniforms);\n\n            this._globalFilterBindGroup.setResource(batchUniforms, 0);\n        }\n        else\n        {\n            this._globalFilterBindGroup.setResource(this._filterGlobalUniforms, 0);\n        }\n\n        // now lets update the output texture...\n\n        // set bind group..\n        this._globalFilterBindGroup.setResource(input.source, 1);\n        this._globalFilterBindGroup.setResource(input.source.style, 2);\n\n        filter.groups[0] = this._globalFilterBindGroup;\n\n        renderer.encoder.draw({\n            geometry: quadGeometry,\n            shader: filter,\n            state: filter._state,\n            topology: 'triangle-list'\n        });\n\n        // WebGPU blit's automatically, but WebGL does not!\n        if (renderer.type === RendererType.WEBGL)\n        {\n            renderer.renderTarget.finishRenderPass();\n        }\n    }\n\n    /**\n     * Sets up the filter textures including input texture and back texture if needed.\n     * @param filterData - The filter data to update\n     * @param bounds - The bounds for the texture\n     * @param renderer - The renderer instance\n     * @param previousFilterData - The previous filter data for back texture calculation\n     */\n    private _setupFilterTextures(\n        filterData: FilterData,\n        bounds: Bounds,\n        renderer: Renderer,\n        previousFilterData: FilterData | null\n    ): void\n    {\n        // set all the filter data\n        filterData.backTexture = Texture.EMPTY;\n\n        if (filterData.blendRequired)\n        {\n            renderer.renderTarget.finishRenderPass();\n            // this actually forces the current commandQueue to render everything so far.\n            // if we don't do this, we won't be able to copy pixels for the background\n            const renderTarget = renderer.renderTarget.getRenderTarget(filterData.outputRenderSurface);\n\n            filterData.backTexture = this.getBackTexture(renderTarget, bounds, previousFilterData?.bounds);\n        }\n\n        /// ///\n        // bind...\n        // get a P02 texture from our pool...\n        filterData.inputTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            filterData.resolution,\n            filterData.antialias,\n        );\n\n        renderer.renderTarget.bind(filterData.inputTexture, true);\n        // set the global uniforms to take into account the bounds offset required\n\n        renderer.globalUniforms.push({\n            offset: bounds,\n        });\n    }\n\n    /**\n     * Calculates and sets the global frame for the filter.\n     * @param filterData - The filter data to update\n     * @param offsetX - The X offset\n     * @param offsetY - The Y offset\n     * @param globalResolution - The global resolution\n     * @param sourceWidth - The source texture width\n     * @param sourceHeight - The source texture height\n     */\n    private _calculateGlobalFrame(\n        filterData: FilterData,\n        offsetX: number,\n        offsetY: number,\n        globalResolution: number,\n        sourceWidth: number,\n        sourceHeight: number\n    ): void\n    {\n        const globalFrame = filterData.globalFrame;\n\n        globalFrame.x = offsetX * globalResolution;\n        globalFrame.y = offsetY * globalResolution;\n        globalFrame.width = sourceWidth * globalResolution;\n        globalFrame.height = sourceHeight * globalResolution;\n    }\n\n    /**\n     * Updates the filter uniforms with the current filter state.\n     * @param input - The input texture\n     * @param output - The output render surface\n     * @param filterData - The current filter data\n     * @param offsetX - The X offset for positioning\n     * @param offsetY - The Y offset for positioning\n     * @param resolution - The current resolution\n     * @param isFinalTarget - Whether this is the final render target\n     * @param clear - Whether to clear the output surface\n     */\n    private _updateFilterUniforms(\n        input: Texture,\n        output: RenderSurface,\n        filterData: FilterData,\n        offsetX: number,\n        offsetY: number,\n        resolution: number,\n        isFinalTarget: boolean,\n        clear: boolean\n    ): void\n    {\n        const uniforms = this._filterGlobalUniforms.uniforms;\n        const outputFrame = uniforms.uOutputFrame;\n        const inputSize = uniforms.uInputSize;\n        const inputPixel = uniforms.uInputPixel;\n        const inputClamp = uniforms.uInputClamp;\n        const globalFrame = uniforms.uGlobalFrame;\n        const outputTexture = uniforms.uOutputTexture;\n\n        // are we rendering back to the original surface?\n        if (isFinalTarget)\n        {\n            outputFrame[0] = filterData.bounds.minX - offsetX;\n            outputFrame[1] = filterData.bounds.minY - offsetY;\n        }\n        else\n        {\n            outputFrame[0] = 0;\n            outputFrame[1] = 0;\n        }\n\n        outputFrame[2] = input.frame.width;\n        outputFrame[3] = input.frame.height;\n\n        inputSize[0] = input.source.width;\n        inputSize[1] = input.source.height;\n        inputSize[2] = 1 / inputSize[0];\n        inputSize[3] = 1 / inputSize[1];\n\n        inputPixel[0] = input.source.pixelWidth;\n        inputPixel[1] = input.source.pixelHeight;\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (input.frame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (input.frame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n\n        globalFrame[0] = offsetX * resolution;\n        globalFrame[1] = offsetY * resolution;\n        globalFrame[2] = rootTexture.source.width * resolution;\n        globalFrame[3] = rootTexture.source.height * resolution;\n\n        // we are going to overwrite resource we can set it to null!\n        if (output instanceof Texture) output.source.resource = null;\n\n        // set the output texture - this is where we are going to render to\n        const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n\n        this.renderer.renderTarget.bind(output, !!clear);\n\n        if (output instanceof Texture)\n        {\n            outputTexture[0] = output.frame.width;\n            outputTexture[1] = output.frame.height;\n        }\n        else\n        {\n            // this means a renderTarget was passed directly\n            outputTexture[0] = renderTarget.width;\n            outputTexture[1] = renderTarget.height;\n        }\n\n        outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n\n        this._filterGlobalUniforms.update();\n    }\n\n    /**\n     * Finds the correct resolution by looking back through the filter stack.\n     * @param rootResolution - The fallback root resolution to use\n     * @returns The resolution from the previous filter or root resolution\n     */\n    private _findFilterResolution(rootResolution: number): number\n    {\n        let currentIndex = this._filterStackIndex - 1;\n\n        while (currentIndex > 0 && this._filterStack[currentIndex].skip)\n        {\n            --currentIndex;\n        }\n\n        return currentIndex > 0 && this._filterStack[currentIndex].inputTexture\n            ? this._filterStack[currentIndex].inputTexture.source._resolution\n            : rootResolution;\n    }\n\n    /**\n     * Finds the offset from the previous non-skipped filter in the stack.\n     * @returns The offset coordinates from the previous filter\n     */\n    private _findPreviousFilterOffset(): { x: number, y: number }\n    {\n        let offsetX = 0;\n        let offsetY = 0;\n        let lastIndex = this._filterStackIndex;\n\n        while (lastIndex > 0)\n        {\n            lastIndex--;\n            const prevFilterData = this._filterStack[lastIndex];\n\n            if (!prevFilterData.skip)\n            {\n                offsetX = prevFilterData.bounds.minX;\n                offsetY = prevFilterData.bounds.minY;\n                break;\n            }\n        }\n\n        return { x: offsetX, y: offsetY };\n    }\n\n    /**\n     * Calculates the filter area bounds based on the instruction type.\n     * @param instruction - The filter instruction\n     * @param bounds - The bounds object to populate\n     */\n    private _calculateFilterArea(instruction: FilterInstruction, bounds: Bounds): void\n    {\n        // this path is used by the blend modes mostly!\n        // they collect all renderables and push them into a list.\n        // this list is then used to calculate the bounds of the filter area\n        if (instruction.renderables)\n        {\n            getGlobalRenderableBounds(instruction.renderables, bounds);\n        }\n        // if a filterArea is provided, we save our selves some measuring and just use that area supplied\n        else if (instruction.filterEffect.filterArea)\n        {\n            bounds.clear();\n\n            // transform the filterArea into global space..\n            bounds.addRect(instruction.filterEffect.filterArea);\n\n            // new for v8, we transform the bounds into the space of the container\n            bounds.applyMatrix(instruction.container.worldTransform);\n        }\n        // classic filter path, we get the bounds of the container and use it by recursively\n        // measuring.\n        else\n        {\n            // we want to factor render layers to get the real visual bounds of this container.\n            // so the last param is true..\n            instruction.container.getFastGlobalBounds(true, bounds);\n        }\n\n        if (instruction.container)\n        {\n            // When a container is cached as a texture, its filters need to be applied relative to its\n            // cached parent's coordinate space rather than world space. This transform adjustment ensures\n            // filters are applied in the correct coordinate system.\n            const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n            const filterFrameTransform = renderGroup.cacheToLocalTransform;\n\n            if (filterFrameTransform)\n            {\n                bounds.applyMatrix(filterFrameTransform);\n            }\n        }\n    }\n\n    private _applyFiltersToTexture(filterData: FilterData, clear: boolean)\n    {\n        const inputTexture = filterData.inputTexture;\n\n        const bounds = filterData.bounds;\n\n        const filters = filterData.filters;\n\n        // get a BufferResource from the uniformBatch.\n        // this will batch the shader uniform data and give us a buffer resource we can\n        // set on our globalUniform Bind Group\n\n        // update the resources on the bind group...\n        this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n        this._globalFilterBindGroup.setResource(filterData.backTexture.source, 3);\n\n        if (filters.length === 1)\n        {\n            // render a single filter...\n            filters[0].apply(this, inputTexture, filterData.outputRenderSurface, clear);\n        }\n        else\n        {\n            let flip = filterData.inputTexture;\n\n            const tempTexture = TexturePool.getOptimalTexture(\n                bounds.width,\n                bounds.height,\n                flip.source._resolution,\n                false\n            );\n\n            // get another texture that we will render the next filter too\n            let flop = tempTexture;\n\n            let i = 0;\n\n            // loop and apply the filters, omitting the last one as we will render that to the final target\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                const filter = filters[i];\n\n                filter.apply(this, flip, flop, true);\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, filterData.outputRenderSurface, clear);\n\n            // return those textures for later!\n            TexturePool.returnTexture(tempTexture);\n        }\n    }\n\n    private _calculateFilterBounds(\n        filterData: FilterData,\n        viewPort: Rectangle,\n        rootAntialias: boolean,\n        rootResolution: number,\n        // a multiplier padding for the bounds calculation\n        // this prop is used when applying filters to textures\n        // as the should have padding applied to them already (until we fix padding when applying them to textures)\n        // set to 0 to remove padding from the bounds calculation\n        paddingMultiplier: number\n    )\n    {\n        const renderer = this.renderer;\n\n        const bounds = filterData.bounds;\n        const filters = filterData.filters;\n\n        // get GLOBAL bounds of the item we are going to apply the filter to\n\n        // next we get the settings for the filter\n        // we need to find the LOWEST resolution for the filter list\n        let resolution = Infinity;\n        // Padding is additive to add padding to our padding\n        let padding = 0;\n        // if this is true for all filter, it should be true, and otherwise false\n        let antialias = true;\n        // true if any filter requires the previous render target\n        let blendRequired = false;\n        // true if any filter in the list is enabled\n        let enabled = false;\n        // false if any filter in the list has false\n        let clipToViewport = true;\n\n        for (let i = 0; i < filters.length; i++)\n        {\n            const filter = filters[i];\n\n            resolution = Math.min(resolution, filter.resolution === 'inherit'\n                ? rootResolution : filter.resolution);\n            padding += filter.padding;\n\n            if (filter.antialias === 'off')\n            {\n                antialias = false;\n            }\n            else if (filter.antialias === 'inherit')\n            {\n                antialias &&= rootAntialias;\n            }\n\n            if (!filter.clipToViewport)\n            {\n                clipToViewport = false;\n            }\n\n            const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n\n            if (!isCompatible)\n            {\n                enabled = false;\n                break;\n            }\n\n            if (filter.blendRequired && !((renderer as WebGLRenderer).backBuffer?.useBackBuffer ?? true))\n            {\n                // #if _DEBUG\n                // eslint-disable-next-line max-len\n                warn('Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.');\n                // #endif\n\n                enabled = false;\n                break;\n            }\n\n            enabled = filter.enabled || enabled;\n            blendRequired ||= filter.blendRequired;\n        }\n\n        // if no filters are enabled lets skip!\n        if (!enabled)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // here we constrain the bounds to the viewport we will render too\n        // this should not take into account the x, y offset of the viewport - as this is\n        // handled by the viewport on the gpu.\n        if (clipToViewport)\n        {\n            bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n        }\n\n        // round the bounds to the nearest pixel\n        bounds\n            .scale(resolution)\n            .ceil()\n            .scale(1 / resolution)\n            .pad((padding | 0) * paddingMultiplier);\n\n        // skip if the bounds are negative or zero as this means they are\n        // not visible on the screen\n        if (!bounds.isPositive)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // set the global frame to the root texture\n\n        // get previous bounds.. we must take into account skipped filters also..\n\n        // // to find the previous resolution we need to account for the skipped filters\n        // // the following will find the last non skipped filter...\n\n        // store the values that will be used to apply the filters\n        filterData.antialias = antialias;\n        filterData.resolution = resolution;\n        filterData.blendRequired = blendRequired;\n    }\n\n    private _popFilterData(): FilterData\n    {\n        this._filterStackIndex--;\n\n        return this._filterStack[this._filterStackIndex];\n    }\n\n    private _getPreviousFilterData(): FilterData | null\n    {\n        let previousFilterData: FilterData;\n\n        let index = this._filterStackIndex - 1;\n\n        while (index > 1)\n        {\n            index--;\n            previousFilterData = this._filterStack[index];\n\n            if (!previousFilterData.skip)\n            {\n                break;\n            }\n        }\n\n        return previousFilterData;\n    }\n\n    private _pushFilterData(): FilterData\n    {\n        let filterData = this._filterStack[this._filterStackIndex];\n\n        if (!filterData)\n        {\n            filterData = this._filterStack[this._filterStackIndex] = new FilterData();\n        }\n\n        this._filterStackIndex++;\n\n        return filterData;\n    }\n}\n\n","import type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Bounds } from './Bounds';\n\n/**\n * @param renderables\n * @param bounds\n * @internal\n */\nexport function getGlobalRenderableBounds(renderables: Renderable[], bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    // instead of copying the matrix each time we are assigning it in bounds\n    // this is a performance hack :D\n    // so we need to restore the matrix after we are done\n\n    const tempMatrix = bounds.matrix;\n\n    for (let i = 0; i < renderables.length; i++)\n    {\n        const renderable = renderables[i];\n\n        if (renderable.globalDisplayStatus < 0b111)\n        {\n            continue;\n        }\n\n        bounds.matrix = renderable.worldTransform;\n        bounds.addBounds(renderable.bounds);\n    }\n\n    bounds.matrix = tempMatrix;\n\n    return bounds;\n}\n","import { extensions } from '../extensions/Extensions';\nimport { FilterPipe } from './FilterPipe';\nimport { FilterSystem } from './FilterSystem';\n\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n","import type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\n/** @internal */\nexport class GlParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const state = particleContainerPipe.state;\n        const renderer = particleContainerPipe.renderer as WebGLRenderer;\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.resources.uTexture = container.texture._source;\n        shader.resources.uniforms = particleContainerPipe.localUniforms;\n\n        const gl = renderer.gl;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        // now lets upload and render the buffers..\n        renderer.shader.bind(shader);\n        renderer.state.set(state);\n        renderer.geometry.bind(buffer.geometry, shader.glProgram);\n\n        const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n        const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n        gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n    }\n}\n","/**\n * Generic Mask Stack data structure\n * @function createIndicesForQuads\n * @param {number} size - Number of quads\n * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\n * @returns {Uint16Array|Uint32Array} - Resulting index buffer\n * @internal\n */\nexport function createIndicesForQuads(\n    size: number,\n    outBuffer: Uint16Array | Uint32Array | null = null\n): Uint16Array | Uint32Array\n{\n    // the total number of indices in our array, there are 6 points per quad.\n    const totalIndices = size * 6;\n\n    // Check if we need to use Uint32Array\n    if (totalIndices > 65535)\n    {\n        outBuffer ||= new Uint32Array(totalIndices); // Use Uint32Array if needed\n    }\n    else\n    {\n        outBuffer ||= new Uint16Array(totalIndices);\n    }\n\n    if (outBuffer.length !== totalIndices)\n    {\n        throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n    }\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        outBuffer[i + 0] = j + 0;\n        outBuffer[i + 1] = j + 1;\n        outBuffer[i + 2] = j + 2;\n        outBuffer[i + 3] = j + 0;\n        outBuffer[i + 4] = j + 2;\n        outBuffer[i + 5] = j + 3;\n    }\n\n    return outBuffer;\n}\n","import {\n    getAttributeInfoFromFormat\n} from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { IParticle } from '../Particle';\nimport type { ParticleRendererProperty } from '../particleData';\n\n// TODO rename to update function\n/** @internal */\nexport type ParticleUpdateFunction = (ps: IParticle[], f32v: Float32Array, u32v: Uint32Array) => void;\n\n/**\n * @param properties\n * @internal\n */\nexport function generateParticleUpdateFunction(properties: Record<string, ParticleRendererProperty>)\n{\n    return {\n        dynamicUpdate: generateUpdateFunction(properties, true),\n        staticUpdate: generateUpdateFunction(properties, false),\n    };\n}\n\nfunction generateUpdateFunction(\n    properties: Record<string, ParticleRendererProperty>,\n    dynamic: boolean\n): ParticleUpdateFunction\n{\n    const funcFragments: string[] = [];\n\n    funcFragments.push(`\n\n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n\n    let offset = 0;\n\n    for (const i in properties)\n    {\n        const property = properties[i];\n\n        if (dynamic !== property.dynamic) continue;\n\n        funcFragments.push(`offset = index + ${offset}`);\n\n        funcFragments.push(property.code);\n\n        const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n        offset += attributeInfo.stride / 4;\n    }\n\n    funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n\n    // add to the front..\n    funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n\n    const functionSource = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('ps', 'f32v', 'u32v', functionSource) as ParticleUpdateFunction;\n}\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\nimport type { IndexBufferArray } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport type { IParticle } from './Particle';\nimport type { ParticleRendererProperty } from './particleData';\nimport type { ParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\n/**\n * Options for creating a ParticleBuffer.\n * @internal\n */\nexport interface ParticleBufferOptions\n{\n    /** The size of the particle buffer, defaults to 1000. */\n    size: number;\n    /** A record of attributes that the particle container uses. */\n    properties: Record<string, ParticleRendererProperty>;\n}\n\n/**\n * The ParticleBuffer holds the buffers and geometry for a particle container.\n * It also contains the upload functions for the static and dynamic properties.\n * @internal\n */\nexport class ParticleBuffer\n{\n    /** The buffer containing static attribute data for all elements in the batch. */\n    public staticAttributeBuffer: ViewableBuffer;\n    /** The buffer containing dynamic attribute data for all elements in the batch. */\n    public dynamicAttributeBuffer: ViewableBuffer;\n\n    private readonly _staticBuffer: Buffer;\n    private readonly _dynamicBuffer: Buffer;\n\n    /** The buffer containing index data for all elements in the batch. */\n    public indexBuffer: IndexBufferArray;\n\n    private readonly _dynamicStride: number;\n    private readonly _staticStride: number;\n\n    /** The geometry of the particle buffer. */\n    public readonly geometry: Geometry;\n\n    private _size = 0;\n    private readonly _dynamicUpload: ParticleUpdateFunction;\n    private readonly _staticUpload: ParticleUpdateFunction;\n    private readonly _generateParticleUpdateCache: Record<string, {\n        dynamicUpdate: ParticleUpdateFunction;\n        staticUpdate: ParticleUpdateFunction;\n    }> = {};\n\n    constructor(options: ParticleBufferOptions)\n    {\n        // size in sprites!\n        const size = this._size = options.size ?? 1000;\n\n        // TODO add the option to specify what is dynamic!\n        const properties = options.properties;\n\n        // in bytes!\n        let staticVertexSize = 0;\n        let dynamicVertexSize = 0;\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                // dynamic.\n                dynamicVertexSize += attributeInfo.stride;\n            }\n            else\n            {\n                // static.\n                staticVertexSize += attributeInfo.stride;\n            }\n        }\n\n        this._dynamicStride = dynamicVertexSize / 4;\n        this._staticStride = staticVertexSize / 4;\n\n        this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n        this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n\n        this.indexBuffer = createIndicesForQuads(size);\n\n        // build geometry..\n\n        const geometry = new Geometry();\n\n        let dynamicOffset = 0;\n        let staticOffset = 0;\n\n        this._staticBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'static-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        this._dynamicBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'dynamic-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._dynamicBuffer,\n                    stride: this._dynamicStride * 4,\n                    offset: dynamicOffset * 4,\n                    format: property.format,\n                });\n                dynamicOffset += attributeInfo.size;\n            }\n            else\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._staticBuffer,\n                    stride: this._staticStride * 4,\n                    offset: staticOffset * 4,\n                    format: property.format,\n                });\n                staticOffset += attributeInfo.size;\n            }\n        }\n\n        geometry.addIndex(this.indexBuffer);\n\n        const uploadFunction = this.getParticleUpdate(properties);\n\n        this._dynamicUpload = uploadFunction.dynamicUpdate;\n        this._staticUpload = uploadFunction.staticUpdate;\n\n        this.geometry = geometry;\n    }\n\n    public getParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        const key = getParticleSyncKey(properties);\n\n        if (this._generateParticleUpdateCache[key])\n        {\n            return this._generateParticleUpdateCache[key];\n        }\n\n        this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n\n        return this._generateParticleUpdateCache[key];\n    }\n\n    public generateParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        return generateParticleUpdateFunction(properties);\n    }\n\n    public update(particles: IParticle[], uploadStatic: boolean)\n    {\n        // first resize the buffers if needed!\n        // TODO resize!\n        if (particles.length > this._size)\n        {\n            uploadStatic = true;\n\n            this._size = Math.max(particles.length, (this._size * 1.5) | 0);\n\n            this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n            this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n            this.indexBuffer = createIndicesForQuads(this._size);\n\n            this.geometry.indexBuffer.setDataWithSize(\n                this.indexBuffer, this.indexBuffer.byteLength, true);\n        }\n\n        const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n\n        this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n\n        this._dynamicBuffer.setDataWithSize(\n            this.dynamicAttributeBuffer.float32View, particles.length * this._dynamicStride * 4, true);\n\n        if (uploadStatic)\n        {\n            const staticAttributeBuffer = this.staticAttributeBuffer;\n\n            this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n\n            this._staticBuffer.setDataWithSize(\n                staticAttributeBuffer.float32View, particles.length * this._staticStride * 4, true);\n        }\n    }\n\n    public destroy()\n    {\n        this._staticBuffer.destroy();\n        this._dynamicBuffer.destroy();\n        this.geometry.destroy();\n    }\n}\n\nfunction getParticleSyncKey(properties: Record<string, ParticleRendererProperty>)\n{\n    const keyGen: string[] = [];\n\n    for (const key in properties)\n    {\n        const property = properties[key];\n\n        keyGen.push(key, property.code, property.dynamic ? 'd' : 's');\n    }\n\n    return keyGen.join('_');\n}\n\n","import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle';\nimport fragment from './particles.frag';\nimport vertex from './particles.vert';\nimport wgsl from './particles.wgsl';\n\n/** @internal */\nexport class ParticleShader extends Shader\n{\n    constructor()\n    {\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment\n        });\n\n        const gpuProgram = GpuProgram.from({\n            fragment: {\n                source: wgsl,\n                entryPoint: 'mainFragment'\n            },\n            vertex: {\n                source: wgsl,\n                entryPoint: 'mainVertex'\n            }\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                // this will be replaced with the texture from the particle container\n                uTexture: Texture.WHITE.source,\n                // this will be replaced with the texture style from the particle container\n                uSampler: new TextureStyle({}),\n                // this will be replaced with the local uniforms from the particle container\n                uniforms: {\n                    uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Color(0xFFFFFF), type: 'vec4<f32>' },\n                    uRound: { value: 1, type: 'f32' },\n                    uResolution: { value: [0, 0], type: 'vec2<f32>' },\n                }\n            }\n        });\n    }\n}\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { ParticleBuffer } from './ParticleBuffer';\nimport { ParticleShader } from './shader/ParticleShader';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { ParticleContainer } from './ParticleContainer';\n\n/** @internal */\nexport interface ParticleContainerAdaptor\n{\n    execute(particleContainerPop: ParticleContainerPipe, container: ParticleContainer): void;\n}\n\n/**\n * Renderer for Particles that is designer for speed over feature set.\n * @category scene\n * @internal\n */\nexport class ParticleContainerPipe implements RenderPipe<ParticleContainer>\n{\n    /** The default shader that is used if a sprite doesn't have a more specific one. */\n    public defaultShader: Shader;\n\n    /** @internal */\n    public adaptor: ParticleContainerAdaptor;\n    /** @internal */\n    public readonly state = State.for2d();\n    /** @internal */\n    public readonly renderer: Renderer;\n\n    /** Local uniforms that are used for rendering particles. */\n    public readonly localUniforms = new UniformGroup({\n        uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uRound: { value: 1, type: 'f32' },\n        uResolution: { value: [0, 0], type: 'vec2<f32>' },\n    });\n\n    /**\n     * @param renderer - The renderer this sprite batch works for.\n     * @param adaptor\n     */\n    constructor(renderer: Renderer, adaptor: ParticleContainerAdaptor)\n    {\n        this.renderer = renderer;\n\n        this.adaptor = adaptor;\n\n        this.defaultShader = new ParticleShader();\n\n        this.state = State.for2d();\n    }\n\n    public validateRenderable(_renderable: ParticleContainer): boolean\n    {\n        // always fine :D\n        return false;\n    }\n\n    public addRenderable(renderable: ParticleContainer, instructionSet: InstructionSet)\n    {\n        this.renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add(renderable);\n    }\n\n    public getBuffers(renderable: ParticleContainer): ParticleBuffer\n    {\n        return renderable._gpuData[this.renderer.uid] || this._initBuffer(renderable);\n    }\n\n    private _initBuffer(renderable: ParticleContainer): ParticleBuffer\n    {\n        renderable._gpuData[this.renderer.uid] = new ParticleBuffer({\n            size: renderable.particleChildren.length,\n            properties: renderable._properties,\n        });\n\n        return renderable._gpuData[this.renderer.uid];\n    }\n\n    public updateRenderable(_renderable: ParticleContainer)\n    {\n        // nothing to be done here!\n\n    }\n\n    public execute(container: ParticleContainer): void\n    {\n        const children = container.particleChildren;\n\n        if (children.length === 0)\n        {\n            return;\n        }\n\n        const renderer = this.renderer;\n        const buffer = this.getBuffers(container);\n\n        container.texture ||= children[0].texture;\n\n        const state = this.state;\n\n        buffer.update(children, container._childrenDirty);\n        container._childrenDirty = false;\n\n        state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n\n        const uniforms = this.localUniforms.uniforms;\n\n        const transformationMatrix = uniforms.uTranslationMatrix;\n\n        container.worldTransform.copyTo(transformationMatrix);\n\n        transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n\n        uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n        uniforms.uRound = renderer._roundPixels | container._roundPixels;\n\n        color32BitToUniform(\n            container.groupColorAlpha,\n            uniforms.uColor,\n            0\n        );\n\n        this.adaptor.execute(this, container);\n    }\n\n    /** Destroys the ParticleRenderer. */\n    public destroy(): void\n    {\n        if (this.defaultShader)\n        {\n            this.defaultShader.destroy();\n            this.defaultShader = null;\n        }\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\n\n/**\n * WebGL renderer for Particles that is designed for speed over feature set.\n * @category scene\n * @internal\n */\nexport class GlParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        super(renderer, new GlParticleContainerAdaptor());\n    }\n}\n","import type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\n/** @internal */\nexport class GpuParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const renderer = particleContainerPipe.renderer as WebGPURenderer;\n\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n\n        shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n\n        const state = particleContainerPipe.state;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        renderer.encoder.draw({\n            geometry: buffer.geometry,\n            shader: container.shader || particleContainerPipe.defaultShader,\n            state,\n            size: container.particleChildren.length * 6,\n        });\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\n\n/**\n * WebGPU renderer for Particles that is designed for speed over feature set.\n * @category scene\n * @internal\n */\nexport class GpuParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        super(renderer, new GpuParticleContainerAdaptor());\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe';\n\n// NOTE: this is the first occurrence of needing both gl and gpu pipes in the same file\n// This could cause some issues with tree shaking in the future.\n// Right now these two files do not import anything specific for a renderer, so is not an issue for now.\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n","import { updateQuadBounds } from '../../../utils/data/updateQuadBounds';\nimport { type BatchableSprite } from '../../sprite/BatchableSprite';\nimport { type AbstractText } from '../AbstractText';\nimport { type TextStyle, type TextStyleOptions } from '../TextStyle';\n\n/**\n * Updates the bounds of the given batchable sprite based on the provided text object.\n *\n * This function adjusts the bounds of the batchable sprite to match the dimensions\n * and anchor point of the text's texture. Additionally, it compensates for any padding\n * specified in the text's style to ensure the text is rendered correctly on screen.\n * @param {BatchableSprite} batchableSprite - The sprite whose bounds need to be updated.\n * @param {AbstractText} text - The text object containing the texture and style information.\n * @internal\n */\nexport function updateTextBounds(batchableSprite: BatchableSprite, text: AbstractText<TextStyle, TextStyleOptions>)\n{\n    const { texture, bounds } = batchableSprite;\n    const padding = text._style._getFinalPadding();\n\n    // When HTML text textures are created, they include the padding around the text content\n    // to prevent text clipping and provide a buffer zone. This padding is built into\n    // the texture itself. However, we don't want this padding to affect the text's\n    // actual position on screen.\n\n    // First, calculate bounds using the full padded texture\n    updateQuadBounds(bounds, text._anchor, texture);\n\n    // Then adjust by the padding amount to compensate for the buffer zone\n    // This shifts the render position back by the padding amount, ensuring the text\n    // appears exactly where intended while maintaining the buffer zone around it.\n    const paddingOffset = text._anchor._x * padding * 2;\n    const paddingOffsetY = text._anchor._y * padding * 2;\n\n    bounds.minX -= padding - paddingOffset;\n    bounds.minY -= padding - paddingOffsetY;\n    bounds.maxX -= padding - paddingOffset;\n    bounds.maxY -= padding - paddingOffsetY;\n}\n","/**\n * @param rgb\n * @param alpha\n * @param out\n * @param offset\n * @internal\n */\nexport function colorToUniform(rgb: number, alpha: number, out: Float32Array, offset: number)\n{\n    // TODO replace with Color..\n    out[offset++] = ((rgb >> 16) & 0xFF) / 255;\n    out[offset++] = ((rgb >> 8) & 0xFF) / 255;\n    out[offset++] = (rgb & 0xFF) / 255;\n    out[offset++] = alpha;\n}\n\n/**\n * @param abgr\n * @param out\n * @param offset\n * @internal\n */\nexport function color32BitToUniform(abgr: number, out: Float32Array, offset: number)\n{\n    const alpha = ((abgr >> 24) & 0xFF) / 255;\n\n    out[offset++] = ((abgr & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 8) & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 16) & 0xFF) / 255) * alpha;\n    out[offset++] = alpha;\n}\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { BatchMode } from '../../graphics/shared/GraphicsContext';\n\n/**\n * Options for the mesh geometry.\n * @category scene\n * @advanced\n */\nexport interface MeshGeometryOptions\n{\n    /** The positions of the mesh. */\n    positions?: Float32Array;\n    /** The UVs of the mesh. If not provided, they will be filled with 0 and match the size of the positions. */\n    uvs?: Float32Array;\n    /** The indices of the mesh. */\n    indices?: Uint32Array;\n    /** The topology of the mesh. */\n    topology?: Topology;\n    /** Whether to shrink the buffers to fit the data. */\n    shrinkBuffersToFit?: boolean;\n}\n\n/**\n * A geometry used to batch multiple meshes with the same texture.\n * @category scene\n * @advanced\n */\nexport class MeshGeometry extends Geometry\n{\n    public static defaultOptions: MeshGeometryOptions = {\n        topology: 'triangle-list',\n        shrinkBuffersToFit: false,\n    };\n\n    public batchMode: BatchMode = 'auto';\n\n    /**\n     * @param {MeshGeometryOptions} options - The options of the mesh geometry.\n     */\n    constructor(options: MeshGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(positions: Float32Array, uvs: Float32Array, indices: Uint32Array);\n    constructor(...args: [MeshGeometryOptions] | [Float32Array, Float32Array, Uint32Array])\n    {\n        let options = args[0] ?? {};\n\n        if (options instanceof Float32Array)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'use new MeshGeometry({ positions, uvs, indices }) instead');\n            // #endif\n\n            options = {\n                positions: options,\n                uvs: args[1],\n                indices: args[2],\n            };\n        }\n\n        options = { ...MeshGeometry.defaultOptions, ...options };\n\n        const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n\n        let uvs = options.uvs;\n\n        if (!uvs)\n        {\n            if (options.positions)\n            {\n                uvs = new Float32Array(positions.length);\n            }\n            else\n            {\n                uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n            }\n        }\n\n        const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n\n        const shrinkToFit = options.shrinkBuffersToFit;\n\n        const positionBuffer = new Buffer({\n            data: positions,\n            label: 'attribute-mesh-positions',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const uvBuffer = new Buffer({\n            data: uvs,\n            label: 'attribute-mesh-uvs',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const indexBuffer = new Buffer({\n            data: indices,\n            label: 'index-mesh-buffer',\n            shrinkToFit,\n            usage: BufferUsage.INDEX | BufferUsage.COPY_DST,\n        });\n\n        super({\n            attributes: {\n                aPosition: {\n                    buffer: positionBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n                aUV: {\n                    buffer: uvBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n            },\n            indexBuffer,\n            topology: options.topology,\n        });\n    }\n\n    /** The positions of the mesh. */\n    get positions(): Float32Array\n    {\n        return this.attributes.aPosition.buffer.data as Float32Array;\n    }\n\n    /**\n     * Set the positions of the mesh.\n     * When setting the positions, its important that the uvs array is at least as long as the positions array.\n     * otherwise the geometry will not be valid.\n     * @param {Float32Array} value - The positions of the mesh.\n     */\n    set positions(value: Float32Array)\n    {\n        this.attributes.aPosition.buffer.data = value;\n    }\n\n    /** The UVs of the mesh. */\n    get uvs(): Float32Array\n    {\n        return this.attributes.aUV.buffer.data as Float32Array;\n    }\n\n    /**\n     * Set the UVs of the mesh.\n     * Its important that the uvs array you set is at least as long as the positions array.\n     * otherwise the geometry will not be valid.\n     * @param {Float32Array} value - The UVs of the mesh.\n     */\n    set uvs(value: Float32Array)\n    {\n        this.attributes.aUV.buffer.data = value;\n    }\n\n    /** The indices of the mesh. */\n    get indices(): Uint32Array\n    {\n        return this.indexBuffer.data as Uint32Array;\n    }\n\n    set indices(value: Uint32Array)\n    {\n        this.indexBuffer.data = value;\n    }\n}\n"],"names":["BatchableText","BatchableSprite","constructor","renderer","this","_renderer","runners","resolutionChange","add","text","renderable","_autoResolution","onViewUpdate","destroy","canvasText","returnTexture","texture","CanvasTextPipe","validateRenderable","_didTextUpdate","addRenderable","instructionSet","batchableText","_getGpuText","_updateGpuText","renderPipes","batch","addToBatch","updateRenderable","_batcher","updateElement","_resolution","resolution","getTexture","updateTextBounds","_gpuData","uid","initGpuText","transform","groupTransform","bounds","minX","maxX","minY","maxY","roundPixels","_roundPixels","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","name","_internalCanvas","_internalContext","checkRow","data","width","y","x","index","checkColumn","top","bottom","stride","getCanvasBoundingBox","options","arguments","length","undefined","canvas","Math","min","height","output","DOMAdapter","get","createCanvas","getContext","willReadFrequently","globalCompositeOperation","globalAlpha","nextPow2","ensureInternalCanvas","TypeError","drawImage","getImageData","left","right","Rectangle","EMPTY","strokeRect","set","tempRect","CanvasTextGenerator","getCanvasAndContext","style","padding","_getFinalPadding","measured","CanvasTextMetrics","measureText","ceil","max","canvasAndContext","CanvasPool","getOptimalCanvasAndContext","_renderTextToCanvas","frame","trim","returnCanvasAndContext","context","font","fontStringFromTextStyle","lines","lineHeight","lineWidths","maxLineWidth","fontProperties","resetTransform","scale","textBaseline","_stroke","strokeStyle","lineWidth","miterLimit","lineJoin","join","lineCap","cap","linePositionX","linePositionY","passesCount","dropShadow","i","isShadowPass","dsOffsetText","dsOffsetShadow","fillStyle","shadowOptions","dropShadowColor","color","dropShadowAlpha","alpha","shadowColor","Color","shared","setValue","setAlpha","toRgbaString","dropShadowBlur","blur","dropShadowDistance","distance","shadowBlur","shadowOffsetX","cos","angle","shadowOffsetY","sin","_fill","getCanvasFillStyle","padding2","alignment","linePositionYShift","fontSize","strokeWidth","i2","ascent","align","_drawLetterSpacing","isStroke","letterSpacing","useExperimentalLetterSpacing","experimentalLetterSpacingSupported","experimentalLetterSpacing","textLetterSpacing","strokeText","fillText","currentPosition","stringArray","graphemeSegmenter","previousWidth","currentWidth","currentChar","textStr","j","CanvasTextSystem","_style","_textKey","deprecation","TextStyle","textureStyle","TextureStyle","toString","getPo2TextureFromSource","source","pad","copyFrom","updateUvs","filters","filteredTexture","_applyFilters","initSource","_source","resource","uploadMethodId","alphaMode","TexturePool","renderTextToCanvas","currentRenderTarget","renderTarget","resultTexture","filter","generateFilteredTexture","bind","WebGLSystem","WebGPUSystem","CanvasSystem","extensions","localUniformBit","vertex","header","main","end","localUniformBitGroup2","replace","localUniformBitGl","tilingBit","fragment","tilingBitGl","gpuProgram","glProgram","TilingSpriteShader","Shader","compileHighShaderGpuProgram","bits","roundPixelsBit","compileHighShaderGlProgram","roundPixelsBitGl","tilingUniforms","UniformGroup","uMapCoord","value","Matrix","uClampFrame","Float32Array","uClampOffset","uTextureTransform","uSizeAnchor","resources","localUniforms","uTransformMatrix","uColor","uRound","uTexture","Texture","uSampler","updateUniforms","matrix","anchorX","anchorY","textureWidth","textureHeight","textureMatrix","uniforms","a","b","c","d","tx","ty","invert","mapCoord","QuadGeometry","MeshGeometry","positions","uvs","indices","Uint32Array","sharedQuad","TilingSpriteGpuData","canBatch","geometry","slice","shader","TilingSpritePipe","_state","State","default2d","tilingSpriteData","_getTilingSpriteData","couldBatch","_updateCanBatch","batchableMesh","checkAndUpdateTexture","tilingSprite","batcher","BatchableMesh","didViewUpdate","_updateBatchableMesh","setTexture","_texture","break","execute","groups","globalUniforms","bindGroup","color32BitToUniform","groupColorAlpha","blendMode","getAdjustedBlendModeBlend","groupBlendMode","encoder","draw","state","_tileTransform","anchor","_initTilingSpriteData","gpuData","renderableData","addressMode","update","applyAnchorToTexture","array","offset","size","applyMatrix","setUvs","setPositions","_nonPowOf2wrapping","RendererType","WEBGL","supports","nonPowOf2wrapping","isSimple","isPowerOfTwo","batcherName","packAsQuad","indexOffset","attributeOffset","_batch","_textureMatrixUpdateId","_uvUpdateId","topology","_topology","reset","uvBuffer","getBuffer","transformedUvs","_transformedUvs","_updateID","multiplyUvs","attributeSize","indexSize","blendModeIds","normal","multiply","screen","overlay","erase","_State","polygonOffset","blend","depthMask","offsets","cullMode","culling","clockwiseFrontFace","depthTest","_blendMode","_blendModeId","_polygonOffset","for2d","ResizePlugin","init","Object","defineProperty","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","_cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","window","innerWidth","innerHeight","clientWidth","clientHeight","render","resizeTo","Application","TickerPlugin","assign","autoStart","sharedTicker","ticker","_ticker","remove","UPDATE_PRIORITY","LOW","stop","start","Ticker","oldTicker","_attributeStart","Graphics","ViewContainer","GraphicsContext","rest","label","renderPipeId","_context","_ownedContext","on","allowChildren","off","updateBounds","containsPoint","point","super","_callContextMethod","method","args","setFillStyle","_len","Array","_key","setStrokeStyle","_len2","_key2","fill","_len3","_key3","stroke","_len4","_key4","_len5","_key5","beginPath","cut","arc","_len6","_key6","arcTo","_len7","_key7","arcToSvg","_len8","_key8","bezierCurveTo","_len9","_key9","closePath","ellipse","_len0","_key0","circle","_len1","_key1","path","_len10","_key10","lineTo","_len11","_key11","moveTo","_len12","_key12","quadraticCurveTo","_len13","_key13","rect","_len14","_key14","roundRect","_len15","_key15","poly","_len16","_key16","regularPoly","_len17","_key17","roundPoly","_len18","_key18","roundShape","_len19","_key19","filletRect","_len20","_key20","chamferRect","_len21","_key21","star","_len22","_key22","svg","_len23","_key23","restore","_len24","_key24","save","getTransform","rotateTransform","_len25","_key25","scaleTransform","_len26","_key26","setTransform","_len27","_key27","_len28","_key28","translateTransform","_len29","_key29","clear","clone","lineStyle","v8_0_0","beginFill","endFill","defaultStrokeStyle","drawCircle","_len30","_key30","drawEllipse","_len31","_key31","drawPolygon","_len32","_key32","drawRect","_len33","_key33","drawRoundedRect","_len34","_key34","drawStar","_len35","_key35","localUniformMSDFBit","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","maxTextures","uDistance","colorBit","generateTextureBatchBit","colorBitGl","generateTextureBatchBitGl","batchSamplers","getBatchSamplersUniformGroup","BitmapTextGraphics","customShader","BitmapTextPipe","renderableGC","addManagedHash","bitmapText","graphicsRenderable","_getGpuBitmapText","_updateContext","graphics","syncWithProxy","_updateDistanceField","proxyGraphics","bitmapFont","BitmapFontManager","getFont","distanceField","limits","maxBatchableTextures","chars","currentY","baseLineOffset","bitmapTextLayout","getBitmapTextLayout","offsetY","translate","_anchor","_x","_y","tint","applyFillAsTint","line","charPositions","char","charData","round","xOffset","yOffset","proxyRenderable","fontFamily","dynamicFont","Cache","dx","sqrt","dy","worldScale","abs","fontScale","baseRenderedFontSize","range","container","proxy","groupColor","globalDisplayStatus","localDisplayStatus","groupAlpha","GraphicsGpuData","batches","batched","forEach","BigPool","return","GraphicsPipe","adaptor","_adaptor","contextChange","wasBatched","gpuContext","graphicsContext","updateGpuContext","isBatchable","_rebuild","_addToBatcher","_getGpuDataForRenderable","isRenderable","getGpuContext","_updateBatchesForRenderable","batchPipe","_initGpuDataForRenderable","map","batchClone","BatchableGraphics","copyTo","GraphicsContextSystem","BatchableHTMLText","generatingTexture","htmlText","returnTexturePromise","texturePromise","HTMLTextPipe","batchableHTMLText","catch","e","console","error","getTexturePromise","renderGroup","parentRenderGroup","structureDidChange","nssvg","nsxhtml","HTMLTextRenderData","svgRoot","document","createElementNS","foreignObject","domElement","styleElement","image","Image","setAttribute","overflow","appendChild","textStyleToCSS","cssStyles","toHex","fontWeight","fontStyle","fontVariant","whiteSpace","wordWrap","breakWords","wordWrapWidth","strokeToCSS","dropShadowToCSS","cssOverrides","tagStyles","out","tagStyle","cssTagStyle","push","templates","tagStyleToCSS","dropShadowStyle","toHexa","position","HTMLTextStyle","_cssOverrides","_cssStyle","cssStyle","addOverride","toAdd","v","includes","removeOverride","toRemove","warn","loadFontCSS","url","dataSrc","response","fetch","blob","reader","FileReader","Promise","resolve","reject","onloadend","result","onerror","readAsDataURL","loadFontAsBase64","FontStylePromiseCache","Map","tempHTMLTextRenderData","HTMLTextSystem","_createCanvas","WEBGPU","_buildTexturePromise","htmlTextData","fontFamilies","dedupe","matches","match","addFontFamily","fontFamily2","isArray","split","extractFontFamilies","fontCSS","defaultOptions","fontPromises","has","all","getFontCss","defaultTextStyle","fontStyleCSS","htmlTextRenderData","innerHTML","textContent","body","contentBounds","getBoundingClientRect","doublePadding","measureHtmlText","svgURL","XMLSerializer","serializeToString","getSVGUrl","delay","async","resolve2","setTimeout","onload","src","encodeURIComponent","crossOrigin","loadSVGImage","userAgent","getNavigator","test","isSafari","clearRect","getTemporaryCanvasFromImage","then","_cleanUp","MeshGpuData","MeshPipe","localUniformsBindGroup","BindGroup","mesh","meshData","_getMeshData","isBatched","_geometry","vertexSize","_getBatchableMesh","gpuBatchableMesh","_a","_b","_initMeshData","_initBatchableMesh","gpuMesh","tempBounds","Bounds","getOptimalTexture","emit","_PlaneGeometry","verticesX","verticesY","build","total","verts","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","buffers","indexBuffer","PlaneGeometry","_NineSliceGeometry","_originalWidth","originalWidth","_originalHeight","originalHeight","_leftWidth","leftWidth","_rightWidth","rightWidth","_topHeight","topHeight","_bottomHeight","bottomHeight","_anchorX","_anchorY","updatePositions","p","w","scaleW","h","scaleH","anchorOffsetX","anchorOffsetY","_uvw","_uvh","NineSliceGeometry","NineSliceSpriteGpuData","NineSliceSpritePipe","sprite","gpuSprite","_getGpuSprite","_updateBatchableSprite","batchableSprite","_initGPUSprite","FilterPipe","filterEffect","canBundle","action","pop","_filterEffect","_container","instruction","quadGeometry","Geometry","attributes","aPosition","buffer","format","FilterData","skip","inputTexture","backTexture","blendRequired","outputRenderSurface","globalFrame","FilterSystem","_filterStackIndex","_filterStack","_filterGlobalUniforms","uInputSize","uInputPixel","uInputClamp","uOutputFrame","uGlobalFrame","uOutputTexture","_globalFilterBindGroup","activeBackTexture","_activeFilterData","filterData","_pushFilterData","renderSurface","colorTextureSource","colorTexture","rootResolution","rootAntialias","antialias","_calculateFilterArea","_calculateFilterBounds","rootViewPort","previousFilterData","_getPreviousFilterData","globalResolution","_findFilterResolution","offsetX","_calculateGlobalFrame","_setupFilterTextures","_ref","addRect","rectangle","finishRenderPass","_applyFiltersToTexture","outputTexture","_popFilterData","getBackTexture","lastRenderSurface","previousBounds","backgroundResolution","floor","copyToTexture","applyFilter","input","isFinalTarget","rootRenderTarget","_findPreviousFilterOffset","_updateFilterUniforms","_setupBindGroupsAndRender","calculateSpriteMatrix","outputMatrix","mappedMatrix","worldTransform","cacheToLocalTransform","prepend","uniformBatch","batchUniforms","getUboResource","setResource","getRenderTarget","sourceWidth","sourceHeight","outputFrame","inputSize","inputPixel","inputClamp","pixelWidth","pixelHeight","rootTexture","isRoot","currentIndex","lastIndex","prevFilterData","renderables","tempMatrix","addBounds","getGlobalRenderableBounds","filterArea","getFastGlobalBounds","filterFrameTransform","apply","flip","tempTexture","flop","t","viewPort","paddingMultiplier","Infinity","enabled","clipToViewport","compatibleRenderers","backBuffer","useBackBuffer","fitBounds","isPositive","GlParticleContainerAdaptor","particleContainerPipe","defaultShader","gl","getBuffers","glType","BYTES_PER_ELEMENT","UNSIGNED_SHORT","UNSIGNED_INT","drawElements","TRIANGLES","particleChildren","createIndicesForQuads","outBuffer","totalIndices","Uint16Array","Error","generateUpdateFunction","properties","dynamic","funcFragments","property","code","getAttributeInfoFromFormat","unshift","functionSource","Function","ParticleBuffer","_size","_generateParticleUpdateCache","staticVertexSize","dynamicVertexSize","attributeInfo","_dynamicStride","_staticStride","staticAttributeBuffer","ViewableBuffer","dynamicAttributeBuffer","dynamicOffset","staticOffset","_staticBuffer","Buffer","shrinkToFit","usage","BufferUsage","VERTEX","COPY_DST","_dynamicBuffer","addAttribute","attributeName","addIndex","uploadFunction","getParticleUpdate","_dynamicUpload","dynamicUpdate","_staticUpload","staticUpdate","key","keyGen","getParticleSyncKey","generateParticleUpdate","generateParticleUpdateFunction","particles","uploadStatic","setDataWithSize","byteLength","float32View","uint32View","ParticleShader","GlProgram","from","GpuProgram","wgsl","entryPoint","WHITE","uTranslationMatrix","uResolution","ParticleContainerPipe","_renderable","_initBuffer","_properties","children","_childrenDirty","transformationMatrix","globalUniformData","projectionMatrix","GlParticleContainerPipe","GpuParticleContainerAdaptor","getUniformBindGroup","getTextureBindGroup","GpuParticleContainerPipe","updateQuadBounds","paddingOffset","paddingOffsetY","abgr","_MeshGeometry","shrinkBuffersToFit","aUV","INDEX","batchMode"],"sourceRoot":""}